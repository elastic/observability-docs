*Attach the agent*

The Java agent can instrument supported technologies without
any changes to an application image or code.
To do this, you'll need an
https://kubernetes.io/docs/concepts/workloads/pods/init-containers/[init container]
based on an official Elastic APM docker image.

Before your application starts, copy the agent from the init container into a shared volume.
For example, with the Java agent:

[source,yml]
----
    # ...
    spec:
      volumes:
      - name: elastic-apm-agent <1>
        emptyDir: {}
      initContainers:
      - name: elastic-java-agent
        image: docker.elastic.co/observability/apm-agent-java:1.12.0 <2>
        volumeMounts:
        - mountPath: /elastic/apm/agent
          name: elastic-apm-agent
        command: ['cp', '-v', '/usr/agent/elastic-apm-agent.jar', '/elastic/apm/agent'] <3>
----
<1> The shared volume
<2> Build the initContainer from the official Elastic Java agent image
<3> Copy the agent to the shared volume

The Java command line needs a way to pick up this `javaagent` configuration.
You can use the standard JVMTI https://docs.oracle.com/javase/8/docs/platform/jvmti/jvmti.html#tooloptions[JAVA_TOOL_OPTIONS] environment variable to do this.
It doesn't have to be explicitly specified and is picked up automatically by the JVM when it starts.

TIP: For JVMs that don't support this option, you can use any other environment variable --
either one already defined in your startup script, like `JAVA_OPTS` in some servlet container scripts,
or add a dedicated empty one that will have no effect if it's not set.

[source,yml]
----
      # ...
      containers:
      - name: your-app-container
        env:
        # ...
        - name: JAVA_TOOL_OPTIONS <1>
          value: -javaagent:/elastic/apm/agent/elastic-apm-agent.jar
----
<1> Used for the command line to pick up the `javaagent` configuration

*Configure the agent*

Configure the agent using environment variables:

[source,yml]
----
        # ...
        - name: ELASTIC_APM_SERVER_URLS
          value: "apm-server-url-goes-here" <1>
        - name: ELASTIC_APM_SECRET_TOKEN
          valueFrom:
            secretKeyRef:
              name: apm-secret
              key: ELASTIC_APM_SECRET_TOKEN <2>
        - name: ELASTIC_APM_SERVICE_NAME
          value: "service-name-goes-here" <3>
        - name: ELASTIC_APM_APPLICATION_PACKAGES
          value: "org.springframework.samples.petclinic" <4>
        - name: JAVA_TOOL_OPTIONS <5>
          value: -javaagent:/elastic/apm/agent/elastic-apm-agent.jar
----
<1> Defaults to `http://localhost:8200`
<2> Pass in `ELASTIC_APM_SECRET_TOKEN` from the `apm-secret` keystore created previously
<3> Allowed characters: a-z, A-Z, 0-9, -, _, and space
<4> Used to determine whether a stack trace frame is an _in-app_ frame or a _library_ frame.
<5> Explained previously

*Learn more in the agent reference*

* {apm-java-ref-v}/supported-technologies-details.html[Supported technologies]
* {apm-java-ref-v}/configuration.html[Advanced configuration]
