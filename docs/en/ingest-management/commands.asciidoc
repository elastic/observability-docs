:global-flags-link: For more flags, see <<elastic-agent-global-flags>>.

[[elastic-agent-cmd-options]]
= {agent} command reference

{agent} provides commands for running {agent}, managing {fleet-server}, and
doing common tasks.

NOTE: You might need to log in as a root user (or Administrator on Windows) to
run these commands. After the {agent} service is installed and running, make
sure you run these commands without prepending them with `./` to avoid
invoking the wrong binary.

* <<elastic-agent-diagnostics-command,diagnostics>>
* <<elastic-agent-enroll-command,enroll>>
* <<elastic-agent-help-command,help>>
* <<elastic-agent-inspect-command,inspect>>
* <<elastic-agent-install-command,install>>
* <<elastic-agent-restart-command,restart>>
* <<elastic-agent-run-command,run>>
* <<elastic-agent-status-command,status>>
* <<elastic-agent-uninstall-command,uninstall>>
* <<elastic-agent-upgrade-command,upgrade>>
* <<elastic-agent-version-command,version>>
//* <<elastic-agent-watch-command,watch>>

++++
<hr>
++++

[discrete]
[[elastic-agent-diagnostics-command]]
== elastic-agent diagnostics

Gather diagnostics information from the {agent} and applications it's running.

If no options are specified, this command displays version numbers and application metadata.

If `collect` is specified, it produces an archive containing application metadata, configuration information, the policy, local logs, and metics data (if the buffer is enabled).

Note that *credentials are not redacted* in the archive; they may appear in plain text in the configuration or policy files inside the archive.

This command is intended for debugging purposes only. The output format and structure of the archive produced by `collect` may change between releases.

If `pprof` is specified, it gathers specific `pprof` data from the {agent} or one of the specified underlying {beats}, and displays to `stdout`.
By default it gathers a 30s profile of the {agent}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent diagnostics [--help] [--output <string>] [global-flags]
elastic-agent diagnostics collect [--output <string>]
                                  [--file <string>]
                                  [--pprof]
                                  [--pprof-duration <string>]
                                  [--timeout <string>]
                                  [--help]
                                  [global-flags]
elastic-agent diagnostics pprof [--file <string>]
                                [--pprof-type <string]
                                [--pprof-duration <string>]
                                [--timeout <string>]
                                [--pprof-application <string>]
                                [--pprof-route-key <string>]
                                [--help]
                                [global-flags]
----

[discrete]
=== Options

`--output <string>`::
Output format. If using `collect`, specify `json` or `yaml` (the default).
Otherwise specify `json`, `yaml`, or `human` (the default).

`--file`::
When running `collect`, specifies the output archive name. Defaults to `elastic-agent-diagnostics-<timestamp>.zip`, where the timestamp is the current time in UTC.
+
When running `pprof`, specifies the output file name. Defaults to `stdout`.

`--pprof`::
Gather `pprof` data when running `collect` (default `false`).

`--pprof-duration <string>`::
The length for the `trace` and `profile` data that's collected when gathering `pprof` data.
Must be a string that can be parsed as a `time.Duration` value (default: `30s`).

`--timeout <string>`::
The timeout value for the `diagnostics collect` or `diagnostics pprof` command.
Should be longer then `pprof-duration` as the command needs to gather and process the data.
Must be a string that can be parsed as a `time.Duration` value (default: `30s + pprof-duration`).

`--pprof-type <string>`::
The pprof data to gather, one of: `allocs`, `block`, `cmdline`, `goroutine`, `heap`, `mutex`, `profile`, `threadcreate`, or `trace` (default: `profile`).

`--pprof-application <string>`::
The application name to gather `pprof` data from (default `elastic-agent`).

`--pprof-route-key <string>`::
The route key (output destination) associated with the application to gather `pprof` data from (default `default`).
Note that this setting is ignored in the case where `pprof-application=elastic-agent`.

`--help`::
Show help for the `diagnostics` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent diagnostics
----

++++
<hr>
++++

[discrete]
[[elastic-agent-enroll-command]]
== elastic-agent enroll

//MAINTAINERs: There's a GitHub issue open to consolidate the enroll and install
//entries here, but for now, make sure the syntax stays in sync.

Enroll the {agent} in {fleet}.

Use this command to enroll the {agent} in {fleet} without installing the
agent as a service. You will need to do this if you installed
the {agent} from a DEB or RPM package and plan to use systemd commands to
start and manage the service. This command is also useful for testing
{agent} prior to installing it.

If you've already installed {agent}, use this command to modify the settings that {agent} runs with.

TIP: To enroll an {agent} _and_ install it as a service, use the
<<elastic-agent-install-command,`install` command>> instead. Installing as a service is the most common scenario.

We recommend that you run the `enroll` (or `install`) command as the root user because some
integrations require root privileges to collect sensitive data. This command
overwrites the `elastic-agent.yml` file in the agent directory.

This command includes optional flags to set up <<fleet-server,{fleet-server}>>.

IMPORTANT: This command enrolls the {agent} in {fleet}; it does not start the
agent. To start the agent, either <<start-elastic-agent-service,start the
service>>, if one exists, or use the <<elastic-agent-run-command,`run` command>>
to start the agent from a terminal.


[discrete]
=== Synopsis

To enroll the {agent} in {fleet}:

[source,shell]
----
elastic-agent enroll --url <string>
                     --enrollment-token <string>
                     [--ca-sha256 <string>]
                     [--certificate-authorities <string>]
                     [--delay-enroll]
                     [--force]
                     [--help]
                     [--insecure ]
                     [global-flags]
----

To enroll the {agent} in {fleet} and set up {fleet-server}:

[source,shell]
----
elastic-agent enroll --fleet-server-es <string>
                     --fleet-server-service-token <string>
                     [--ca-sha256 <string>]
                     [--certificate-authorities <string>]
                     [--delay-enroll]
                     [--fleet-server-cert <string>] <1>
                     [--fleet-server-cert-key <string>]
                     [--fleet-server-es-ca <string>]
                     [--fleet-server-es-ca-trusted-fingerprint <string>] <2>
                     [--fleet-server-host <string>]
                     [--fleet-server-insecure-http]
                     [--fleet-server-policy <string>]
                     [--fleet-server-port <uint16>]
                     [--force]
                     [--help]
                     [--url <string>] <3>
                     [--fleet-server-es-insecure]
                     [global-flags]
----
<1> If no `fleet-server-cert*` flags are specified, {agent} auto-generates a
self-signed certificate with the hostname of the machine. Remote {agent}s
enrolling into a {fleet-server} with self-signed certificates must specify
the `--insecure` flag.
<2> Required when using self-signed certificates with {es}.
<3> Required when enrolling in a {fleet-server} with custom certificates. The
URL must match the DNS name used to generate the certificate specified by
`--fleet-server-cert`.

For more information about custom certificates, refer to <<secure-connections>>.

[discrete]
=== Options

// These descriptions are included for the enroll and install commands
// tag::enroll-install-options[]

`--ca-sha256 <string>`::
Comma-separated list of certificate authority hash pins used for certificate
verification.

`--certificate-authorities <string>`::
Comma-separated list of root certificates used for server verification.

`--delay-enroll`::
Delays enrollment to occur on first start of the {agent} service. This setting
is useful when you don't want the {agent} to enroll until the next reboot or manual start of the service, for
example, when you're preparing an image that includes {agent}.

`--enrollment-token <string>`::
Enrollment token to use to enroll {agent} into {fleet}. You can use
the same enrollment token for multiple agents.

`--fleet-server-cert <string>`::
Certificate to use for exposed {fleet-server} HTTPS endpoint.

`--fleet-server-cert-key <string>`::
Private key to use for exposed {fleet-server} HTTPS endpoint.

`--fleet-server-es <string>`::
Start a {fleet-server} process when {agent} is started, and connect to the
specified {es} URL.

`--fleet-server-es-ca <string>`::
Path to certificate authority to use to communicate with {es}.

`--fleet-server-es-ca-trusted-fingerprint <string>`::
The SHA2-56 fingerprint (hash) of the certificate authority used to self-sign {es} certificates.
This fingerprint will be used to verify self-signed certificates presented by {fleet-server} and any inputs started by {agent} for communication.
This flag is required when using self-signed certificates with {es}.

`--fleet-server-es-insecure`::
Allows fleet server to connect to {es} in the following situations:
+
--
* When connecting to an HTTP server.
* When connecting to an HTTPs server and the certificate chain cannot be
verified. The content is encrypted, but the certificate is not verified.
--
+
When this flag is used the certificate verification is disabled.

`--fleet-server-host <string>`::
{fleet-server} HTTP binding host (overrides the policy).

`--fleet-server-insecure-http`::
Expose {fleet-server} over HTTP. This option is not recommended because it's
insecure. It's useful during development and testing, but should not be used in
production. When using this option, you should bind {fleet-server} to the
local host (this is the default).

`--fleet-server-policy <string>`::
Used when starting a self-managed {fleet-server} to allow a specific policy to be used.

`--fleet-server-port <uint16>`::
{fleet-server} HTTP binding port (overrides the policy).

`--fleet-server-service-token <string>`::
Service token to use for communication with {es}.

`--force`::
Force overwrite of current configuration without prompting for confirmation.
This flag is helpful when using automation software or scripted deployments.

`--help`::
Show help for the `enroll` command.

`--insecure`::
Allow the {agent} to connect to {fleet-server} over insecure connections. This
setting is required in the following situations:
+
--
* When connecting to an HTTP server. The API keys are sent in clear text.
* When connecting to an HTTPs server and the certificate chain cannot be
verified. The content is encrypted, but the certificate is not verified.
* When using self-signed certificates generated by {agent}.
--
+
We strongly recommend that you use a secure connection.

`--url <string>`::
{fleet-server} URL to use to enroll the {agent} into {fleet}.

// end::enroll-install-options[]

{global-flags-link}

[discrete]
=== Examples

Enroll the {agent} in {fleet}:

[source,shell]
----
elastic-agent enroll -f \
  --url=https://cedd4e0e21e240b4s2bbbebdf1d6d52f.fleet.eu-west-1.aws.cld.elstc.co:443 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ==
----

Enroll the {agent} in {fleet} and set up {fleet-server}:

[source,shell]
----
elastic-agent enroll -f --fleet-server-es=http://elasticsearch:9200 \
  --fleet-server-service-token=AbEAAdesYXN1abMvZmxlZXQtc2VldmVyL3Rva2VuLTE2MTkxMzg3MzIzMTg7dzEta0JDTmZUcGlDTjlwRmNVTjNVQQ \
  --fleet-server-policy=a35fd520-26f5-11ec-8bd9-3374690g57b6
----

Start {agent} with {fleet-server} (running on a custom CA). This example
assumes you've generated the certificates with the following names:

* `ca.crt`: Root CA certificate
* `fleet-server.crt`: {fleet-server} certificate
* `fleet-server.key`: {fleet-server} private key
* `elasticsearch-ca.crt`: CA certificate to use to connect to {es}

[source,shell]
----
elastic-agent enroll -f \
  --url=https://fleet-server:8220 \
  --fleet-server-es=https://elasticsearch:9200 \
  --fleet-server-service-token=AAEBAWVsYXm0aWMvZmxlZXQtc2XydmVyL3Rva2VuLTE2MjM4OTAztDU1OTQ6dllfVW1mYnFTVjJwTC2ZQ0EtVnVZQQ \
  --fleet-server-policy=a35fd520-26f5-11ec-8bd9-3374690g57b6 \
  --certificate-authorities=/path/to/ca.crt \
  --fleet-server-es-ca=/path/to/elasticsearch-ca.crt \
  --fleet-server-cert=/path/to/fleet-server.crt \
  --fleet-server-cert-key=/path/to/fleet-server.key
----

Then enroll another {agent} into the {fleet-server} started in the previous
example:

[source,shell]
----
elastic-agent enroll -f --url=https://fleet-server:8220 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ== \
  --certificate-authorities=/path/to/ca.crt
----

++++
<hr>
++++

[discrete]
[[elastic-agent-help-command]]
== elastic-agent help

Show help for a specific command.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent help <command> [--help] [global-flags]
----

[discrete]
=== Options

`command`::
The name of the command.

`--help`::
Show help for the `help` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent help enroll
----

++++
<hr>
++++

[discrete]
[[elastic-agent-inspect-command]]
== elastic-agent inspect

Show the current {agent} configuration.

If no parameters are specified, shows the full {agent} configuration.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent inspect [--help] [global-flags]
elastic-agent inspect output [--output <string>]
                             [--program <string>]
                             [--help]
                             [global-flags]
----

[discrete]
=== Options

`output`:: Display the current configuration for the output. This command
accepts additional flags:
+
--
`--output <string>`::
The name of the output to inspect.

`--program <string>`::
The type of program to inspect. For example, `filebeat`. This option must be
combined with `--output`.
--

`--help`::
Show help for the `inspect` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent inspect
elastic-agent inspect output --output default
elastic-agent inspect output --output default --program filebeat
----

++++
<hr>
++++

[discrete]
[[elastic-agent-install-command]]
== elastic-agent install

Install {agent} permanently on the system and manage it by using the system's
service manager. The agent will start automatically after installation is
complete. On Linux (tar package), this command requires a system and service
manager like systemd.

IMPORTANT: If you installed {agent} from a DEB or RPM package, the `install`
command will skip the installation itself and function as an alias of the
<<elastic-agent-enroll-command,`enroll` command>> instead.

You must run this command as the root user (or Administrator on Windows)
to write files to the correct locations. This command overwrites the
`elastic-agent.yml` file in the agent directory.

The syntax for running this command varies by platform. For platform-specific
examples, refer to <<elastic-agent-installation>>.

[discrete]
=== Synopsis

To install the {agent} as a service, enroll it in {fleet}, and start the
`elastic-agent` service:

[source,shell]
----
elastic-agent install --url <string>
                      --enrollment-token <string>
                      [--ca-sha256 <string>]
                      [--certificate-authorities <string>]
                      [--delay-enroll]
                      [--force]
                      [--help]
                      [--insecure ]
                      [global-flags]
----

To install the {agent} as a service, enroll it in {fleet}, and start
a `fleet-server` process alongside the `elastic-agent` service:

[source,shell]
----

elastic-agent install --fleet-server-es <string>
                      --fleet-server-service-token <string>
                      [--ca-sha256 <string>]
                      [--certificate-authorities <string>]
                      [--delay-enroll]
                      [--fleet-server-cert <string>] <1>
                      [--fleet-server-cert-key <string>]
                      [--fleet-server-es-ca <string>]
                      [--fleet-server-es-ca-trusted-fingerprint <string>] <2>
                      [--fleet-server-host <string>]
                      [--fleet-server-insecure-http]
                      [--fleet-server-policy <string>]
                      [--fleet-server-port <uint16>]
                      [--force]
                      [--help]
                      [--url <string>] <3>
                      [--fleet-server-es-insecure]
                      [global-flags]
----
<1> If no `fleet-server-cert*` flags are specified, {agent} auto-generates a
self-signed certificate with the hostname of the machine. Remote {agent}s
enrolling into a {fleet-server} with self-signed certificates must specify
the `--insecure` flag.
<2> Required when using self-signed certificate on {es} side.
<3> Required when enrolling in a {fleet-server} with custom certificates. The
URL must match the DNS name used to generate the certificate specified by
`--fleet-server-cert`.

For more information about custom certificates, refer to <<secure-connections>>.

[discrete]
=== Options

include::commands.asciidoc[tag=enroll-install-options]

{global-flags-link}

[discrete]
=== Examples

Install the {agent} as a service, enroll it in {fleet}, and start the
`elastic-agent` service:

[source,shell]
----
elastic-agent install -f \
  --url=https://cedd4e0e21e240b4s2bbbebdf1d6d52f.fleet.eu-west-1.aws.cld.elstc.co:443 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ==
----

Install the {agent} as a service, enroll it in {fleet}, and start
a `fleet-server` process alongside the `elastic-agent` service:

[source,shell]
----
elastic-agent install -f --fleet-server-es=http://elasticsearch:9200 \
  --fleet-server-service-token=AbEAAdesYXN1abMvZmxlZXQtc2VldmVyL3Rva2VuLTE2MTkxMzg3MzIzMTg7dzEta0JDTmZUcGlDTjlwRmNVTjNVQQ \
  --fleet-server-policy=a35fd620-26f6-11ec-8bd9-3374690f57b6
----

Start {agent} with {fleet-server} (running on a custom CA). This example
assumes you've generated the certificates with the following names:

* `ca.crt`: Root CA certificate
* `fleet-server.crt`: {fleet-server} certificate
* `fleet-server.key`: {fleet-server} private key
* `elasticsearch-ca.crt`: CA certificate to use to connect to {es}

[source,shell]
----
elastic-agent install -f \
  --url=https://fleet-server:8220 \
  --fleet-server-es=https://elasticsearch:9200 \
  --fleet-server-service-token=AAEBAWVsYXm0aWMvZmxlZXQtc2XydmVyL3Rva2VuLTE2MjM4OTAztDU1OTQ6dllfVW1mYnFTVjJwTC2ZQ0EtVnVZQQ \
  --fleet-server-policy=a35fd520-26f5-11ec-8bd9-3374690g57b6 \
  --certificate-authorities=/path/to/ca.crt \
  --fleet-server-es-ca=/path/to/elasticsearch-ca.crt \
  --fleet-server-cert=/path/to/fleet-server.crt \
  --fleet-server-cert-key=/path/to/fleet-server.key
----

Then install another {agent} and enroll it into the {fleet-server} started in
the previous example:

[source,shell]
----
elastic-agent install -f --url=https://fleet-server:8220 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ== \
  --certificate-authorities=/path/to/ca.crt
----


++++
<hr>
++++

[discrete]
[[elastic-agent-restart-command]]
== elastic-agent restart

Restart the currently running {agent} daemon.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent restart [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `restart` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent restart
----

++++
<hr>
++++

[discrete]
[[elastic-agent-run-command]]
== elastic-agent run

Start the `elastic-agent` process.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent run [global-flags]
----

[discrete]
[[elastic-agent-global-flags]]
=== Global flags

These flags are valid whenever you run `elastic-agent` on the command line.

`-c <string>`::
The configuration file to use. If not specified, {agent} uses
`{path.config}/elastic-agent.yml`.

`--e`::
Log to stderr and disable syslog/file output.

`--environment <environmentVar>`::
The environment in which the agent will run.

`--path.config <string>`::
The directory where {agent} looks for its configuration file. The default
varies by platform.

`--path.home <string>`::
The root directory of {agent}. `path.home` determines the location of the
configuration files and data directory.
+
If not specified, {agent} uses the current working directory.

`--path.logs <string>`::
Path to the log output for {agent}. The default varies by platform.

`--v`::
Set log level to INFO.

[discrete]
=== Example

[source,shell]
----
elastic-agent run -c myagentconfig.yml
----

++++
<hr>
++++

[discrete]
[[elastic-agent-status-command]]
== elastic-agent status

Returns the current status of the running {agent} daemon and of each process
in the {agent}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent status [--output <string>]
                     [--help]
                     [global-flags]
----

[discrete]
=== Options

`--output <string>`::
Output the status information in either `human` (the default), `json`, or
`yaml`. When the output is `json` or `yaml`, the command returns status codes:
+
--
|===
|Code |Status

|0    |`STARTING`
|1    |`CONFIGURING`
|2    |`HEALTHY`
|3    |`DEGRADED`
|4    |`FAILED`
|5    |`STOPPING`
|6    |`UPGRADING`
|7    |`ROLLBACK`
|===
--

`--help`::
Show help for the `status` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent status
----

++++
<hr>
++++

[discrete]
[[elastic-agent-uninstall-command]]
== elastic-agent uninstall

Permanently uninstall {agent} from the system.

You must run this command as the root user (or Administrator on Windows)
to remove files.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent uninstall [--force] [--help] [global-flags]
----

[discrete]
=== Options

`--force`::
Uninstall {agent} and do not prompt for confirmation. This flag is helpful
when using automation software or scripted deployments.

`--help`::
Show help for the `uninstall` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent uninstall
----

++++
<hr>
++++

[discrete]
[[elastic-agent-upgrade-command]]
== elastic-agent upgrade

Upgrade the currently running {agent} to the specified version. This should only
be used with agents running in standalone mode. Agents enrolled in {fleet}
should be upgraded through {fleet}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent upgrade <version> [--source-uri <string>] [--help] [flags]
----

[discrete]
=== Options

`version`::
The version of {agent} to upgrade to.

`--source-uri <string>`::
The source URI to download the new version from. By default, {agent} uses the
Elastic Artifacts URL.

`--help`::
Show help for the `upgrade` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent upgrade 7.10.1
----

++++
<hr>
++++

[discrete]
[[elastic-agent-version-command]]
== elastic-agent version

Show the version of {agent}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent version [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `version` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent version
----

++++
<hr>
++++

////
//commenting out until we decide whether we want to expose this in public docs
[discrete]
[[elastic-agent-watch-command]]
== elastic-agent watch

Watch the {agent} for failures and initiate rollback.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent watch [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `watch` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent watch
----

++++
<hr>
++++
////
