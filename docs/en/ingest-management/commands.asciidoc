:global-flags-link: For more flags, see <<elastic-agent-global-flags>>.

[[elastic-agent-cmd-options]]
[role="xpack"]
= Command reference

beta[]

{agent} provides commands for running {agent}, managing {fleet-server}, and
doing common tasks:

* <<elastic-agent-enroll-command,enroll>>
* <<elastic-agent-help-command,help>>
* <<elastic-agent-inspect-command,inspect>>
* <<elastic-agent-install-command,install>>
* <<elastic-agent-restart-command,restart>>
* <<elastic-agent-run-command,run>>
* <<elastic-agent-uninstall-command,uninstall>>
* <<elastic-agent-upgrade-command,upgrade>>
* <<elastic-agent-version-command,version>>
* <<elastic-agent-watch-command,watch>>

NOTE: You might need to log in as a root user (or Administrator on Windows) to
run these commands.

++++
<hr>
++++

[discrete]
[[elastic-agent-enroll-command]]
== elastic-agent enroll

Enroll the {agent} in {fleet}.

Use this command to enroll the {agent} in {fleet} without installing the
agent as a service. You will need to do this if you installed
the {agent} from a DEB or RPM package and plan to use systemd commands to
start and manage the service. This command is also useful for testing
{agent} prior to installing it.

If you've already installed {agent}, use this command to modify the settings that {agent} runs with. 

TIP: To enroll an {agent} _and_ install it as a service, use the
<<elastic-agent-install-command,`install` command>> instead. Installing as a service is the most common scenario.

We recommend that you run the `enroll` (or `install`) command as the root user because some
integrations require root privileges to collect sensitive data. This command
overwrites the `elastic-agent.yml` file in the agent directory.

This command includes optional flags to set up <<fleet-server,{fleet-server}>>.

IMPORTANT: This command enrolls the {agent} in {fleet}; it does not start the
agent. To start the agent, either <<start-elastic-agent,start the service>>, if
one exists, or use the <<elastic-agent-run-command,`run` command>> to start the
agent from a terminal.


[discrete]
=== Synopsis

//QUESTION: Which flags are relevant when running a Fleet
//Server agent vs a regular agent? Which flags are required? (We should list
//required flags first and they shouldn't be wrapped in square brackets). I'm
//making some guesses here, but I'm not sure about the Ca and certificate
//settings.

//Also, should we include deprecated flags (like kibana-url) in the synopsis? I think
//probably not.


To enroll the {agent} in {fleet}:

[source,shell]
----
elastic-agent enroll [--ca-sha256 <string>]
                     [--certificate-authorities <string>]
                     [--enrollment-token <string>]
                     [--force]
                     [--help]
                     [--insecure ]
                     [--url string]
                     [global-flags]
----

To enroll the {agent} in {fleet} and set up {fleet-server}:

[source,shell]
----
elastic-agent enroll [--ca-sha256 <string>]
                     [--certificate-authorities <string>]
                     [--fleet-server-cert <string>] <1>
                     [--fleet-server-cert-key <string>]
                     [--fleet-server-es <string>]
                     [--fleet-server-es-ca <string>]
                     [--fleet-server-host <string>]
                     [--fleet-server-insecure-http]
                     [--fleet-server-policy <string>]
                     [--fleet-server-port <uint16>]
                     [--fleet-server-service-token <string>]
                     [--force]
                     [--help]
                     [--insecure ]
                     [global-flags]
----
<1> If no `fleet-server-cert*` flags are specified, {agent} auto-generates a
self-signed certificate with the hostname of the machine.

//QUESTION: Does this mean that the agent enrolling in this Fleet Server needs
//to pass the insecure flag? Does accepting the auto-generated flags make the
//connection less secure?

[discrete]
=== Options

// These descriptions are included for the enroll and install commands
// tag::enroll-install-options[]

`--ca-sha256 <string>`::
Comma-separated list of certificate authority hash pins used for certificate
verification.

`--certificate-authorities <string>`::
Comma-separated list of root certificates used for server verification.

`--enrollment-token <string>`::
Enrollment token to use to enroll {agent} into {fleet}. You can use
the same enrollment token for multiple agents.

`--fleet-server-cert <string>`::
Certificate to use for exposed {fleet-server} HTTPS endpoint.

`--fleet-server-cert-key <string>`::
Private key to use for exposed {fleet-server} HTTPS endpoint.

`--fleet-server-es <string>`::
Start a {fleet-server} process when {agent} is started, and connect to the
specified {es} URL. You can optionally pass a username and password in the
URL, but it's recommended that you use a service token instead (see the
`--fleet-server-service-token` flag).

//QUESTION: Is this correct? ^^ The description in --help needs work (I've
//opened an issue to get it fixed).

`--fleet-server-es-ca <string>`::
Path to certificate authority to use to communicate with {es}.

`--fleet-server-host <string>`::
{fleet-server} HTTP binding host (overrides the policy).

`--fleet-server-insecure-http`::
Expose {fleet-server} over HTTP. This option is not recommended because it's
insecure. It's useful during development and testing, but should not be used in
production. When using this option, you should bind {fleet-server} to the
local host (this is the default).

`--fleet-server-policy <string>`::
Start a {fleet-server} process when {agent} is started, and use the
specified policy.

//QUESTION: Is this correct? The description in --help says, "Start and run a
//Fleet Server on this specific policy."

`--fleet-server-port <uint16>`::
{fleet-server} HTTP binding port (overrides the policy).

`--fleet-server-service-token <string>`::
Service token to use for communication with {es}. 

`--force`::
Force overwrite of current configuration without prompting for confirmation.
This flag is helpful when using automation software or scripted deployments.

`--help`::
Show help for the `enroll` command.

`--insecure`::
Allow insecure connections to {fleet-server}. When this flag is specified, API
keys are sent in clear text. We strongly recommend that you use a secure
connection.

//QUESTION: Is this true? Are the keys really sent in clear text, or does this
//have to do with accepting auto-generated certificates?

`--kibana-url <string>`::
deprecated:[7.13.0] This deprecated setting has been replaced by `--url`.

//QUESTION: In the past, we've left out --staging to avoid confusion. Should I
//add it here?

`--url <string>`::
Fleet Server URL to use to enroll the {agent} into {fleet}.

// end::enroll-install-options[]

{global-flags-link}

[discrete]
=== Examples

Enroll the {agent} in {fleet}:

[source,shell]
----
elastic-agent enroll -f \
  --url=https://cedd4e0e21e240b4s2bbbebdf1d6d52f.fleet.eu-west-1.aws.cld.elstc.co:443 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ==
----

Enroll the {agent} in {fleet} and set up {fleet-server}:

[source,shell]
----
elastic-agent enroll -f --fleet-server-es=http://myhost:9200 \
  --fleet-server-service-token=AbEAAdesYXN1abMvZmxlZXQtc2VldmVyL3Rva2VuLTE2MTkxMzg3MzIzMTg7dzEta0JDTmZUcGlDTjlwRmNVTjNVQQ
----

//TODO: Add examples that show how to use custom certificates.

++++
<hr>
++++

[discrete]
[[elastic-agent-help-command]]
== elastic-agent help

Show help for a specific command.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent help <command> [--help] [global-flags]
----

[discrete]
=== Options

`command`::
The name of the command.

`--help`::
Show help for the `help` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent help enroll
----

++++
<hr>
++++

[discrete]
[[elastic-agent-inspect-command]]
== elastic-agent inspect

Show the current {agent} configuration.

If no parameters are specified, shows the full {agent} configuration.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent inspect [--help] [global-flags]
elastic-agent inspect output [--output <string>]
                             [--program <string>]
                             [--help]
                             [global-flags]
----

[discrete]
=== Options

`output`:: Display the current configuration for the output. This command
accepts additional flags:
+
--
`--output <string>`::
The name of the output to inspect.

`--program <string>`::
The type of program to inspect. For example, `filebeat`. This option must be
combined with `--output`.
--

`--help`::
Show help for the `inspect` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent inspect
elastic-agent inspect output --output default
elastic-agent inspect output --output default --program filebeat
----

++++
<hr>
++++

[discrete]
[[elastic-agent-install-command]]
== elastic-agent install

Install {agent} permanently on the system and manage it by using the system's
service manager. The agent will start automatically after installation is
complete. On Linux (tar package), this command requires a system and service
manager like systemd.

IMPORTANT: If you installed {agent} from a DEB or RPM package, use the
<<elastic-agent-enroll-command,`enroll` command>> instead of `install`. The DEB
and RPM packages include a service unit for Linux systems with systemd.

You must run this command as the root user (or Administrator on Windows)
to write files to the correct locations. This command overwrites the
`elastic-agent.yml` file in the agent directory.

[discrete]
=== Synopsis

//QUESTION: Same question as before: Which of these settings are still relevant
//when running Elastic Agent vs Elastic Agent + Fleet. Which options are
//required?


To install the {agent} as a service, enroll it in {fleet}, and start the
`elastic-agent` service:

[source,shell]
----
elastic-agent install [--ca-sha256 <string>]
                      [--certificate-authorities <string>]
                      [--enrollment-token <string>]
                      [--force]
                      [--help]
                      [--insecure ]
                      [--url string]
                      [global-flags]
----

To install the {agent} as a service, enroll it in {fleet}, and start
a `fleet-server` process alongside the `elastic-agent` service:

[source,shell]
----
elastic-agent install [--ca-sha256 <string>]
                     [--certificate-authorities <string>]
                     [--fleet-server-cert <string>]
                     [--fleet-server-cert-key <string>]
                     [--fleet-server-es <string>]
                     [--fleet-server-es-ca <string>]
                     [--fleet-server-host <string>]
                     [--fleet-server-insecure-http]
                     [--fleet-server-policy <string>]
                     [--fleet-server-port <uint16>]
                     [--fleet-server-service-token <string>]
                     [--force]
                     [--help]
                     [--insecure ]
                     [global-flags]
----


[discrete]
=== Options

include::commands.asciidoc[tag=enroll-install-options]

{global-flags-link}

[discrete]
=== Examples

Install the {agent} as a service, enroll it in {fleet}, and start the
`elastic-agent` service:

[source,shell]
----
elastic-agent install -f \
  --url=https://cedd4e0e21e240b4s2bbbebdf1d6d52f.fleet.eu-west-1.aws.cld.elstc.co:443 \
  --enrollment-token=NEFmVllaa0JLRXhKebVKVTR5TTI6N2JaVlJpSGpScmV0ZUVnZVlRUExFQQ==
----
  
Install the {agent} as a service, enroll it in {fleet}, and start
a `fleet-server` process alongside the `elastic-agent` service:

[source,shell]
----
elastic-agent install -f --fleet-server-es=http://myhost:9200 \
  --fleet-server-service-token=AbEAAdesYXN1abMvZmxlZXQtc2VldmVyL3Rva2VuLTE2MTkxMzg3MzIzMTg7dzEta0JDTmZUcGlDTjlwRmNVTjNVQQ
----

++++
<hr>
++++

[discrete]
[[elastic-agent-restart-command]]
== elastic-agent restart

Restart the currently running {agent} daemon.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent restart [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `restart` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent restart
----

++++
<hr>
++++

[discrete]
[[elastic-agent-run-command]]
== elastic-agent run

Start the `elastic-agent` process.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent run [global-flags]
----

[discrete]
[[elastic-agent-global-flags]]
=== Global flags

These flags are valid whenever you run `elastic-agent` on the command line.

`-c <string>`::
The configuration file to use. If not specified, {agent} uses
`{path.config}/elastic-agent.yml`.

`--e`::
Log to stderr and disable syslog/file output.

`--environment <environmentVar>`::
The environment in which the agent will run.

`--path.config <string>`::
The directory where {agent} looks for its configuration file. The default
varies by platform.

`--path.home <string>`::
The root directory of {agent}. `path.home` determines the location of the
configuration files and data directory.
+
If not specified, {agent} uses the current working directory.

`--path.logs <string>`::
Path to the log output for {agent}. The default varies by platform.

`--v`::
Set log level to INFO.

[discrete]
=== Example

[source,shell]
----
elastic-agent run -c myagentconfig.yml
----

++++
<hr>
++++

[discrete]
[[elastic-agent-uninstall-command]]
== elastic-agent uninstall

Permanently uninstall {agent} from the system.

You must run this command as the root user (or Administrator on Windows)
to remove files. 

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent uninstall [--force] [--help] [global-flags]
----

[discrete]
=== Options

`--force`::
Uninstall {agent} and do not prompt for confirmation. This flag is helpful
when using automation software or scripted deployments.

`--help`::
Show help for the `uninstall` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent uninstall
----

++++
<hr>
++++

[discrete]
[[elastic-agent-upgrade-command]]
== elastic-agent upgrade

Upgrade the currently running {agent} to the specified version. This should only
be used with agents running in standalone mode. Agents enrolled in {fleet}
should be upgraded through {fleet}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent upgrade <version> [--source-uri <string>] [--help] [flags]
----

[discrete]
=== Options

`version`::
The version of {agent} to upgrade to.

`--source-uri <string>`::
The source URI to download the new version from. By default, {agent} uses the
Elastic Artifacts URL.

`--help`::
Show help for the `upgrade` command.

{global-flags-link}

[discrete]
=== Examples

[source,shell]
----
elastic-agent upgrade 7.10.1
----

++++
<hr>
++++

[discrete]
[[elastic-agent-version-command]]
== elastic-agent version

Show the version of {agent}.

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent version [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `version` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent version
----

++++
<hr>
++++

[discrete]
[[elastic-agent-watch-command]]
== elastic-agent watch

Watch the {agent} for failures and initiate rollback.

//QUESTION: When is this command used? During testing? 

[discrete]
=== Synopsis

[source,shell]
----
elastic-agent watch [--help] [global-flags]
----

[discrete]
=== Options

`--help`::
Show help for the `watch` command.

{global-flags-link}

[discrete]
=== Example

[source,shell]
----
elastic-agent watch
----

++++
<hr>
++++
