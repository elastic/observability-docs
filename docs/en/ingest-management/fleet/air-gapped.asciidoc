[[air-gapped]]
= Air-gapped environments

When running {agent}s in a restricted or closed network, you need to take extra
steps to make sure:

* {kib} is able to reach the {package-registry} to download package metadata and
content.
* {agent}s are able to download binaries during upgrades.

[discrete]
[[air-gapped-proxy-server]]
== Use a proxy server to access the {package-registry}

By default {kib} downloads package metadata and content from the public
{package-registry} at https://epr.elastic.co/[epr.elastic.co].

If you can route traffic to the public endpoint of the {package-registry}
through a network gateway, set the following property in {kib} to use a proxy
server:

[source,yaml]
----
xpack.fleet.registryProxyUrl: your-nat-gateway.corp.net
----

For more information, refer to <<fleet-agent-proxy-support>>.

[discrete]
[[air-gapped-diy-epr]]
== Host your own {package-registry}

If routing traffic through a proxy server is not an option, you can host your
own {package-registry}.

The {package-registry} can be deployed and hosted onsite using one of the
available Docker images. These docker images include the {package-registry} and
a selection of packages.

There are different distributions available:

* {version} (recommended): +docker.elastic.co/package-registry/distribution:{version}+ - Selection of packages from the production repository released with the {version} version of the {stack}.
* production: `docker.elastic.co/package-registry/distribution:production` - Packages available in the production registry (https://epr.elastic.co).
* staging: `docker.elastic.co/package-registry/distribution:staging` - Packages available in the staging registry (https://epr-staging.elastic.co). These packages may be pending of validation.
* snapshot: `docker.elastic.co/package-registry/distribution:snapshot` - Packages under development.

ifeval::["{release-state}"=="unreleased"]
[WARNING]
====
Version {version} of the {package-registry} distribution has not yet been released.
====
endif::[]

To update the distribution image, re-pull the image and then restart the docker container.

Every distribution contains packages that can be used by different versions of
the {stack}. The {package-registry} API exposes a {kib} version constraint that
allows for filtering packages that are compatible with a particular version.

// lint ignore runtimes
NOTE: These steps use the standard Docker CLI, but you can create a Kubernetes manifest
based on this information.
These images can also be used with other container runtimes compatible with Docker images.

1. Pull the Docker image from the public Docker registry:
+
["source", "sh", subs="attributes"]
----
docker pull docker.elastic.co/package-registry/distribution:{version}
----
+
2. Save the Docker image locally:
+
["source", "sh", subs="attributes"]
----
docker save -o package-registry-{version}.tar docker.elastic.co/package-registry/distribution:{version}
----
+
TIP: Check the image size to ensure that you have enough disk space. 

3. Transfer the image to the air-gapped environment and load it:
+
["source", "sh", subs="attributes"]
----
docker load -i package-registry-{version}.tar
----

4. Run the {package-registry}:
+
["source", "sh", subs="attributes"]
----
docker run -it -p 8080:8080 docker.elastic.co/package-registry/distribution:{version}
----

5. (Optional) You can monitor the health of your {package-registry} with
requests to the root path:
+
["source", "sh", subs="attributes"]
----
docker run -it -p 8080:8080 \
    --health-cmd "curl -f -L http://127.0.0.1:8080/" \
    docker.elastic.co/package-registry/distribution:{version}
----

[discrete]
[[air-gapped-diy-epr-kibana]]
=== Connect {kib} to your hosted {package-registry}

Use the `xpack.fleet.registryUrl` property in the {kib} config to set the URL of
your hosted package registry. For example:

[source,yaml]
----
xpack.fleet.registryUrl: "http://package-registry.corp.net:8080"
----

[discrete]
[[air-gapped-tls]]
=== TLS configuration of the {package-registry}

You can configure the {package-registry} to listen on a secure HTTPS port using TLS.

For example, given a key and a certificate pair available in `/etc/ssl`, you
can start the {package-registry} listening on the 443 port using the following command:

["source", "sh", subs="attributes"]
----
docker run -it -p 443:443 \
  -v /etc/ssl/package-registry.key:/etc/ssl/package-registry.key:ro \
  -v /etc/ssl/package-registry.crt:/etc/ssl/package-registry.crt:ro \
  -e EPR_ADDRESS=0.0.0.0:443 \
  -e EPR_TLS_KEY=/etc/ssl/package-registry.key \
  -e EPR_TLS_CERT=/etc/ssl/package-registry.crt \
  docker.elastic.co/package-registry/distribution:{version}
----

[discrete]
=== Using custom CA certificates

If you are using self-signed certificates or certificates issued by a custom Certificate Authority (CA), you need to set the file path to your CA in the `NODE_EXTRA_CA_CERTS` environment
variable in the {kib} startup files.

[source,text]
----
NODE_EXTRA_CA_CERTS="/etc/kibana/certs/ca-cert.pem"
----

[discrete]
[[host-artifact-registry]]
== Host your own artifact registry for binary downloads

{agent}s must be able to access the {artifact-registry} to download
binaries during upgrades. By default {agent}s download artifacts from
`https://artifacts.elastic.co/downloads/`.

To make binaries available in an air-gapped environment, you can host your own
custom artifact registry, and then configure {agent}s to download binaries
from it.

. Create a custom artifact registry in a location accessible to your {agent}s:
.. Download the latest release artifacts from the public {artifact-registry} at
`https://artifacts.elastic.co/downloads/`. For example, the
following cURL commands download all the artifacts that may be needed to upgrade
{agent}s running on Linux. The exact list depends on which integrations you're
using.
+
["source","shell",subs="attributes"]
----
curl -O https://artifacts.elastic.co/downloads/apm-server/apm-server-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/apm-server/apm-server-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/apm-server/apm-server-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/auditbeat/auditbeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/auditbeat/auditbeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/auditbeat/auditbeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/heartbeat/heartbeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/osquerybeat/osquerybeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/osquerybeat/osquerybeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/osquerybeat/osquerybeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/beats/packetbeat/packetbeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/cloudbeat/cloudbeat-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/cloudbeat/cloudbeat-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/cloudbeat/cloudbeat-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/endpoint-dev/endpoint-security-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/endpoint-dev/endpoint-security-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/endpoint-dev/endpoint-security-{version}-linux-x86_64.tar.gz.asc
curl -O https://artifacts.elastic.co/downloads/fleet-server/fleet-server-{version}-linux-x86_64.tar.gz
curl -O https://artifacts.elastic.co/downloads/fleet-server/fleet-server-{version}-linux-x86_64.tar.gz.sha512
curl -O https://artifacts.elastic.co/downloads/fleet-server/fleet-server-{version}-linux-x86_64.tar.gz.asc
----
.. On your HTTP file server, group the artifacts into directories and
sub-directories that follow the same convention used by the {artifact-registry}:
+
[source,shell]
----
<source_uri>/<artifact_type>/<artifact_name>-<version>-<arch>-<package_type>
----
+
Where `<artifact_type>` may be `beats/elastic-agent`, `beats/filebeat`,
`fleet-server`, `endpoint-dev`, and so on.
+
[TIP]
====
Make sure you have a plan or automation in place to update your artifact
registry when new versions of {agent} are available.
====
. Add the agent binary download location to {fleet} settings:
.. In {kib}, go to **{fleet} -> Settings**.
.. Under **Agent Binary Download**, click **Add agent binary source** to add
the location of your artifact registry. For more detail about these settings,
refer to <<fleet-agent-binary-download-settings>>. If you want all {agent}s
to download binaries from this location, set it as the default. 
. If your artifact registry is not the default, edit your agent policies to
override the default:
.. Go to **{fleet} -> Agent policies** and click the policy name to edit it.
.. Click **Settings**.
.. Under **Agent Binary Download**, select your artifact registry.
+
When you trigger an upgrade for any {agent}s enrolled in the policy, the
binaries are downloaded from your artifact registry instead of the
public repository.

**Not using {fleet}?** For standalone {agent}s, you can set the binary download
location under `agent.download.sourceURI` in the
<<elastic-agent-reference-yaml,`elastic-agent.yml`>> file, or run the
<<elastic-agent-upgrade-command,`elastic-agent upgrade`>> command
with the `--source-uri` flag specified. 
