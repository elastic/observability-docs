[[fleet-server-scalability]]
= {fleet-server} scalability

This page summarizes the resource and {fleet-server} configuration
requirements needed to scale your deployment of {agent}s. To scale
{fleet-server}, you need to modify settings in your deployment and the
{fleet-server} agent policy.

First modify your {fleet} deployment settings in {ecloud}:

. Log in to {ecloud} and go to your deployment.

. Under **Deployments > _deployment name_**, click **Edit**.

. Under {integrations-server}:
+
--
* Modify the compute resources available to the server to accommodate a higher
scale of {agent}s
* Modify the availability zones to satisfy fault tolerance requirements

For recommended settings, refer to <<scaling-recommendations>>.

[role="screenshot"]
image::images/fleet-server-hosted-container.png[{fleet-server} hosted agent]
--

Next modify the {fleet-server} configuration by editing the agent policy: 

. In {kib}, go to **Management > {fleet} > Agent Policies**. Click the name of
the **{ecloud} agent policy** to edit the policy.

. Open the **Actions** menu next to the {fleet-server} integration and click
**Edit integration**.
+
[role="screenshot"]
image::images/elastic-cloud-agent-policy.png[{ecloud} policy]

. Under {fleet-server}, modify **Max Connections** and other
<<fleet-server-configuration,advanced settings>> as described in
<<scaling-recommendations>>. 
+
[role="screenshot"]
image::images/fleet-server-configuration.png[{fleet-server} configuration]

[discrete]
[[fleet-server-configuration]]
== Advanced {fleet-server} options

The following advanced settings are available to fine tune your {fleet-server}
deployment.

`cache`::

`num_counters`:::
Size of the hash table. Best practice is to have this set to 10 times the max
connections.

`max_cost`:::
Total size of the cache.

`server.timeouts`::
`checkin_timestamp`:::
How often {fleet-server} updates the "last activity" field for each agent.
Defaults to `30s`. In a large-scale deployment, increasing this
setting may improve performance. If this setting is higher than `2m`,
most agents will be shown as "offline" in the Fleet UI. For a typical setup,
it's recommended that you set this value to less than `2m`.

`checkin_long_poll`:::
How long {fleet-server} allows a long poll request from an agent before
timing out. Defaults to `5m`. In a large-scale deployment, increasing
this setting may improve performance.

`server.limits`::
`policy_throttle`:::
How often a new policy is rolled out to the agents.

`checkin_limit.interval`:::
How fast the agents can check in to the {fleet-server}.

`checkin_limit.burst`:::
Burst of check-ins allowed before falling back to the rate defined by
`interval`.

`checkin_limit.max`:::
Maximum number of agents.

`artifact_limit.max`:::
Maximum number of agents that can call the artifact API concurrently. It allows
the user to avoid overloading the {fleet-server} from artifact API calls.

`artifact_limit.interval`:::
How often artifacts are rolled out. Default of `100ms` allows 10 artifacts to be
rolled out per second.

`artifact_limit.burst`:::
Number of transactions allowed for a burst, controlling oversubscription on
outbound buffer.

`ack_limit.max`:::
Maximum number of agents that can call the Ack API concurrently. It allows the
user to avoid overloading the {fleet-server} from Ack API calls.

`ack_limit.interval`:::
How often an acknowledgment (ACK) is sent. Default value of `10ms` enables 100
ACKs per second to be sent.

`ack_limit.burst`:::
Burst of ACKs to accommodate (default of 20) before falling back to the rate
defined in `interval`.

`enroll_limit.max`:::
Maximum number of agents that can call the Enroll API concurrently. This setting
allows the user to avoid overloading the {fleet-server} from Enrollment API
calls.

`enroll_limit.interval`:::
Interval between processing enrollment request. Enrollment is both CPU and RAM
intensive, so the number of enrollment requests needs to be limited for overall
system health. Default value of `100ms` allows 10 enrollments per second.

`enroll_limit.burst`:::
Burst of enrollments to accept before falling back to the rate defined by
`interval`.

[discrete]
[[scaling-recommendations]]
== Scaling recommendations ({ecloud})

The following tables provide resource requirements and scaling guidelines based
on the number of agents required by your deployment:

* <<resource-requirements-by-number-agents>>

[discrete]
[[resource-requirements-by-number-agents]]
=== Resource requirements by number of agents
|===
| Number of Agents | {fleet-server} Memory | {fleet-server} vCPU | {es} Hot Tier
| 2,000            | 2GB                   | up to 8 vCPU        | 16GB x2 RAM  \| 4 vCPU x2
| 5,000            | 4GB                   | up to 8 vCPU        | 16GB x2 RAM  \| 4 vCPU x2
| 10,000           | 8GB                   | up to 8 vCPU        | 64GB x2 RAM  \| 16 vCPU x2
| 15,000           | 8GB                   | up to 8 vCPU        | 128GB x2 RAM \| 32 vCPU x2
| 25,000           | 8GB                   | up to 8 vCPU        | 128GB x2 RAM \| 32 vCPU x2
| 50,000           | 8GB                   | up to 8 vCPU        | 192GB x2 RAM \| 48 vCPU x2
| 75,000           | 8GB                   | up to 8 vCPU        | 192GB x2 RAM \| 48 vCPU x2
| 100,000          | 8GB x2                | 8 vCPU x2           | 256GB x2 RAM \| 64 vCPU x2
|===

