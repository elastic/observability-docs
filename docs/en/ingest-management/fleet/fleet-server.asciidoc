[[fleet-server]]
= Set up {fleet-server}

{fleet-server} is required if you plan to use {fleet} for central management.

* For self-managed deployments, you must install and host {fleet-server}
yourself.

* **No extra setup is required on {ecloud} unless you want to scale your
deployment.** {ecloud} runs a hosted version of {integrations-server} that
includes {fleet-server}. 

[discrete]
== What is {fleet-server}?

{fleet-server} is a component that connects {agent}s to {fleet}. It supports
many {agent} connections and serves as a control plane for updating agent
policies, collecting status information, and coordinating actions across
{agent}s. It also provides a scalable architecture. As the size of your agent
deployment grows, you can deploy additional {fleet-server}s to manage the
increased workload.

The following diagram shows how {agent}s communicate with {fleet-server} to
retrieve agent policies:

image:images/fleet-server-communication.png[{fleet-server} handles communication between {agent}, {fleet-server}, {fleet}, and {es}]

. When a new agent policy is created, the {fleet} UI saves the policy to
a {fleet} index in {es}.

. To enroll in the policy, {agent}s send a request to {fleet-server},
using the enrollment key generated for authentication.

. {fleet-server} monitors {fleet} indices, picks up the new agent policy from
{es}, then ships the policy to all {agent}s enrolled in that policy.
{fleet-server} may also write updated policies to the {fleet} index to manage
coordination between agents.

. {agent} uses configuration information in the policy to collect and send data
to {es}.

. {agent} checks in with {fleet-server} for updates, maintaining an open
connection.

. When a policy is updated, {fleet-server} retrieves the updated policy from
{es} and sends it to the connected {agent}s.

. To communicate with {fleet} about the status of {agent}s and the policy
rollout, {fleet-server} writes updates to {fleet} indices.

****
**Does {fleet-server} run inside of {agent}?**

{fleet-server} is a subprocess that runs inside a deployed {agent}. This means
the deployment steps are similar to any {agent}, except that you enroll the
agent in a special {fleet-Server} policy. Typically--especially in large-scale
deployments--this agent is dedicated to running {fleet-server} as an {agent}
communication host and is not configured for data collection.
****

[discrete]
[[fleet-security-account]]
== Service account

{fleet-server} uses a service token to communicate with {es}, which contains
a `fleet-server` service account. Each {fleet-server} can use its own service
token, and you can share it across multiple servers (not recommended). The
advantage of using a separate token for each server is that you can invalidate
each one separately.

You can create a service token by either using the {fleet} UI or the {es} API.
For more information, refer to <<add-a-fleet-server>>.

[discrete]
== Learn more

To learn more about adding and scaling {fleet-server}, refer to:

[[add-fleet-server]]
* <<add-a-fleet-server>>

* <<deployment-models>>

* <<fleet-server-scalability>>

* <<fleet-server-monitoring>>
