[[fleet-server-secrets]]
= {fleet-server} Secrets

{fleet-server} configuration will contain secret values.
These values may be specified directly in the configuration or through secret files.
Command line args may be used to pass the values or file paths.

== Secret Values

The following secret values may be used when configuring {fleet-server}.

Note that the configuration fragments shown below are either specified in the UI as part of the output specification or as part of the {fleet-server} integration settings.

`service_token`::
The `service_token` is used to communicate with {es}.

It may be specified in the configuration directly as:
[source,yaml]
----
output.elasticsearch.service_token: my-service-token
----

Or by a file with:
[source,yaml]
----
output.elasticsearch.service_token_file: /path/to/token-file
----

When running {fleet-server} under {agent} it can either be specified with the `--fleet-server-service-token` or `--fleet-server-service-token-file` flags.
See <<elastic-agent-cmd-options>> for more details.

If running {fleet-server} under the {agent} in a container (see <<elastic-agent-container>>), the environment variables `FLEET_SERVER_SERVICE_TOKEN` or `FLEET_SERVER_SERVICE_TOKEN_FILE` may be used.

TLS private key::
The TLS private key is used to encrypt communications between {fleet-server} and {agent}.
See <<secure-connections>> for more details.

While not reccomended, it may be specified in the configuration directly as:
[source,yaml]
----
inputs:
  - type: fleet-server
    ssl.private_key: |
      ----BEGIN CERTIFICATE----
      ....
      ----END CERTIFICATE----
----

Alternatively, the path to the private key can be provided with the same attribute:
[source,yaml]
----
inputs:
  - type: fleet-server
    ssl.private_key: /path/to/cert.key
----

When running {fleet-server} under {agent} the certificate path may be provided with the `--fleet-server-cert-key` flag.
See <<elastic-agent-cmd-options>> for more details.

If running {fleet-server} under the {agent} in a container (see <<elastic-agent-container>>), the environment variable `FLEET_SERVER_CERT_KEY` may be used.

TLS private key passphrase::
The private key passphrase is use to decrypt an encrypted private key file.

It can be specfied as a secret file in the configuration with:
[source,yaml]
----
inputs:
  - type: fleet-server
    ssl.private_key_passphrase_file: /path/to/passphrase
----

When running {fleet-server} under {agent} the certificate path may be provided with the `--fleet-server-cert-key-passphrase-file` flag.
See <<elastic-agent-cmd-options>> for more details.

If running {fleet-server} under the {agent} in a container (see <<elastic-agent-container>>), the environment variable `FLEET_SERVER_CERT_KEY_PASSPHRASE_FILE` may be used.

APM API Key::
The APM API Key may be used to gather APM data from {fleet-server}.

It can be directly specified in the instrumentation segment of the config:
[source,yaml]
----
inputs:
  - type: fleet-server
    instrumentation.api_key: my-apm-api-key
----

Or by a file with:
[source,yaml]
----
inputs:
  - type: fleet-server
    instrumentation.api_key_file: /path/to/apmAPIKey
----

It may also be specified by value with the environment variable `ELASTIC_APM_API_KEY`.

APM secret token::
The APM secret token may be used to gather APM data from {fleet-server}.

It can be directly specified in the instrumentation segment of the config:
[source,yaml]
----
inputs:
  - type: fleet-server
    instrumentation.secret_token: my-apm-secret-token
----

Or by a file with:
[source,yaml]
----
inputs:
  - type: fleet-server
    instrumentation.secret_token_file: /path/to/apmSecretToken
----

It may also be specified by value with the environment variable `ELASTIC_APM_SECRET_TOKEN`.

== Secret files guide

The following guides provide step-by-step examples with best practices on how to deploy secret files directly on a host or through the kubernetes secrets engine.

[[secret-filesystem]]
=== Secrets on filesystem

Secret files can be provisioned as plain text files directly on filesystems and referenced/passed through the {agent}.

We reccomend the following steps in order to improve security.

==== File Permissions

File permissions should not allow for global read permissions.

On MacOS and Linux file ownership and file permissions can be respectivly set with the `chown` and `chmod` commands.
{fleet-server} runs as the `root` user on MacOS and Linux, so given a file named `mySecret`, it can be altered with:
[source,sh]
----
sudo chown root:root mySecret # set the user:group to root
sudo chmod 0600 mySecret      # set only the read/write permission flags for the user, clear group and global permissions.
----

TODO windows steps

==== Temporary filesystem

A temporary filesystem (in RAM) can be used to hold secret files in order to improve security.
These types of filesystems are normally not included in backups and cleared if the host is reset.
However, the filesystem and secret files will need to be reprovisioned every reset.

On Linux use:
[source,sh]
----
mount -o size=1G -t tmpfs none /mnt/fleet-server-secrets
----

TODO
On MacOS use:
[source,sh]
----
----

TODO
On Windows use:
[source,sh]
----
----

=== Secrets in Containers

When using secret files directly in containers without using Kubernetes or another secrets management solution the files can be passed into containers by mounting the file or directory.
The file should be provisioned in the same manner as it is in <<secret-filesystem>> and mounted in read only mode, for example when using docker:

[source,sh]
----
docker run \
	-v /path/to/your/fleet-server.yml:/etc/fleet-server.yml:ro \
	-v /path/to/creds:/creds:ro \
	--rm fleet-server
----

=== Secrets in Kubernetes

Kuberentes has a https://kubernetes.io/docs/concepts/configuration/secret/[secrets management engine] that can be used to provision secret files to pods.

TODO example

==== {agent} k8s secrets provider

When running {fleet-server} under the {agent} in Kuberenetes, the {agent}'s <<kubernetes_secrets-provider>> may be used to insert a kuberenetes secret directly into {fleet-server}'s configuration.

TODO example
