[[deployment-models]]
= {fleet-server} deployment models

There are three approaches you can take when deploying {fleet-server}:

* <<deployed-in-cloud>> as part of the hosted {ess}, which is managed by Elastic
* <<deployed-on-prem>>
* <<fleet-server-on-prem-es-cloud>>

Read more about each to choose the best approach for your situation.

[discrete]
[[deployed-in-cloud]]
== Deploy on {ecloud}

// What is it...
To simplify the deployment of {agent}, {fleet-server} can be provisioned and
hosted on {ecloud}. In this case, when the deployment is created,
a highly available set of {fleet-server}s is automatically deployed.

// This approach might be right for you if...
// ...

// This approach might not be right for you if...
// ...

image::images/fleet-server-cloud-deployment.png[{fleet-server} Cloud deployment model]

// text description?

You can choose the resources allocated to each {fleet-server} and whether you want
each {fleet-server} to be deployed in multiple availability zones.

// How to
To install {fleet-server} on-premises, go to <<_how_to_add_a_fleet_server>> and click the
*{ess}* tab. Once deployed on {ecloud} as a service, the full life cycle of {fleet-server}
is managed by Elastic. {fleet-server} is scalable, highly available with traffic ingress,
and load balanced across multiple instances to satisfy the scale requirements.

[discrete]
[[deployed-on-prem]]
== Deploy on-premises and self-managed

// What is it...
Alternatively, you can deploy {fleet-server} on-premises and managed it yourself.
In this deployment model, you are responsible for {fleet-server} deployment
and lifecycle management.

// This approach might be right for you if...
This mode of operation works well if you need to satisfy data governance requirements
or you want agents to only have access to a private segmented network.

// This approach might not be right for you if...
// ...

Itâ€™s recommended that you provision multiple instances of the {fleet-server} and
use a load balancer to better scale the deployment.

image::images/fleet-server-on-prem-deployment.png[{fleet-server} on-premises deployment model]

// text description?

// How to
To install {fleet-server} on-premises, go to <<_how_to_add_a_fleet_server>> and click the
*Self-managed* tab. In these instructions, you have the option to use the organization's own
certificate to establish a secure connection from {fleet-server} to {es}.

// [discrete]
// [[fleet-server-HA-operations]]
// == {fleet-server} High availability operations

// {fleet-server} is stateless. Connections to the {fleet-server} therefore can be
// load balanced as long as the {fleet-server} has capacity to accept more
// connections. Load balancing is done on a round-robin basis.

// In the {ecloud} deployment model, multiple {fleet-server}s are automatically
// provisioned to satisfy the instance size chosen (instance sizes are modified to
// satisfy the scale requirement). In addition, if you choose multiple
// availability zones to address your fault-tolerance requirements, those
// instances are also utilized to balance the load.

// In an on-premises deployment, high-availability, fault-tolerance, and lifecycle
// management of the {fleet-server} are the responsibility of the administrator.

[discrete]
[[fleet-server-on-prem-es-cloud]]
== Deploy {fleet-server} on-premises and {es} on Cloud

// What is it...
Another approach is to aggregate the control and data plane traffic at the local
site and have your {es} cluster managed in {ecloud}.

// This approach might be right for you if...
These multi-site deployments are useful for managed service providers or
larger enterprises who segregate their networks.

To accommodate these use cases you may deploy a cluster of {fleet-server}s on-premises and
connect them back to the {ecloud} with access to {es} and {kib}.

// This approach might not be right for you if...
// ...

image::images/fleet-server-on-prem-es-cloud.png[{fleet-server} on-premise and {es} on Cloud deployment model]

// text description?

// How to
To add a new {fleet-server} in this type of deployment, you'll need to:

. <<fleet-server-add-hosts>>
. <<fleet-server-create-policy>>
. <<fleet-server-generate-certificate>>
. <<fleet-server-add-agents>>
. <<fleet-server-install-agents>>

[discrete]
[[fleet-server-add-hosts]]
=== Add {fleet-server} hosts

// What is it / why do you need it?
Start by adding one or more {fleet-server} hosts.
A {fleet-server} host is ___.

// How do you set it up?
To add a {fleet-server} host:

. Prepare a host where the {fleet-server} will be provisioned:
.. Ensure all agents can connect to the host.
.. Ensure that the host also has a route to the {es} you plan to use, whether hosted by Elastic or deployed on-premises.
.. Ensure the host meets the link[minimum compute resource requirements] based on the maximum number of agents you plan to support in your deployment.
. In {kib} navigate to the main {fleet} page and go to the **Settings** tab.
. Under {fleet-server} hosts, click **Edit hosts** and add the {fleet-server} host address you want to use.
This will be the address used by the {agents} to connect to the {fleet-server}.
In this example, {fleet-server} is on the host `10.128.0.46`.
{fleet-server} listens on port `8220` by default.

// image?

[discrete]
[[fleet-server-create-policy]]
=== Create a {fleet-server} policy

// What is it / why do you need it?
To manage and configure the {fleet-server} hosts you added, you need to create a {fleet-server} policy.
// as a policy container.
A {fleet-server} policy is ___.

You can also use add a link[system integration] to this policy to monitor the hosts' system resources.

// How do you set it up?
To create a {fleet-server} policy:

. In {kib}, navigate to the **{fleet}** page and go to the **Agent policies** tab.
. Click on the **Create agent policy** button, then:
.. Provide a meaningful name for the policy that will help you identify this {fleet-server} (or cluster) in the future.
.. Ensure you select _Collect system logs and metrics_ so the compute system hosting this {fleet-server} can be monitored. (This is not required, but is highly recommended.)
. After creating the {fleet-server} policy, navigate to the policy itself and click **Add integration**.
. Search for and select the **{fleet-server}** integration.
. Then click **Add {fleet-server}**.
+
// image
. Configure the {fleet-server}:
.. Expand **Change default**. Because you are deploying this {fleet-server} on-premises,
you need to enter the _Host_ address and _Port_ number, `8220`.
(In our example the {fleet-server} will be installed on the host `10.128.0.46`.)
.. It's recommended that you also enter the _Max agents_ you intend to support with this {fleet-server}.
This can also be modified at a later stage.
This will allow the {fleet-server} to handle the load and frequency of updates being sent to the agent
and ensure a smooth operation in a bursty environment.

// +
// image?

// This is covered in "Add {fleet-server} agents" below?
// Do we want them to do this before setting up ceritifcates?
//
// . You should now see the integration added to the policy.
// To add agents to this policy, click **Add agent** and follow the prompts.
// These agents are your {fleet-server}s.
// You can add more agents to this policy at any time.
// +
// image?

[discrete]
[[fleet-server-generate-certificate]]
=== Generate certificates for {fleet-server}

// What is it / why do you need it?
If you are creating a production deployment, it's recommended that you configure
Transport Layer Security (TLS) to encrypt traffic between the {fleet-server}s and {stack}
_before_ adding agents to the {fleet-server} policy.

// How do you set it up?
Elastic provides a utility that streamlines creation of PEM formatted certificates.
This tool, `elasticsearch-certutil`, is bundled with {es}.
To get access, https://www.elastic.co/downloads/elasticsearch[download {es}].

Then, use `elasticsearch-certutil` to generate certificates:

. Generate a Certificate Authority (CA) for this operation.
+
[source,sh]
----
> ./bin/elasticsearch-certutil ca -pem
----
+
This command will create a zip file that contains the CA certificate (ca/ca.crt) and
key (ca/ca.key) required to sign the {fleet-server} certificate.
.. Extract the zip file and store it in a secure location.
. Use the CA to generate certificates for the {fleet-server}.
+
The example below shows how that can be done using `elasticsearch-certutil` for the host in the example above (`10.128.0.46`):
+
[source,sh]
----
> ./bin/elasticsearch-certutil cert \
-name fleet-server \
-ca-cert <PATH to CA>/ca/ca.crt \
-ca-key  <PATH to CA>/ca/ca.key \ 
-dns your.host.name \
-ip 10.128.0.46 \
-pem
----
+
This command will create another zip file that contains the {fleet-server} certificate
(fleet-server/fleet-server.crt) and key (fleet-server/fleet-server.key).
. Extract the zip file and store it in a secure location.
. You now have all the necessary certificates to install the {fleet-server} and securely connect it to the hosted {es} instance in the cloud.

[discrete]
[[fleet-server-add-agents]]
=== Add agents

// What is it / why do you need it?
Now that the policy exists, you can create agents and add them to the policy.
These agents will act as {fleet-server}s in your deployment.
{fleet-server} is just another {agent} in a special operating mode.

// How do you set it up?
To add agents:

. Return to the {fleet-server} policy. If you've navigated away from the page, here's how you can get there:
.. In {kib} go to **{fleet}**.
.. Switch to the **Agent policies** tab.
.. Select the policy you created previously.
. Click **Add agent** and follow the instructions to add a {fleet-server}.
.. Choose the policy name for this deployment.
.. Choose your deployment model. Quick start mode will be less secure.
Production mode is the fully secured mode where TLS certificates ensure a secure communication between {fleet-server} and {es}.
.. Add the {fleet-server} host that was identified earlier. Click **Add host**.
.. A **Service Token** is required so the {fleet-server} can write data to the connected {es} instance.
Click **Generate service token** and copy the generated token.
.. Follow the instructions in {kib} to download, extract, and install the agent.
The installation instructions will differ based on the deployment mode.
If deploying in production mode, you will need certificates authenticating
the {fleet-server} to the {es} to complete the installation.
.. Copy the installation instructions provided in {kib}, which include some of the known deployment parameters.
You will need to add the relevant certificates generated in the <<fleet-server-generate-certificate,previous section>>:
+
[source,sh]
----
> sudo ./elastic-agent install  \ --url=https://10.128.0.46:8220 \
  --fleet-server-es=https://<url of hosted Elasticsearch> \
  --fleet-server-service-token=<generated service token> \
  --fleet-server-policy=<created Fleet Server policy> \
  --certificate-authorities=<PATH to CA>/ca/ca.crt \
  --fleet-server-cert=<PATH to Fleet-Server>/fleet-server/fleet-server.crt \
  --fleet-server-cert-key=<PATH to Fleet-Server>/fleet-server/fleet-server.key
----

. Once the {fleet-server} is installed, it will be enrolled into {fleet}
and the newly created {fleet-server} policy will be applied to it.
You can see this on the {fleet-server} policy page:
+
// image
+
The {fleet-server} agent will also show up on the main {fleet} page as another agent
whose life-cycle can be managed (like other agents in the deployment):
+
// image

[discrete]
[[fleet-server-install-agents]]
==== Install {agents}

// What is it / why do you need it?
{agents} in this deployment now need a TLS connection to the newly installed {fleet-server} instance for control plane
and additional secure connection to {es} to write user data.
You may follow the in-product installation steps with small modifications.

// How do you set it up?
To install {agents}:

. A valid certificate authority is required for connectivity to the
{fleet-server} that was installed in the previous sections.
.. Copy the `certs/ca.crt` from the previous section to a well known location on the host machine.
. Copy the installation instructions provided in {kib}, which include some of the known deployment parameters.
Add the `--certificate-authorities` option with the relevant certificates generated in a
<<fleet-server-generate-certificate,previous section>>.
(This example uses the same host, `10.128.0.46`, and port, `8220`, as the previous examples.)
+
[source,sh]
----
> sudo ./elastic-agent install \ 
--url=https://10.128.0.46:8220 \ 
--enrollment-token=<enrollment token> \ 
--certificate-authorities=<PATH to CA>/ca/ca.crt
----

. You should now see the {agent} enrolled in {fleet}.

[discrete]
[[fleet-server-default-ports]]
== Use default port assignments

When {es} or {fleet-server} are deployed on-premises, communication between certain components will take place over well defined, pre-allocated ports. In most cases the operators may need to allow access to these ports.

[options,header]
|====
| Component Communication | Default Port
| Elastic Agent â†’ {fleet-server} | 8220
| Elastic Agent â†’ {es} | 9200
| Elastic Agent â†’ Logstash | 5044
| Elastic Agent â†’ {fleet} | 5601
| {fleet-server} â†’ {fleet} | 5601
| {fleet-server} â†’ {es} | 9200
|====
