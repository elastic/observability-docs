[[decode_csv_fields-processor]]
= Decode CSV fields

++++
<titleabbrev>decode_csv_fields</titleabbrev>
++++

experimental[]

The `decode_csv_fields` processor decodes fields containing records in
comma-separated format (CSV). It will output the values as an array of strings.

NOTE: This processor only works with log inputs.

[discrete]
== Example

[source,yaml]
-----------------------------------------------------
  - decode_csv_fields:
      fields:
        message: decoded.csv
      separator: ","
      ignore_missing: false
      overwrite_keys: true
      trim_leading_space: false
      fail_on_error: true
-----------------------------------------------------

[discrete]
== Configuration settings

// set this attribute for processors that reference event fields
:works-with-fields:
include::processors.asciidoc[tag=processor-limitations]
// reset the attribute to null
:works-with-fields!:

[options="header"]
|===
| Name | Required | Default | Description

| `fields`
| Yes
|
| A mapping from the source field containing the CSV data to the destination field to which the decoded array will be written.

| `separator`
| No
| comma character (`,`)
| Character to use as a column separator. To use a TAB character, set this value to "\t".

| `ignore_missing`
| No
| `false`
| Whether to ignore events that lack the source field. If `false`, events missing the source field will fail processing.

| `overwrite_keys`
| No
| `false`
| Whether the target field is overwritten if it already exists. If `false`, processing of an event fails if the target field already exists.

| `trim_leading_space`
| No
| `false`
| Whether extra space after the separator is trimmed from values. This works even if the separator is also a space.

| `fail_on_error`
| No
| `true`
| Whether to fail if an error occurs. If `true` and an error occurs, any changes to the event are reverted, and the original event is returned. If `false`, processing continues even if an error occurs.

|===
