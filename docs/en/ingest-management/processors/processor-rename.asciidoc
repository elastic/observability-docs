[[rename-processor]]
= Rename fields from events

++++
<titleabbrev>rename</titleabbrev>
++++

The `rename` processor specifies a list of fields to rename. Under the `fields`
key, each entry contains a `from: old-key` and a `to: new-key` pair, where:

* `from` is the original field name. It's supported to use the `@metadata.`
prefix for `from`, and rename keys in the event metadata instead of event fields.
* `to` is the target field name

The `rename` processor cannot be used to overwrite fields. To overwrite fields
either first rename the target field, or use the `drop_fields` processor to drop
the field and then rename the field.

TIP: You can rename fields to resolve field name conflicts. For example, if an
event has two fields, `c` and `c.b` (where `b` is a subfield of `c`), assigning
scalar values results in an {es} error at ingest time. The assignment `{"c": 1,
"c.b": 2}` would result in an error because `c` is an object and cannot be
assigned a scalar value. To prevent this conflict, rename `c` to `c.value`
before assigning values.

[discrete]
== Example

[source,yaml]
-------
  - rename:
      fields:
        - from: "a.g"
          to: "e.d"
      ignore_missing: false
      fail_on_error: true
-------

[discrete]
== Configuration settings

//TODO: Should really describe all the fields here instead of covering some in
//the intro.
 
[options="header"]
|===
| Name | Required | Default | Description

| `ignore_missing`
| No
| `false`
| If `true`, no error is logged when a key that should be renamed is missing.

| `fail_on_error`
| No
| `true`
| If `true` and an error occurs, the renaming of fields is stopped, and the original event is returned. If `false`, renaming
continues even if an error occurs during renaming.

|===

See <<conditions>> for a list of supported conditions.

You can specify multiple `rename` processors under the `processors`
section.
