[[beats-agent-comparison]]
= {beats} and {agent} capabilities

Elastic provides two main ways to send data to {es}:

* *{beats}* are lightweight data shippers that send operational data to
{es}. Elastic provides separate {beats} for different types of data, such as
logs, metrics, and uptime. Depending on what data you want to collect, you may
need to install mutliple shippers on a single host.

* *{agent}* is a single agent for logs, metrics, security data, and threat
prevention. {agent} supports central management through {fleet}.

The method you use depends on your use case, which features you need, and
whether you want to centrally manage your agents.

{beats} and {agent} can both send data directly to {es} or via {ls}, where you
can further process and enhance the data, before visualizing it in {kib}.

This article summarizes the features and functionality you need to be aware of
before adding new {agent}s or replacing your current {beats} with {agent}s.
Starting in version 7.14.0, {agent} is generally available (GA).

[discrete]
[[supported-inputs-beats-and-agent]]
== Supported inputs

For {agent}s that are centrally managed by {fleet}, data collection is
further simplified and defined by integrations. In this model, the decision on
the inputs is driven by the integration you want to collect data from. The
complexity of configuration details of various inputs is driven centrally by
{fleet} and specifically by the integrations. 

The following table shows the inputs supported by the {agent} in {version}:

[options,header]
|===
|Input |{beats} support |{agent} support

|AWS CloudWatch
|{y} (beta)
|{y} (beta)

|AWS S3
|{y}
|{y}

|Azure Event Hub
|{y}
|{y}

|Cloud Foundry
|{y}
|{n}

|Container
|{y}
|{n}

|Docker
|{y}
|{n}

|GCP Pub/Sub
|{y}
|{y}

|HTTP Endpoint
|{y} (beta)
|{y} (beta)

|HTTP JSON
|{y}
|{y}

|Kafka
|{y}
|{n}

|Logfile
|{y}
|{y}

|MQTT
|{y}
|{n}

|NetFlow
|{y}
|{y}

|O365 Mgmt Act API
|{y} (beta)
|{y} (beta)

|Redis
|{y} (beta)
|{n}

|Stdin
|{y}
|{n}

|Syslog
|{y}
|{y}

|TCP
|{y}
|{y}

|UDP
|{y}
|{y}

|UNIX
|{y} (beta)
|{y} (beta)
|===

[discrete]
[[supported-outputs-beats-and-agent]]
== Supported outputs

The following table shows the outputs supported by the {agent} in {version}:


NOTE: {endpoint-sec} has a different output matrix.

[options,header]
|===
|Output |Beats |{fleet}-managed {agent} |Standalone {agent}

|{es} Service
|{y}
|{y} only to the same cluster where {fleet} runs
|{y}

|{es}
|{y}
|{y} only to the same cluster where {fleet} runs
|{y}

|{ls}
|{y}
|Under consideration
|{y}

|Kafka
|{y}
|Under consideration
|Under consideration

|Redis
|{y}
|{n}
|{n}

|File
|{y}
|{n}
|{n}

|Console
|{y}
|{n}
|{n}
|===

Currently, {agent}s managed by Fleet can only output to the same {es} cluster where {fleet} is running. Support for outputting to remote {es} clusters is under consideration for a future release.

[discrete]
[[supported-configurations]]
== Supported configurations

[options,header]
|===
|Beats configuration |{agent} support

|{filebeat-ref}/configuration-filebeat-modules.html[Modules]
|Supported via integrations.

|{filebeat-ref}/advanced-settings.html[Input setting overrides]
|Not configurable. Set to default values.

|{filebeat-ref}/configuration-general-options.html[General settings]
| Many of these global settings are now internal to the agent and for proper
operations should not be modified.

|{filebeat-ref}/configuration-path.html[Project paths]
|{agent} configures these paths to provide a simpler and more streamlined
configuration experience.

|{filebeat-ref}/filebeat-configuration-reloading.html[External configuration file loading]
|Config is distributed via policy.

|{filebeat-ref}/_live_reloading.html[Live reloading]
|Related to the config file reload.

|{filebeat-ref}/configuring-output.html[Outputs]
|Configured through {fleet}. See <<supported-outputs-beats-and-agent>>.

|{filebeat-ref}/configuration-ssl.html[SSL]
|Supported

|{filebeat-ref}/ilm.html[Index lifecycle management]
|Enabled by default although the Agent uses <<data-streams,data streams>>.

|{filebeat-ref}/configuration-template.html[{es} index template loading]
|No longer applicable

|{filebeat-ref}/setup-kibana-endpoint.html[{kib} endpoint]
|New {agent} workflow doesn’t need this.

|{filebeat-ref}/configuration-dashboards.html[{kib} dashboard loading]
|New {agent} workflow doesn’t need this.

|{filebeat-ref}/defining-processors.html[Processors]
|Processors can be defined at the integration level.

|{filebeat-ref}/configuration-autodiscover.html[Autodiscover]
|Autodiscover is facilitated through <<dynamic-input-configuration,dynamic inputs>>. {agent} does not support hints-based autodiscovery.

|{filebeat-ref}/configuring-internal-queue.html[Internal queues]
|{agent} does not expose the internal memory queues to the end user. You can
configure output queue parameters to tune your environment, and the Agent takes
care of configuring the internal queues to accomplish your tuning intent.

|{filebeat-ref}/load-balancing.html[Load balance output hosts]
|Within the {fleet} UI, you can add yaml settings to configure multiple hosts
per output type, which enables loadbalancing.

|{filebeat-ref}/configuration-logging.html[Logging]
|Supported

|{filebeat-ref}/http-endpoint.html[HTTP Endpoint]
|Supported

|{filebeat-ref}/regexp-support.html[Regular expressions]
|Supported
|===

[discrete]
[[additional-capabilties-beats-and-agent]]
== Additional capabilities

The following table shows the additional capabilties supported by Beats and the {agent} in {version}:


[options,header]
|===
|Item |Beats |{fleet}-managed {agent} |Standalone {agent}

|Single agent for all use cases
|{n}
|{y}
|{y}

|Install integrations from Kibana UI or API
|{n}
|{y}
|{y}

|Configure from integrations UI
|{n}
|{y}
|{y} (optional)

|Central, remote agent policy management
|{n}
|{y}
|{n}

|Central, remote agent binary upgrades
|{n}
|{y}
|{n}

|Choose which module or integration assets to add
|{n}
|{y}
|{y}

|Auto-generated ES API keys
|{n}
|{y}
|{n}

|Auto-generate minimal ES privileges on the edge
|{n}
|{y}
|{y} (when using Integrations UI)

|Data streams support
|{n}
|{y}
|{y}

|Variables and input conditions
|{n}
|{y}
|{y}

|Requires superuser role
|{n}
|{y}
|{n} (required to use integrations UI)

|Air-gapped network support
|{y}
|{n}
|{y}

|Run without root on host
|{y}
|{n}
|{y}

|Mulitple outputs
|{y}
|{n}
|{y}

|Separate monitoring cluster 
|{y}
|{n}
|{y}

|Keystore for secrets
|{y}
|{n}
|{n}

|Cloned machine images or virtual desktops
|{y}
|{n}
|{n}

|===

Also, both {beats} and {agent} standalone work well with version control, IaaC, and change management processes because the configuration is a simple text file. {fleet} only supports these processes through its REST API.

[discrete]
[[agent-monitoring-support]]
== {agent} monitoring support

You configure the collection of agent metrics in the agent policy. If metrics
collection is selected (the default), all {agent}s enrolled in the policy will
send metrics data to {es} (the output is configured globally).

The following image shows the *Agent monitoring* settings for the default agent
policy:

[role="screenshot"]
image::images/agent-monitoring-settings.png[Screen capture of agent monitoring settings in the default agent policy]

There are also pre-built dashboards for agent metrics that you can access
under *Assets* in the {agent} integration:

[role="screenshot"]
image::images/agent-monitoring-assets.png[Screen capture of Elastic Agent monitoring assets]

The *[Elastic Agent] Agent metrics* dashboard shows an aggregated view of agent metrics:

[role="screenshot"]
image::images/agent-metrics-dashboard.png[Screen capture showing Elastic Agent metrics]
