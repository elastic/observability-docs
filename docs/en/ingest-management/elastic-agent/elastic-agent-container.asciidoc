[[elastic-agent-container]]
= Run {agent} in a container

You can run {agent} inside of a container -- either with {fleet-server} or standalone.
Docker images for all versions of {agent} are available from the
https://www.docker.elastic.co/r/beats/elastic-agent[Elastic Docker registry].
If you are running in Kubernetes, refer to {eck-ref}/k8s-elastic-agent.html[run {agent} on ECK].

Considerations:

* When {agent} runs inside of a container, it cannot be upgraded through {fleet} as it expects that the container itself is upgraded.
* Enrolling and running an {agent} is usually a two-step process.
However, this doesn't work in a container, so a special subcommand, `container`, is called.
This command allows environment variables to configure all properties, and runs the `enroll` and `run` commands as a single command.

[discrete]
[[agent-in-container-pull]]
== Pull the image

There are two images for {agent}, *elastic-agent* and *elastic-agent-complete*. The *elastic-agent* image contains all the binaries for running {beats}, while the *elastic-agent-complete* image contains these binaries plus additional dependencies to run browser monitors through Elastic Synthetics. Refer to {observability-guide}/uptime-set-up.html[Synthetic monitoring via {agent} and {fleet}] for more information.

Run the `docker pull` command against the Elastic Docker registry:

[source,terminal]
----
docker pull docker.elastic.co/beats/elastic-agent:{version}
----

If want to run synthetics tests, run the `docker pull` command to fetch the *elastic-agent-complete* image:

[source,terminal]
----
docker pull docker.elastic.co/beats/elastic-agent-complete:{version}
----

[discrete]
[[agent-in-container-command]]
== {agent} container command

The {agent} container command offers a wide variety of options.
To see the full list, run:

[source,terminal]
----
elastic-agent container -h
----

[discrete]
[[agent-in-container-cloud]]
== {ecloud} example

The easiest way to get started is by using an Elastic cluster running on {ecloud}.

// lint ignore fleet
. In {kib}, select *{fleet}* > *Fleet Settings*, and copy the {fleet-server} host URL.

. Close the flyout panel and select *Enrollment tokens*.
Find the Agent policy you want to enroll {agent} into, and display and copy the secret token.

. Enroll an {agent} running in a container with the following command:

[source,terminal]
----
docker run \
  --env FLEET_ENROLL=1 \
  --env FLEET_URL={fleet-server-host-url} \
  --env FLEET_ENROLLMENT_TOKEN={enrollment-token} \
  --rm docker.elastic.co/beats/elastic-agent:{version}
----

NOTE: Replace `docker.elastic.co/beats/elastic-agent` with `docker.elastic.co/beats/elastic-agent-complete` and use the `elastic-agent` user instead of root to run Synthetics Browser tests. Synthetics tests cannot run under the root user. Refer to {observability-guide}/uptime-set-up.html[Synthetics {fleet} Quickstart] for more information.

[discrete]
[[agent-in-container-self]]
== Self-managed example

If you're running a self-managed cluster and want to run your own {fleet-server}, run the following command, which will spin up {agent} and {fleet-server} in a container:

[source,terminal]
----
docker run \
  --env FLEET_SERVER_ENABLE=true \
  --env FLEET_SERVER_ELASTICSEARCH_HOST={elasticsearch-host} \ <1>
  --env FLEET_SERVER_SERVICE_TOKEN={service-token} \ <2>
  --env FLEET_SERVER_POLICY_ID=fleet-server-policy \ <3>
  --rm docker.elastic.co/beats/elastic-agent:{version}
----
<1> Your cluster's {es} host URL
<2> The {fleet} service token -- generate one in the {fleet} UI if you don't have one already
<3> ID of the {fleet-server} policy. To learn how to create a policy, refer
<<create-a-policy-no-ui>>.

We recommend only having one fleet-server policy.

NOTE: Replace `docker.elastic.co/beats/elastic-agent` with `docker.elastic.co/beats/elastic-agent-complete` and use the `elastic-agent` user instead of root to run Synthetics Browser tests. Synthetics tests cannot run under the root user. Refer to {observability-guide}/uptime-set-up.html[Synthetics {fleet} Quickstart] for more information.

[discrete]
[[agent-in-container-docker]]
== Docker compose example

{agent} can be run in docker-compose.
The example below shows how to enroll an {agent}:

[source,yaml]
----
version: "3"
services:
  elastic-agent:
    image: docker.elastic.co/beats/elastic-agent:{version}
    container_name: elastic-agent
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    environment:
      - FLEET_ENROLLMENT_TOKEN={enrollment-token}
      - FLEET_ENROLL=1
      - FLEET_URL={fleet-server-url}
----

Need to run {fleet-server} as well?
Adjust the docker-compose file above by adding these environment variables:

[source,yaml]
----
      - FLEET_SERVER_ENABLE=true
      - FLEET_SERVER_ELASTICSEARCH_HOST={elasticsearch-host}
      - FLEET_SERVER_SERVICE_TOKEN={service-token}
----

NOTE: Replace `docker.elastic.co/beats/elastic-agent` with `docker.elastic.co/beats/elastic-agent-complete` and use the `elastic-agent` user instead of root to run Synthetics Browser tests. Synthetics tests cannot run under the root user. Refer to {observability-guide}/uptime-set-up.html[Synthetics {fleet} Quickstart] for more information.

[discrete]
[[agent-in-container-docker-logs]]
== Logs

As a container supports only a single version of {agent},
logs and state are stored a bit differently than when running an {agent} outside of a container.
The logs can be found under: `/usr/share/elastic-agent/state/data/logs/*`.

It's important to note that only the logs from the {agent} process itself are logged to `stdout`;
Subprocess logs are not.
Each subprocess writes its own logs to the `default` directory inside the logs directory:

[source,terminal]
----
/usr/share/elastic-agent/state/data/logs/default/*
----

TIP: Running into errors with {fleet-server}?
Check the fleet-server subprocess logs for more information.

[discrete]
[[agent-in-container-debug]]
== Debugging

A monitoring endpoint can be enabled to expose resource usage and event processing data.
The endpoint is compatible with {agent}s running in both {fleet} mode and Standalone mode.

Enable the monitoring endpoint in `elastic-agent.yml` on the host where the {agent} is installed.
A sample configuration looks like this:

[source,yaml]
----
agent.monitoring:
  enabled: true <1>
  logs: true <2>
  metrics: true <3>
  http:
      enabled: true <4>
      host: localhost <5>
      port: 6791 <6>
----
<1> Enable monitoring of running processes.
<2> Enable log monitoring.
<3> Enable metrics monitoring.
<4> Expose {agent} metrics over HTTP. By default, sockets and named pipes are used.
<5> The hostname, IP address, Unix socket, or named pipe that the HTTP endpoint will bind to.
When using IP addresses, we recommend only using `localhost`.
<6> The port that the HTTP endpoint will bind to.

The above configuration exposes a monitoring endpoint at `http://localhost:6791/processes`.

// Begin collapsed section
[%collapsible]
.`http://localhost:6791/processes` output
====

[source,json]
----
{
   "processes":[
      {
         "id":"metricbeat-default",
         "pid":"36923",
         "binary":"metricbeat",
         "source":{
            "kind":"configured",
            "outputs":[
               "default"
            ]
         }
      },
      {
         "id":"filebeat-default-monitoring",
         "pid":"36924",
         "binary":"filebeat",
         "source":{
            "kind":"internal",
            "outputs":[
               "default"
            ]
         }
      },
      {
         "id":"metricbeat-default-monitoring",
         "pid":"36925",
         "binary":"metricbeat",
         "source":{
            "kind":"internal",
            "outputs":[
               "default"
            ]
         }
      }
   ]
}
----

====

Each process ID in the `/processes` output can be accessed for more details.

// Begin collapsed section
[%collapsible]
.`http://localhost:6791/processes/{process-name}` output
====

[source,json]
----
{
   "beat":{
      "cpu":{
         "system":{
            "ticks":537,
            "time":{
               "ms":537
            }
         },
         "total":{
            "ticks":795,
            "time":{
               "ms":796
            },
            "value":795
         },
         "user":{
            "ticks":258,
            "time":{
               "ms":259
            }
         }
      },
      "info":{
         "ephemeral_id":"eb7e8025-7496-403f-9f9a-42b20439c737",
         "uptime":{
            "ms":75332
         },
         "version":"7.14.0"
      },
      "memstats":{
         "gc_next":23920624,
         "memory_alloc":20046048,
         "memory_sys":76104712,
         "memory_total":60823368,
         "rss":83165184
      },
      "runtime":{
         "goroutines":58
      }
   },
   "libbeat":{
      "config":{
         "module":{
            "running":4,
            "starts":4,
            "stops":0
         },
         "reloads":1,
         "scans":1
      },
      "output":{
         "events":{
            "acked":0,
            "active":0,
            "batches":0,
            "dropped":0,
            "duplicates":0,
            "failed":0,
            "toomany":0,
            "total":0
         },
         "read":{
            "bytes":0,
            "errors":0
         },
         "type":"elasticsearch",
         "write":{
            "bytes":0,
            "errors":0
         }
      },
      "pipeline":{
         "clients":4,
         "events":{
            "active":231,
            "dropped":0,
            "failed":0,
            "filtered":0,
            "published":231,
            "retry":112,
            "total":231
         },
         "queue":{
            "acked":0,
            "max_events":4096
         }
      }
   },
   "metricbeat":{
      "system":{
         "cpu":{
            "events":8,
            "failures":0,
            "success":8
         },
         "filesystem":{
            "events":80,
            "failures":0,
            "success":80
         },
         "memory":{
            "events":8,
            "failures":0,
            "success":8
         },
         "network":{
            "events":135,
            "failures":0,
            "success":135
         }
      }
   },
   "system":{
      "cpu":{
         "cores":8
      },
      "load":{
         "1":2.5957,
         "15":5.415,
         "5":3.5815,
         "norm":{
            "1":0.3245,
            "15":0.6769,
            "5":0.4477
         }
      }
   }
}
----

====
