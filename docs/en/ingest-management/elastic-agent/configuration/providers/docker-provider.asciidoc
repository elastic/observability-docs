[[docker-provider]]
= Docker Provider

Provides inventory information from Docker. The available keys are:

// lint disable arg
|===
|Key |Type |Description

|`docker.container.id`
|`string`
|ID of the container

|`docker.container.name`
|`string`
|Name of the container

|`docker.container.image.name`
|`string`
|Image of the container

|`docker.container.labels`
|`string`
|Labels of the container
|===
// lint enable arg

For example, the Docker provider provides the following inventory:

[source,json]
----
[
    {
       "id": "1",
       "mapping:": { "container": {"id": "1", "name": "container-name", "image": {"name": "busybox:latest"}}},
       "processors": {"add_fields": {"container.name": "my-container"}}
    },
    {
        "id": "2",
        "mapping:": { "container": {"id": "2", "name": "container-name2", "image": {"name": "busybox:latest"}}},
        "processors": {"add_fields": {"container.name": "other-container"}}
    }
]
----

{agent} automatically prefixes the result with `docker.`, which is the name of the provider:


[source,json]
---
[
    {"docker": {"container": {"id": "1", "paths": {"log": "/var/log/containers/1.log"}}}},
    {"docker": {"container": {"id": "2", "paths": {"log": "/var/log/containers/2.log"}}}},
]
---

To set the container ID dynamically in the configuration, use a variable in the
{agent} policy to return container ID information from the provider:

[source,yaml]
----
inputs:
  - id: 'docker-container-logs-${docker.container.id}'
    type: filestream
    paths:
      - '/var/lib/docker/containers/${docker.container.id}/*-json.log'
----

The policy generated by this configuration looks like:

[source,yaml]
----
inputs:
  - id: docker-container-logs-1
    paths:
    - /var/lib/docker/containers/1/*-json.log
    processors:
      - add_fields:
          container.name: my-container
  - id: docker-container-2
    type: filestream
    paths:
    - /var/lib/docker/containers/2/*-json.log
    processors:
      - add_fields:
          container.name: other-container
----
