[[elastic-agent-kubernetes-autodiscovery]]
= Kubernetes autodiscovery with Elastic Agent

[discrete]
== Autodiscover targeted Pods based on conditions

Autodiscover conditions can be defined to allow {agent} to automatically
identify Pods and start collecting from them using predefined integrations. For example, if a
user wants to automatically identify a Redis Pod and start monitoring it using the Redis integration,
the following configuration should be added as an extra input in the DaemonSet manifest:

[source,yaml]
------------------------------------------------
- name: redis
  type: redis/metrics
  use_output: default
  meta:
    package:
      name: redis
      version: 0.3.6
  data_stream:
    namespace: default
  streams:
    - data_stream:
        dataset: redis.info
        type: metrics
      metricsets:
        - info
      hosts:
        - '${kubernetes.pod.ip}:6379'
      idle_timeout: 20s
      maxconn: 10
      network: tcp
      period: 10s
      condition: ${kubernetes.labels.app} == 'redis'
------------------------------------------------

To set the target host dynamically only for a targeted Pod based on its labels, use a variable in the
{agent} policy to return path information from the provider:

[source,yaml]
----
- data_stream:
      dataset: kubernetes.scheduler
      type: metrics
  metricsets:
    - scheduler
  hosts:
    - '${kubernetes.pod.ip}:10251'
  period: 10s
  condition: ${kubernetes.labels.component} == 'kube-scheduler'
----

The policy generated by this configuration looks like:

[source,yaml]
----
- hosts:
  - 172.18.0.4:10251
  metricsets:
  - scheduler
  module: kubernetes
  period: 10s
  processors:
  - add_fields:
    fields:
      namespace: kube-system
      labels:
        component: kube-scheduler
        tier: control-plane
      pod:
        ip: 172.18.0.4
        name: kube-scheduler-kind-control-plane
        uid: 6da04645-04b4-4cb2-b203-2ad58abc6cdf
    target: kubernetes
----

To set the log path of Pods dynamically in the configuration, use a variable in the
{agent} policy to return path information from the provider:

[source,yaml]
----
streams:
  - data_stream:
      dataset: generic
    symlinks: true
    paths:
      - /var/log/containers/*${kubernetes.container.id}.log
----

The policy generated by this configuration looks like:

[source,yaml]
----
- paths:
  - /var/log/containers/*c957652eca53594ce496c7b237d19f05be339ebfe281b99ce1c0a0401e48ce3a.log
  processors:
    - add_fields:
        fields:
          container:
            name: kube-scheduler
          labels:
            component: kube-scheduler
            tier: control-plane
          namespace:
            labels:
              kubernetes_io/metadata_name: kube-system
            name: kube-system
            uid: 436369c1-cc50-4fdd-8212-d0215bf66ffa
          node:
            hostname: kind-control-plane
            labels:
              beta_kubernetes_io/os: linux
              kubernetes_io/arch: amd64
            name: kind-control-plane
            uid: d93dc62a-b103-4b81-b7cd-9eaf7957d6d2
          pod:
            ip: 172.18.0.2
            name: kube-scheduler-kind-control-plane
            uid: c052b569-c772-43e8-89cc-149ed6f5c69a
        target: kubernetes
    - add_fields:
        fields:
          id: 7b9754b983ec4e8b9bda39dfbe949a1b6b06c0316dc599031381707bb4ce23b6
          image:
            name: k8s.gcr.io/kube-scheduler:v1.21.1
          runtime: containerd
        target: container
    - add_fields:
        fields:
          cluster:
            name: kind-kind
            url: https://127.0.0.1:52500
        target: orchestrator
----

[discrete]
== Autodiscover targeted Pods using hints (Elastic Agent standalone mode)

Standalone Elastic Agent supports autodiscover based on hints from the provider.
The hints mechanism looks for hints in Kubernetes Pod annotations which have the prefix `co.elastic.hints`.
As soon as the container starts, Elastic Agent will check if it contains any hints and launch the proper config for it.
Hints tell Elastic Agent how to monitor the given container by using the proper integration.
This is the full list of supported hints:

[float]
===== `co.elastic.hints/package`

The package to use for monitoring.

[float]
===== `co.elastic.hints/data_stream`

(optional) The list of data_streams to enable. If not specified the default data_streams will be enabled using the
default values as specified in the respective package/integration.

If data_streams are specified, then hints can be defined per data_stream like `co.elastic.hints/key.period: 10m`,
otherwise the data_stream will use the top level hints (`co.elastic.hints/period: 10m`) in its configuration.

[float]
===== `co.elastic.hints/host`

The host to use for metrics retrieval.

[float]
===== `co.elastic.hints/metrics_path`

The path to retrieve the metrics from.

[float]
===== `co.elastic.hints/period`

The time interval for metrics retrieval, ie: 10s

[float]
===== `co.elastic.hints/timeout`

Metrics retrieval timeout, ie: 3s

[float]
===== `co.elastic.hints/username`

The username to use for authentication

[float]
===== `co.elastic.hints/password`

The password to use for authentication. It is recommended to retrieve this sensitive information from an ENV variable
and avoid placing passwords in plain text.

[float]
===== `co.elastic.hints/stream`

The stream to use for logs collection, ie stdout/stderr.

In any case if the specified package has no logs support a generic container's logs input will be used as a
fallback.

[discrete]
=== Available packages that support hints autodiscovery (standalone agent)

The available packages that are supported through hints can be found at
https://github.com/elastic/elastic-agent/tree/main/deploy/kubernetes/elastic-agent-standalone/templates.d

[discrete]
=== Configure hints autodiscovery (standalone agent)

In order to enable hints one need to add the `hints.enabled: true` in the provider's configuration, ie:

[source,yaml]
----
providers:
  kubernetes:
    hints.enabled: true
----


Then ensure that the proper volumes and volumeMounts are added properly. These sections are already defined in the
provided kubernetes manifest, so it's only required to uncomment these sections.

[source,yaml]
----
volumeMounts:
- name: external-inputs
  mountPath: /etc/elastic-agent/inputs.d
...
volumes:
- name: external-inputs
  emptyDir: {}
...
----

Along with these sections an init container is required which is responsible for downloading the hints' templates.
The init container is already defined, so uncomment the respective section:

["source", "yaml", subs="attributes"]
----
initContainers:
- name: k8s-templates-downloader
  image: busybox:1.28
  command: ['sh']
  args:
    - -c
    - >-
      mkdir -p /etc/elastic-agent/inputs.d &&
      wget -O - https://github.com/elastic/elastic-agent/archive/{branch}.tar.gz | tar xz -C /etc/elastic-agent/inputs.d --strip=5 "elastic-agent-main/deploy/kubernetes/elastic-agent-standalone/templates.d"
  volumeMounts:
    - name: external-inputs
      mountPath: /etc/elastic-agent/inputs.d
----

[discrete]
=== Hints autodiscovery: Example (standalone agent)

Having the hints mechanism enabled allows users deploying Pods on the cluster to automatically turn on Elastic's
monitoring for their Pod, at the time of deploying their Pods.
For example if we want deploy a Redis Pod on the cluster and want to automatically enable Elastic monitoring for it
we need to add the proper hints as annotations on the Pod:

[source,yaml]
----
apiVersion: v1
kind: Pod
metadata:
  name: redis
  annotations:
    co.elastic.hints/package: redis
    co.elastic.hints/data_streams: info, key, keyspace
    co.elastic.hints/host: '${kubernetes.pod.ip}:6379'
    co.elastic.hints/info.period: 5s
  labels:
    k8s-app: redis
    app: redis
spec:
  containers:
  - image: redis
    imagePullPolicy: IfNotPresent
    name: redis
    ports:
    - name: redis
      containerPort: 6379
      protocol: TCP
----

After deploying this Pod the data will start flowing in automatically. Note that at this point all the assets
(dashboards, ingest pipelines etc) related to the Redis integration are not installed and one would need to
explicitly install them through Kibana.

[discrete]
=== Hints autodiscovery: Troubleshooting (standalone agent)

When things do not work as expected one would need to troubleshoot their setup. In that case many things can be wrong
but here we provide some directions to speed up your investigation:

. Exec inside an Agent's Pod and run inspect command to verify how inputs are constructed dynamically:
+
["source", "sh", subs="attributes"]
------------------------------------------------
./elastic-agent inspect -c /etc/elastic-agent/agent.yml output -o default -v -d "*"
------------------------------------------------
+
Specifically check how the inputs are being populated.

. Check the logs of Elastic Agent:
+
["source", "sh", subs="attributes"]
------------------------------------------------
tail -f /etc/elastic-agent/data/logs/elastic-agent-*.ndjson
------------------------------------------------
+
Verify that the hints feature is enabled in the config and look for hints' related logs like:
"Generated hints mappings are ..."
In this, you can find what are the mappings that are extracted out of the annotations and have an indicator
if these values are able to populate a specific input.

. Check the logs of Metricbeat/Filebeat:
+
["source", "sh", subs="attributes"]
------------------------------------------------
tail -f /etc/elastic-agent/data/logs/default/metricbeat-*.ndjson
------------------------------------------------

4. Check how the target input template looks like, ie:

["source", "sh", subs="attributes"]
------------------------------------------------
cat -f /etc/elastic-agent/inputs.d/redis.yaml
------------------------------------------------
