[[air-gapped]]
= Air-gapped environments

There are certain environments in which network traffic restrictions are mandatory. In these environments, the Kibana instance
isn't able to reach the public {package-registry} endpoints, like https://epr.elastic.co/[epr.elastic.co], to download
package metadata and content.

There are two workarounds in this situation -- use a proxy server as network gateway to reach the public endpoints,
or deploy your own instance of the Elastic Package Registry.

[discrete]
[[air-gapped-proxy-server]]
== Use a proxy server

If you can route traffic to the public endpoint of the {package-registry} through a network gateway, there is a property in Kibana that
can orchestrate to use a proxy server:

[source,yaml]
----
xpack.fleet.registryProxyUrl: your-nat-gateway.corp.net
----

For more information, see the {fleet-guide}/fleet-overview.html#package-registry-intro[Fleet and Elastic Agent Guide].

[discrete]
[[air-gapped-diy-epr]]
== Host your own Elastic Package Registry

If routing traffic through a proxy server is not an option, you can host your own {package-registry}.

The {package-registry} can be deployed and hosted on-site using one of the
available Docker images. These docker images include the {package-registry} and
a selection of packages.

There are different distributions available:

* {version} (recommended): `docker.elastic.co/package-registry/distribution:{version}` - Selection of packages from the production repository released with the {version} version of the {stack}.
* production: `docker.elastic.co/package-registry/distribution:production` - Packages available in the production registry (https://epr.elastic.co).
* staging: `docker.elastic.co/package-registry/distribution:staging` - Packages available in the staging registry (https://epr-staging.elastic.co), they can be pending of validation.
* snapshot: `docker.elastic.co/package-registry/distribution:snapshot` - Packages under development.

ifeval::["{release-state}"=="unreleased"]
[WARNING]
====
Version {version} of the {package-registry} distribution has not yet been released.
====
endif::[]

If you want to update the distribution image, you need to re-pull the image and restart docker container.

Every distribution contains packages that can be used by different versions of
the {stack}. The {package-registry} API exposes a {kib} version constraint that
allows for filtering packages that are compatible with a particular version.

NOTE: These steps use the standard Docker CLI, but it shouldn't be hard to transform them into Kubernetes descriptor file.
Here is the k8s descriptor used by the e2e-testing project: https://github.com/elastic/e2e-testing/blob/k8s-deployment/cli/config/kubernetes/base/package-registry/[yaml files].
These images can also be used with other container runtimes compatible with Docker images.

1. Pull the Docker image from the public Docker registry:
+
[source,bash]
----
docker pull docker.elastic.co/package-registry/distribution:{version}
----

2. Save the Docker image locally:
+
[source,bash]
----
docker save -o package-registry-{version}.tar docker.elastic.co/package-registry/distribution:{version}
----
+
TIP: please mind the image size, so you won't hit any capacity limit.

3. Transfer the image to the air-gapped environment and load:
+
[source,bash]
----
docker load -i package-registry-{version}.tar
----

4. Run the {package-registry}:
+
[source,bash]
----
docker run -it docker.elastic.co/package-registry/distribution:{version}
----

5. (Optional) Define the internal healthcheck for the service as:
+
[source,bash]
----
curl -f http://127.0.0.1:8080
----

[discrete]
[[air-gapped-diy-epr-kibana]]
=== Connect Kibana to the hosted Package Registry

There is a dedicated property in the {kib} config to change the URL of the Package Registry's endpoint to a custom one.
The example below connects to an internally hosted instance:

[source,yaml]
----
xpack.fleet.registryUrl: "http://package-registry.corp.net:8080"
----

[discrete]
[[air-gapped-tls]]
=== TLS configuration of the {package-registry}

You can configure the {package-registry} to listen on a secure HTTPS port using TLS.

For example, given a key and a certificate pair available in `/etc/ssl`, you
can start the {package-registry} listeing on the 443 port using the following command:

[source,bash]
----
docker run -it -p 443:443 \
  -v /etc/ssl/package-registry.key:/etc/ssl/package-registry.key:ro \
  -v /etc/ssl/package-registry.crt:/etc/ssl/package-registry.crt:ro \
  -e EPR_ADDRESS=0.0.0.0:443 \
  -e EPR_TLS_KEY=/etc/ssl/package-registry.key \
  -e EPR_TLS_CERT=/etc/ssl/package-registry.crt \
  docker.elastic.co/package-registry/distribution:{version}
----
