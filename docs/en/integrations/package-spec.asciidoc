[[package-spec]]
= Package specification

Integrations are a type of package and therefore must adhere to the Elastic package specification.
The package specification describes:

* The folder structure of a package and the expected files within these folders
* The structure of expected files' contents

[discrete]
[[asset-organization]]
== Asset organization

In general, assets within a package are organized by `<elastic-stack-component>/<asset-type>`.
For example, ingest pipelines are stored in the `elasticsearch/ingest-pipeline` folder.
This logic applies to all {es}, {kib}, and Agent assets.

Top-level assets are picked up as JSON documents and pushed to the corresponding {es} and {kib} APIs.

[discrete]
[[data-streams]]
=== Data streams

There is a specific folder called `data_stream`.
Each data stream should have its folder of assets within this folder,
and the names of these data streams must follow the data stream naming scheme.

The contents of these folders follow the `<elastic-stack-component>/<asset-type>` structure.
During installation, {fleet} enforces data stream naming rules.
All assets in this folder belong directly or indirectly to data streams.

In most scenarios, only data stream assets are needed. However, there are exceptions where global assets are required to get more flexibility. For example, an {ilm-init} policy that applies to all data streams.

[discrete]
[[supported-assets]]
== Supported assets

The following assets are typically found in an Elastic package:

* {es}
** Ingest Pipeline
** Index Template
** Transform
** Index template settings
* {kib}
** Dashboards
** Visualization
** {data-sources-cap}
** {ml-init} Modules
** Map
** Search
** Security rules
* Other
** fields.yml

[discrete]
[[directory-structure]]
== Directory structure

[source,text]
----
apache
│   changelog.yml
│   manifest.yml
└───_dev
└───data_stream
└───docs
└───img
└───kibana
----

[discrete]
[[directory-spec]]
== Spec

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/spec.yml[]
----

[[dev-spec]]
== `_dev`

Development resources.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/_dev/spec.yml[]
----

[[data-stream-spec]]
== `data_stream`

Data stream assets, including ingest pipelines, field definitions, metadata, and sample events.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/data_stream/spec.yml[]
----

[[docs-spec]]
== `docs`

The built integration readme file.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/docs/spec.yml[]
----

[[kibana-spec]]
== `kibana`

The integration's {kib} assets, like dashboards, visualizations, {ml} modules, etc.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/kibana/spec.yml[]
----

[[changelog-spec]]
== `changelog.yml`

The integration's changelog.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/changelog.spec.yml[]
----

[[manifest-spec]]
== `manifest.yml`

Integration metadata, like version, name, license level, description, category,
icon and screenshot mappings, and policy template definitions.

**required**

Included from the package-spec repository. This will update when the spec is updated.

[source,yaml]
----
include::{package-spec}/integration/manifest.spec.yml[]
----
