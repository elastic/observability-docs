[[observability-stream-log-files]]
= Stream any log file

// :description: Send a log file to your Observability project using the standalone {agent}.
// :keywords: serverless, observability, how-to

:role: Admin
:goal: onboard log data
include::../partials/roles.asciidoc[]
:role!:

:goal!:

// HACK
// for images deeply nested in block elements
++++
<div style="display:none">
++++
[role="screenshot"]
image::images/logs-stream-logs-api-key-beats.png[]
[role="screenshot"]
image::images/log-copy-es-endpoint.png[Copy a project's Elasticsearch endpoint]
++++
</div>
++++

This guide shows you how to send a log file to your Observability project using a standalone {agent} and configure the {agent} and your data streams using the `elastic-agent.yml` file, and query your logs using the data streams you've set up.

The quickest way to get started is to:

. Open your Observability project. If you don't have one, <<observability-create-an-observability-project,create an observability project>>.
. Go to **Add Data**.
. Under **Collect and analyze logs**, click **Stream log files**.

This will kick off a set of guided instructions that walk you through configuring the standalone {agent} and sending log data to your project.

To install and configure the {agent} manually, refer to <<manually-install-agent-logs,Manually install and configure the standalone {agent}>>.

[discrete]
[[observability-stream-log-files-configure-inputs-and-integration]]
== Configure inputs and integration

Enter a few configuration details in the guided instructions.

// Do we want to include a screenshot or will it be too difficult to maintain?

[role="screenshot"]
image::images/logs-stream-logs-config.png[Configure inputs and integration in the Stream log files guided instructions]

**Configure inputs**

* **Log file path**: The path to your log files.
You can also use a pattern like `/var/log/your-logs.log*`.
Click **Add row** to add more log file paths.
+
This will be passed to the `paths` field in the generated `elastic-agent.yml` file in a future step.
+
* **Service name**: Provide a service name to allow for distributed services running on
multiple hosts to correlate the related instances.

// Advanced settings?

**Configure integration**

Elastic creates an integration to streamline connecting your log data to Elastic.

* **Integration name**: Give your integration a name.
This is a unique identifier for your stream of log data that you can later use to filter data in Logs Explorer.
The value must be unique within your project, all lowercase, and max 100 chars. Special characters will be replaced with `_`.
+
This will be passed to the `streams.id` field in the generated `elastic-agent.yml` file in a future step.
+
The integration name will be used in Logs Explorer.
It will appear in the "All logs" dropdown menu.
+
[role="screenshot"]
image:images/logs-stream-logs-service-name.png[All logs dropdown menu on Logs Explorer page]
+
* **Dataset name**: Give your integration's dataset a name.
The name for your dataset data stream. Name this data stream anything that signifies the source of the data.
The value must be all lowercase and max 100 chars. Special characters will be replaced with `_`.
+
This will be passed to the `data_stream.dataset` field in the generated `elastic-agent.yml` file in a future step.

[discrete]
[[observability-stream-log-files-install-the-agent]]
== Install the {agent}

After configuring the inputs and integration, you'll continue in the guided instructions to
install and configure the standalone {agent}.

Run the command under **Install the {agent}** that corresponds with your system to download, extract, and install the {agent}.
Turning on **Automatically download the agent's config** includes your updated {agent} configuration file in the download.

If you do not want to automatically download the configuration, click **Download config file** to download it manually and
add it to `/opt/Elastic/Agent/elastic-agent.yml` on the host where you installed the {agent}.
The values you provided in <<observability-stream-log-files-configure-inputs-and-integration,Configure inputs and integration>> will be prepopulated in the generated configuration file.

[discrete]
[[manually-install-agent-logs]]
== Manually install and configure the standalone {agent}

If you're not using the guided instructions, follow these steps to manually install and configure your the {agent}.

[discrete]
[[observability-stream-log-files-step-1-download-and-extract-the-agent-installation-package]]
=== Step 1: Download and extract the {agent} installation package

On your host, download and extract the installation package that corresponds with your system:

include::../transclusion/fleet/tab-widgets/download-widget.asciidoc[]

[discrete]
[[observability-stream-log-files-step-2-install-and-start-the-agent]]
=== Step 2: Install and start the {agent}

After downloading and extracting the installation package, you're ready to install the {agent}.
From the agent directory, run the install command that corresponds with your system:

[NOTE]
====
On macOS, Linux (tar package), and Windows, run the `install` command to
install and start {agent} as a managed service and start the service. The DEB and RPM
packages include a service unit for Linux systems with
systemd, For these systems, you must enable and start the service.
====

include::../transclusion/fleet/tab-widgets/run-standalone-widget.asciidoc[]

During installation, you'll be prompted with some questions:

. When asked if you want to install the agent as a service, enter `Y`.
. When asked if you want to enroll the agent in Fleet, enter `n`.

[discrete]
[[observability-stream-log-files-step-3-configure-the-agent]]
=== Step 3: Configure the {agent}

After your agent is installed, configure it by updating the `elastic-agent.yml` file.

[discrete]
[[observability-stream-log-files-locate-your-configuration-file]]
==== Locate your configuration file

You'll find the `elastic-agent.yml` in one of the following locations according to your system:

include::../transclusion/observability/tab-widgets/logs/agent-location/widget.asciidoc[]

[discrete]
[[observability-stream-log-files-update-your-configuration-file]]
==== Update your configuration file

Update the default configuration in the `elastic-agent.yml` file manually.
It should look something like this:

[source,yaml]
----
outputs:
  default:
    type: elasticsearch
    hosts: '<your-elasticsearch-endpoint>:<port>'
    api_key: 'your-api-key'
inputs:
  - id: your-log-id
    type: filestream
    streams:
      - id: your-log-stream-id
        data_stream:
          dataset: example
        paths:
          - /var/log/your-logs.log
----

You need to set the values for the following fields:

|===
| Field | Value

| `hosts`
a| Copy the {es} endpoint from your project's page and add the port (the default port is `443`). For example, `https://my-deployment.es.us-central1.gcp.cloud.es.io:443`.

If you're following the guided instructions in your project,
the {es} endpoint will be prepopulated in the configuration file.

[TIP]
====
If you need to find your project's {es} endpoint outside the guided instructions:

. Go to the **Projects** page that lists all your projects.
. Click **Manage** next to the project you want to connect to.
. Click **View** next to _Endpoints_.
. Copy the _Elasticsearch endpoint_.

[role="screenshot"]
image::images/log-copy-es-endpoint.png[Copy a project's Elasticsearch endpoint]
====

| `api-key`
a| Use an API key to grant the agent access to your project.
The API key format should be `<id>:<key>`.

If you're following the guided instructions in your project, an API key will be autogenerated
and will be prepopulated in the downloadable configuration file.

If configuring the {agent} manually, create an API key:

. Navigate to **Project settings** → **Management** → **API keys** and click **Create API key**.
. Select **Restrict privileges** and add the following JSON to give privileges for ingesting logs.
+
[source,json]
----
{
  "standalone_agent": {
    "cluster": [
      "monitor"
    ],
    "indices": [
      {
        "names": [
          "logs-*-*"
        ],
        "privileges": [
          "auto_configure", "create_doc"
        ]
      }
    ]
  }
}
----
. You _must_ set the API key to configure {beats}.
Immediately after the API key is generated and while it is still being displayed, click the
**Encoded** button next to the API key and select **Beats** from the list in the tooltip.
Base64 encoded API keys are not currently supported in this configuration.
+
[role="screenshot"]
image::images/logs-stream-logs-api-key-beats.png[]

| `inputs.id`
| A unique identifier for your input.

| `type`
| The type of input. For collecting logs, set this to `filestream`.

| `streams.id`
a| A unique identifier for your stream of log data.

If you're following the guided instructions in your project, this will be prepopulated with
the value you specified in <<observability-stream-log-files-configure-inputs-and-integration,Configure inputs and integration>>.

| `data_stream.dataset`
a| The name for your dataset data stream. Name this data stream anything that signifies the source of the data. In this configuration, the dataset is set to `example`. The default value is `generic`.

If you're following the guided instructions in your project, this will be prepopulated with
the value you specified in <<observability-stream-log-files-configure-inputs-and-integration,Configure inputs and integration>>.

| `paths`
a| The path to your log files. You can also use a pattern like `/var/log/your-logs.log*`.

If you're following the guided instructions in your project, this will be prepopulated with
the value you specified in <<observability-stream-log-files-configure-inputs-and-integration,Configure inputs and integration>>.
|===

[discrete]
[[observability-stream-log-files-restart-the-agent]]
==== Restart the {agent}

After updating your configuration file, you need to restart the {agent}.

First, stop the {agent} and its related executables using the command that works with your system:

include::../transclusion/fleet/tab-widgets/stop-widget.asciidoc[]

Next, restart the {agent} using the command that works with your system:

include::../transclusion/fleet/tab-widgets/start-widget.asciidoc[]

[discrete]
[[observability-stream-log-files-troubleshoot-your-agent-configuration]]
== Troubleshoot your {agent} configuration

If you're not seeing your log files in your project, verify the following in the `elastic-agent.yml` file:

* The path to your logs file under `paths` is correct.
* Your API key is in `<id>:<key>` format. If not, your API key may be in an unsupported format, and you'll need to create an API key in **Beats** format.

If you're still running into issues, refer to {fleet-guide}/fleet-troubleshooting.html[{agent} troubleshooting] and {fleet-guide}/elastic-agent-configuration.html[Configure standalone Elastic Agents].

[discrete]
[[observability-stream-log-files-next-steps]]
== Next steps

After you have your agent configured and are streaming log data to your project:

* Refer to the <<observability-parse-log-data,Parse and organize logs>> documentation for information on extracting structured fields from your log data, rerouting your logs to different data streams, and filtering and aggregating your log data.
* Refer to the <<observability-filter-and-aggregate-logs,Filter and aggregate logs>> documentation for information on filtering and aggregating your log data to find specific information, gain insight, and monitor your systems more efficiently.
