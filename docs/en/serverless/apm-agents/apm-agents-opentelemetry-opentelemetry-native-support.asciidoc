[[observability-apm-agents-opentelemetry-opentelemetry-native-support]]
= Upstream OpenTelemetry Collectors and language SDKs

// :keywords: serverless, observability, overview

preview:[]

[NOTE]
====
This is one of several approaches you can use to integrate Elastic with OpenTelemetry.
**To compare approaches and choose the best approach for your use case, refer to <<observability-apm-agents-opentelemetry>>.**
====

Elastic natively supports the OpenTelemetry protocol (OTLP).
This means trace data and metrics collected from your applications and infrastructure can
be sent directly to Elastic.

* Send data to Elastic from an upstream <<observability-apm-agents-opentelemetry-opentelemetry-native-support-send-data-from-an-upstream-opentelemetry-collector,OpenTelemetry Collector>>
* Send data to Elastic from an upstream <<observability-apm-agents-opentelemetry-opentelemetry-native-support-send-data-from-an-upstream-opentelemetry-sdk,OpenTelemetry language SDK>>

[discrete]
[[observability-apm-agents-opentelemetry-opentelemetry-native-support-send-data-from-an-upstream-opentelemetry-collector]]
== Send data from an upstream OpenTelemetry Collector

Connect your OpenTelemetry Collector instances to {observability} using the OTLP exporter:

[source,yaml]
----
receivers:   <1>
  # ...
  otlp:

processors:   <2>
  # ...
  memory_limiter:
    check_interval: 1s
    limit_mib: 2000
  batch:

exporters:
  logging:
    loglevel: warn   <3>
  otlp/elastic:   <4>
    # Elastic https endpoint without the "https://" prefix
    endpoint: "${ELASTIC_APM_SERVER_ENDPOINT}" <5> <7>
    headers:
      # Elastic API key
      Authorization: "ApiKey ${ELASTIC_APM_API_KEY}" <6> <7>

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [..., memory_limiter, batch]
      exporters: [logging, otlp/elastic]
    metrics:
      receivers: [otlp]
      processors: [..., memory_limiter, batch]
      exporters: [logging, otlp/elastic]
    logs:   <8>
      receivers: [otlp]
      processors: [..., memory_limiter, batch]
      exporters: [logging, otlp/elastic]
----

<1> The receivers, like the
https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver[OTLP receiver], that forward data emitted by APM agents, or the https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver[host metrics receiver].

<2> We recommend using the https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/batchprocessor/README.md[Batch processor] and the https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiterprocessor/README.md[memory limiter processor]. For more information, see https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/README.md#recommended-processors[recommended processors].

<3> The https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/loggingexporter[logging exporter] is helpful for troubleshooting and supports various logging levels, like `debug`, `info`, `warn`, and `error`.

<4> {observability} endpoint configuration.
Elastic supports a ProtoBuf payload via both the OTLP protocol over gRPC transport https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlpgrpc[(OTLP/gRPC)]
and the OTLP protocol over HTTP transport https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp[(OTLP/HTTP)].
To learn more about these exporters, see the OpenTelemetry Collector documentation:
https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter[OTLP/HTTP Exporter] or
https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter[OTLP/gRPC exporter].

<5> Hostname and port of the Elastic endpoint. For example, `elastic-apm-server:8200`.

<6> Credential for Elastic APM API key authorization (`Authorization: "ApiKey an_api_key"`).

<7> Environment-specific configuration parameters can be conveniently passed in as environment variables documented https://opentelemetry.io/docs/collector/configuration/#configuration-environment-variables[here] (e.g. `ELASTIC_APM_SERVER_ENDPOINT` and `ELASTIC_APM_API_KEY`).

<8> preview:[]  To send OpenTelemetry logs to your project, declare a `logs` pipeline.

You're now ready to export traces and metrics from your services and applications.

[TIP]
====
When using the OpenTelemetry Collector, you should always prefer sending data via the https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter[`OTLP` exporter].
Using other methods, like the https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/elasticsearchexporter[`elasticsearch` exporter], will bypass all of the validation and data processing that Elastic performs.
In addition, your data will not be viewable in your Observability project if you use the `elasticsearch` exporter.
====

[discrete]
[[observability-apm-agents-opentelemetry-opentelemetry-native-support-send-data-from-an-upstream-opentelemetry-sdk]]
== Send data from an upstream OpenTelemetry SDK

[NOTE]
====
This document outlines how to send data directly from an upstream OpenTelemetry SDK to APM Server, which is appropriate when getting started. However, in many cases you should use the OpenTelemetry SDK to send data to an OpenTelemetry Collector that processes and exports data to APM Server. Read more about when and how to use a collector in the https://opentelemetry.io/docs/collector/#when-to-use-a-collector[OpenTelemetry documentation].
====

To export traces and metrics to Elastic, instrument your services and applications
with the OpenTelemetry API, SDK, or both. For example, if you are a Java developer, you need to instrument your Java app with the
https://github.com/open-telemetry/opentelemetry-java-instrumentation[OpenTelemetry agent for Java].
See the https://opentelemetry.io/docs/instrumentation/[OpenTelemetry Instrumentation guides] to download the
OpenTelemetry agent or SDK for your language.

Define environment variables to configure the OpenTelemetry agent or SDK and enable communication with Elastic APM.
For example, if you are instrumenting a Java app, define the following environment variables:

[source,bash]
----
export OTEL_RESOURCE_ATTRIBUTES=service.name=checkoutService,service.version=1.1,deployment.environment=production
export OTEL_EXPORTER_OTLP_ENDPOINT=https://apm_server_url:8200
export OTEL_EXPORTER_OTLP_HEADERS="Authorization=ApiKey an_apm_api_key"
export OTEL_METRICS_EXPORTER="otlp" \
export OTEL_LOGS_EXPORTER="otlp" \   <1>
java -javaagent:/path/to/opentelemetry-javaagent-all.jar \
     -classpath lib/*:classes/ \
     com.mycompany.checkout.CheckoutServiceServer
----

<1> preview:[]  The OpenTelemetry logs intake via Elastic is currently in technical preview.

|===
|  |

| `OTEL_RESOURCE_ATTRIBUTES`
| Fields that describe the service and the environment that the service runs in. See <<observability-apm-agents-opentelemetry-resource-attributes,resource attributes>> for more information.

| `OTEL_EXPORTER_OTLP_ENDPOINT`
| Elastic URL. The host and port that Elastic listens for APM events on.

| `OTEL_EXPORTER_OTLP_HEADERS`
a| Authorization header that includes the Elastic APM API key: `"Authorization=ApiKey an_api_key"`.
Note the required space between `ApiKey` and `an_api_key`.

For information on how to format an API key, refer to <<observability-apm-keep-data-secure-secure-communication-with-apm-agents,Secure communication with APM agents>>.

[NOTE]
====
If you are using a version of the Python OpenTelemetry agent _before_ 1.27.0, the content of the header _must_ be URL-encoded. You can use the Python standard library's `urllib.parse.quote` function to encode the content of the header.
====

| `OTEL_METRICS_EXPORTER`
| Metrics exporter to use. See https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#exporter-selection[exporter selection] for more information.

| `OTEL_LOGS_EXPORTER`
| Logs exporter to use. See https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#exporter-selection[exporter selection] for more information.
|===

You are now ready to collect traces and <<observability-apm-agents-opentelemetry-collect-metrics,metrics>> before <<open-telemetry-verify-metrics,verifying metrics>>
and <<open-telemetry-visualize,visualizing metrics>>.

[discrete]
[[observability-apm-agents-opentelemetry-opentelemetry-native-support-proxy-requests-to-elastic]]
== Proxy requests to Elastic

Elastic supports both the https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlpgrpc[(OTLP/gRPC)] and https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp[(OTLP/HTTP)] protocol on the same port as Elastic APM agent requests. For ease of setup, we recommend using OTLP/HTTP when proxying or load balancing requests to Elastic.

If you use the OTLP/gRPC protocol, requests to Elastic must use either HTTP/2 over TLS or HTTP/2 Cleartext (H2C). No matter which protocol is used, OTLP/gRPC requests will have the header: `"Content-Type: application/grpc"`.

When using a layer 7 (L7) proxy like AWS ALB, requests must be proxied in a way that ensures requests to Elastic follow the rules outlined above. For example, with ALB you can create rules to select an alternative backend protocol based on the headers of requests coming into ALB. In this example, you'd select the gRPC protocol when the  `"Content-Type: application/grpc"` header exists on a request.

For more information on how to configure an AWS ALB to support gRPC, see this AWS blog post:
https://aws.amazon.com/blogs/aws/new-application-load-balancer-support-for-end-to-end-http-2-and-grpc/[Application Load Balancer Support for End-to-End HTTP/2 and gRPC].

For more information on how Elastic services gRPC requests, see
https://github.com/elastic/apm-server/blob/main/dev_docs/otel.md#muxing-grpc-and-http11[Muxing gRPC and HTTP/1.1].

[discrete]
[[observability-apm-agents-opentelemetry-opentelemetry-native-support-next-steps]]
== Next steps

* <<observability-apm-agents-opentelemetry-collect-metrics,Collect metrics>>
* Add <<observability-apm-agents-opentelemetry-resource-attributes,Resource attributes>>
* Learn about the <<observability-apm-agents-opentelemetry-limitations,limitations of this integration>>
