:tutorial: tutorial

[[monitor-azure]]
== Monitor Microsoft Azure

In this {tutorial}, you'll learn how to monitor your Microsoft Azure deployments
using Elastic {observability}: Logs and Metrics.

[discrete]
[[azure-what-you-learn]]
=== What you'll learn

You'll learn how to:

- Create an {es} resource in the Azure portal.
- Ingest Azure platform logs using the native integration and view those logs
in {kib}.
- Ingest logs and metrics from your virtual machines and view those logs and
metrics in {kib}.
- Ingest other metrics (such as billing) using the
{metricbeat-ref}/metricbeat-module-azure.html[{metricbeat} Azure module] and
view those metrics in {kib}.

[discrete]
[[azure-step-one]]
=== Step 1: Create an {es} resource in the Azure portal

Microsoft Azure allows you to find, deploy, and manage {es} from
within the Azure portal.
The Microsoft Azure portal integration makes it faster and easier for you to
experience the value of Elastic in your Azure environment.
Behind the scenes, this process will provision a marketplace subscription with
{ecloud}.

[discrete]
==== Create an {es} resource

. Log in to the https://portal.azure.com/[Azure portal].
+
[NOTE]
====
Ensure your Azure account is configured with *Owner* access on the subscription
you want to deploy {es}. To learn more about Azure
subscriptions, see the https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/add-change-subscription-administrator#assign-a-subscription-administrator[Microsoft Azure documentation].
====

. In the search bar, enter *{es}* and then select it.
+
[role="screenshot"]
image:monitor-azure-search-elasticsearch.png[Search and click on {es}]

. Click *Create*.

. Enter the *Subscription*, *Resource group*, and the *Resource name*.
. Select a region and then click *Review + create*.
+
[role="screenshot"]
image:monitor-azure-create-elastic-resource.png[Create Elastic resource]
+
[NOTE]
====
We will cover *logs* and *metrics* later in this tutorial.
====

. To create the {es} deployment, click *Create*.

. After your deployment is complete, click *Go to resource*.
Here you can see and configure your deployment details.
To access the cluster, click *{kib}*.
+
[role="screenshot"]
image:monitor-azure-elastic-deployment.png[Elastic resource]

// lint ignore observability
. To single sign-on directly
into Elastic, select your Azure account.
. To see if there is any available data, click *Observability*.
There should be no data yet, but next, you will ingest logs.
+
[role="screenshot"]
image:monitor-azure-kibana-observability-page-empty.png[{kib} {observability}
page (no data)]

[discrete]
[[azure-step-two]]
=== Step 2: Ingest logs using the native integration

To ingest Azure subscription and resource logs into Elastic
using the Microsoft Azure native integration is straightforward.

. On to the {es} resource page in Azure, click
*Ingest logs and metrics from Azure Services*.
+
[role="screenshot"]
image:monitor-azure-elastic-click-ingest-logs.png[Click on Ingest logs and
metrics from Azure Services]

. Check both checkboxes and click *Save*.
+
[role="screenshot"]
image:monitor-azure-elastic-config-logs-metrics.png[Elastic configure logs and
metrics]
+
[NOTE]
====
This configuration can also be applied during the Elastic resource creation.
To make the concepts clearer, this tutorial separates the two steps.
====
+
[NOTE]
====
Native metrics collection is not fully supported yet and is discussed
later.
====

. Within {kib}, click *{observability}* until you
see some data.
This may take a few minutes.
+
[role="screenshot"]
image:monitor-azure-kibana-observability-page-data.png[{kib} {observability} page
(with data)]

. To access the {logs-app} and analyze all your subscription
and resource logs, click *View in app*.
+
[role="screenshot"]
image:monitor-azure-kibana-logs-app.png[{kib} {logs-app}]

[discrete]
[[azure-step-three]]
=== Step 3: Ingest logs and metrics from your virtual machines.

. Go to your Elastic resource and click *Virtual machines*.
+
[role="screenshot"]
image:monitor-azure-elastic-deployment.png[Elastic resource]

. Select the VMs that you want to collect logs and metrics from, click
*Install Extension*, and then click *OK*.
+
[role="screenshot"]
image:monitor-azure-elastic-vms.png[Select VMs to collect logs and metrics from]

. Wait until it is installed and sending data (if the list
does not update, click *Refresh* ).
To see the logs from the VM in the {logs-app}, click  *Logs*.
+
[role="screenshot"]
image:monitor-azure-kibana-vms-logs.png[VMs logs in the {logs-app}]
+
To see the VM metrics dashboard, click *Metrics*.
+
[role="screenshot"]
image:monitor-azure-kibana-vms-metrics.png[VMs metrics dashboard]
+
[NOTE]
====
Both logs and metrics are filtered by the VM name that you selected.
To view the data for all the monitored VMs, delete the filter.
====

[discrete]
[[azure-step-four]]
=== Step 4: Ingest other Azure metrics using the {metricbeat} Azure module

Some Azure metrics are not available via the native integration.
If you want to collect those metrics, you need to use the
https://docs.microsoft.com/en-us/rest/api/monitor/[Azure Monitor REST API]
and {metricbeat}.

The Azure Monitor REST API allows you to get insights into your Azure
resources using different operations.
To access the Azure Monitor REST API you need to use the Azure Resource Manager
authentication model. Therefore, you must authenticate all requests with Azure
Active Directory (Azure AD).
You can create the service principal using the https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal[Azure portal]
or https://docs.microsoft.com/en-us/powershell/azure/create-azure-service-principal-azureps?view=azps-2.7.0[Azure PowerShell].
Then, you need to grant access permission, which is detailed https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles[here].
This {tutorial} uses the Azure portal.

[discrete]
==== Create an Azure service principal

. Go to the https://portal.azure.com/[Azure Management Portal]. Search and click
on *Azure Active Directory*.
+
image:monitor-azure-search-active-directory.png[Search and click on Azure
Active Directory]
+
. Click on *App registrations* in the navigation pane of the selected Active
Directory and then click on *New registration*.
+
image:monitor-azure-click-app-registration.png[Click on App registrations]
+
. Type the name of your application (this {tutorial} uses `monitor-azure`) and
click on *Register* (leave all the other options with the default value).
+
image:monitor-azure-register-app.png[Register an application]
+
Copy the *Application (client) ID*, and save it for future reference.
This id is required to configure {metricbeat} to connect to your Azure account.
+
. Click on *Certificates & secrets*. Then, click on *New client secret* to
create a new security key.
+
image:monitor-azure-click-client-secret.png[Click on new client secret]
+
. Type a key description and select a key duration in the expire list.
Click on *Add* to create a client secret. The next page will display the key
value under the *Value* field. Copy the secret and save it (along with your
Client ID) for future reference.
+
[IMPORTANT]
====
This is your only chance to copy this value. You can't retrieve the
key value after you leave the page.
====

[discrete]
==== Grant access permission for your service principal

After creating the Azure service principal you need to grant it the correct
permission. You need `Reader` permission to configure {metricbeat} to monitor
your services.

. On Azure Portal, search and click on *Subscriptions*.
+
image:monitor-azure-search-subscriptions.png[Search and click on Subscriptions]
+
. In the Subscriptions page, click on your subscription.
. Click on *Access control (IAM)* in the subscription navigation pane.
. Click on *Add* and select *Add role assignment*.
. Select the *Reader* role.
. In the *Select* field, type the description name of the configured service
principal (`monitor-azure`).
+
image:monitor-azure-add-role-assignment.png[Add role assignment]
+
. Select the application and click on save to grant the service principal
access to your subscription.

[discrete]
==== Install and configure {metricbeat}

To configure {metricbeat} you need the {es} cluster
details.

. On the {es} resource page, click *Manage changes in
{ecloud}*.
+
[role="screenshot"]
image:monitor-azure-elastic-deployment.png[Elastic resource]

. Copy the *Cloud ID* and keep it safe. You will use it later.
+
[role="screenshot"]
image:monitor-azure-kibana-deployment.png[{ecloud} deployment]

. Click *Security* and then click *Reset password*. Confirm, and copy the
password. Keep it safe as you will use it later.
+
[role="screenshot"]
image:monitor-azure-kibana-security.png[{ecloud} security]

You can run {metricbeat} on any machine. This {tutorial} uses a small
Azure VM, *B2s* (2 vCPUs, 4 GB memory), with an Ubuntu distribution.

:leveloffset: +3
include::{shared}/install-configure-metricbeat.asciidoc[]
:leveloffset: -3

Now that the output is working, you are going to set up the input (Azure).

[discrete]
==== Configure {metricbeat} Azure module

To collect metrics from Microsoft Azure, use the
{metricbeat-ref}/metricbeat-module-azure.html[{metricbeat} Azure module].
This module periodically fetches monitoring metrics from Microsoft Azure using
the https://docs.microsoft.com/en-us/rest/api/monitor/[Azure Monitor REST API].

[WARNING]
====
Extra Azure charges on metric queries my be generated by this module.
Please see {metricbeat-ref}/metricbeat-module-azure.html#azure-api-cost[additional
notes about metrics and costs] for more details.
====

. The azure module configuration needs three ids and one secret. Use the
commands below to store each one of them in the keystore.
+
[source,bash]
----
echo -n "<client_id>" | ./metricbeat keystore add AZURE_CLIENT_ID --stdin
echo -n "<client_secret>" | ./metricbeat keystore add AZURE_CLIENT_SECRET --stdin
echo -n "<tenant_id>" | ./metricbeat keystore add AZURE_TENANT_ID --stdin
echo -n "<subscription_id>" | ./metricbeat keystore add AZURE_SUBSCRIPTION_ID --stdin
----
+
[NOTE]
====
You can find the `tenant_id` in the main Azure Active Directory page.
You can find the `subscription_id` in the main Subscriptions page.
====

. Enable the Azure module.
+
[source,bash]
----
./metricbeat modules enable azure
----

. Edit the `modules.d/azure.yml` file to collect `billing` metrics.
+
[source,yml]
----
- module: azure
  metricsets:
  - billing  <1>
  enabled: true
  period: 24h  <2>
  client_id: '${AZURE_CLIENT_ID:""}'
  client_secret: '${AZURE_CLIENT_SECRET:""}'
  tenant_id: '${AZURE_TENANT_ID:""}'
  subscription_id: '${AZURE_SUBSCRIPTION_ID:""}'
  refresh_list_interval: 600s
----
+
<1> The `billing` metricset is a predefined metricset that collects relevant
usage data and forecast information of the subscription configured.
<2> Collects metrics every 24 hours. The period for `billing` metricset
should be 24h or multiples of 24h.

. To check if {metricbeat} can collect data, test the input by running the
following command:
+
[source,bash]
----
./metricbeat test modules azure
----
+
{metricbeat} will print `billing` metrics to the terminal, if the setup is
correct.
+
[NOTE]
====
If it returns a timeout error, try again. The `test modules` timeout is short.
====

. When the input and output are ready, start {metricbeat} to collect the data.
+
[source,bash]
----
./metricbeat -e
----

. Finally, log into {kib} and open the *[{metricbeat} Azure] Billing overview*
dashboard. Keep in mind it collects data every 24 hours.
+
[role="screenshot"]
image:monitor-azure-billing-overview-dashboard.png[{metricbeat} azure billing
overview dashboard]
