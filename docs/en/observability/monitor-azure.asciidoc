:tutorial: tutorial

[[monitor-azure]]
== Monitor Microsoft Azure

In this {tutorial}, you'll learn how to monitor your Microsoft Azure deployments
using Elastic Observability: Logs and Metrics.

[discrete]
[[azure-what-you-learn]]
=== What you'll learn

You'll learn how to:

- Set up an Azure service principal.
- Ingest metrics using the {metricbeat-ref}/metricbeat-module-azure.html[{metricbeat}
Azure module] and view those metrics in {kib}.
- Export Azure activity logs through Event Hubs.
- Ingest logs using the {filebeat-ref}/filebeat-module-azure.html[{filebeat}
Azure module] and view those logs in {kib}.

[discrete]
[[azure-before-you-begin]]
=== Before you begin

Create a deployment using our hosted {ess} on {ess-trial}[{ecloud}].
The deployment includes an {es} cluster for storing and searching your data,
and {kib} for visualizing and managing your data.
For more information, see <<spin-up-stack,Spin up the Elastic Stack>>.

[discrete]
[[azure-step-one]]
=== Step 1: Create an Azure service principal and set permissions

The https://docs.microsoft.com/en-us/rest/api/monitor/[Azure Monitor REST API]
allows you to get insights into your Azure resources using different operations.
To access the Azure Monitor REST API you need to use the Azure Resource Manager
authentication model. Therefore, all requests must be authenticated with Azure
Active Directory (Azure AD).
You can create the service principal using the https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal[Azure portal]
or https://docs.microsoft.com/en-us/powershell/azure/create-azure-service-principal-azureps?view=azps-2.7.0[Azure PowerShell].
Then, you need to grant access permission, which is detailed https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles[here].
This {tutorial} uses the Azure portal.

[discrete]
==== Create an Azure service principal

. Go to the https://portal.azure.com/[Azure Management Portal]. Search and click
on *Azure Active Directory*.
+
image:monitor-azure-search-active-directory.png[Search and click on Azure
Active Directory]
+
. Click on *App registrations* in the navigation pane of the selected Active
Directory and then click on *New registration*.
+
image:monitor-azure-click-app-registration.png[Click on App registrations]
+
. Type the name of your application (this {tutorial} uses `monitor-azure`) and
click on *Register* (leave all the other options with the default value).
+
image:monitor-azure-register-app.png[Register an application]
+
Copy the *Application (client) ID*, and save it for future reference.
This id is required to configure {metricbeat} to connect to your Azure account.
+
. Click on *Certificates & secrets*. Then, click on *New client secret* to
create a new security key.
+
image:monitor-azure-click-client-secret.png[Click on new client secret]
+
. Type a key description and select a key duration in the expire list.
Click on *Add* to create a client secret. The next page will display the key
value under the *Value* field. Copy the secret and save it (along with your
Client ID) for future reference.
+
[IMPORTANT]
====
This is your only chance to copy this value. You can't retrieve the
key value after you leave the page.
====

[discrete]
==== Grant access permission for your service principal

After creating the Azure service principal you need to grant it the correct
permission. You need `Reader` permission to configure {metricbeat} to monitor
your services.

. On Azure Portal, search and click on *Subscriptions*.
+
image:monitor-azure-search-subscriptions.png[Search and click on Subscriptions]
+
. In the Subscriptions page, click on your subscription.
. Click on *Access control (IAM)* in the subscription navigation pane.
. Click on *Add* and select *Add role assignment*.
. Select the *Reader* role.
. In the *Select* field, type the description name of the configured service
principal (`monitor-azure`).
+
image:monitor-azure-add-role-assignment.png[Add role assignment]
+
. Select the application and click on save to grant the service principal
access to your subscription.

[discrete]
[[azure-step-two]]
=== Step 2: Install and configure {metricbeat}

[NOTE]
====
This {tutorial} assumes the Elastic cluster is already running. Make sure you
have your *cloud ID* and your *credentials* on hand.
====

To monitor Microsoft Azure using the {stack}, you need two main components:
an Elastic deployment to store and analyze the data and an agent to collect
and ship the data.

Two agents can be used to monitor Azure: {metricbeat} is used to
monitor metrics, and {filebeat} to monitor logs. You can run the agents on any
machine. This {tutorial} uses a small Azure instance, *B2s* (2 vCPUs,
4 GB memory), with an Ubuntu distribution.

:leveloffset: +3
include::{shared}/install-configure-metricbeat.asciidoc[]
:leveloffset: -3

Now that the output is working, you are going to set up the input (Azure).

[discrete]
[[azure-step-three]]
=== Step 3: Configure {metricbeat} Azure module

To collect metrics from Microsoft Azure, use the
{metricbeat-ref}/metricbeat-module-azure.html[{metricbeat} Azure module].
This module periodically fetches monitoring metrics from Microsoft Azure using
the https://docs.microsoft.com/en-us/rest/api/monitor/[Azure Monitor REST API].

[WARNING]
====
Extra Azure charges on metric queries my be generated by this module.
Please see {metricbeat-ref}/metricbeat-module-azure.html#azure-api-cost[additional
notes about metrics and costs] for more details.
====

. The azure module configuration needs three ids and one secret. Use the
commands below to store each one of them in the keystore.
+
[source,bash]
----
echo -n "<client_id>" | ./metricbeat keystore add AZURE_CLIENT_ID --stdin
echo -n "<client_secret>" | ./metricbeat keystore add AZURE_CLIENT_SECRET --stdin
echo -n "<tenant_id>" | ./metricbeat keystore add AZURE_TENANT_ID --stdin
echo -n "<subscription_id>" | ./metricbeat keystore add AZURE_SUBSCRIPTION_ID --stdin
----
+
[NOTE]
====
You can find the `tenant_id` in the main Azure Active Directory page.
You can find the `subscription_id` in the main Subscriptions page.
====

. Enable the Azure module.
+
[source,bash]
----
./metricbeat modules enable azure
----

. Edit the `modules.d/azure.yml` file to collect `compute_vms` metrics.
+
[source,yml]
----
- module: azure
  metricsets:
  - compute_vm  <1>
  enabled: true
  period: 300s  <2>
  client_id: '${AZURE_CLIENT_ID:""}'  <3>
  client_secret: '${AZURE_CLIENT_SECRET:""}'  <4>
  tenant_id: '${AZURE_TENANT_ID:""}'  <5>
  subscription_id: '${AZURE_SUBSCRIPTION_ID:""}'  <6>
  refresh_list_interval: 600s
----
+
<1> The `compute_vm` metricset is a predefined metricset that collects metrics
from the virtual machines.
<2> Collects metrics every 5 minutes. The period for `compute_vm` metricset
should be 300s or multiples of 300s.
<3> The unique identifier for the application (also known as Application ID,
which you copied earlier).
<4> The client/application secret/key (copied earlier).
<5> The unique identifier of the Azure Active Directory instance.
<6> The unique identifier for the azure subscription.

. To check if {metricbeat} can collect data, test the input by running the
following command:
+
[source,bash]
----
./metricbeat test modules azure
----
+
{metricbeat} will print `compute_vms` metrics to the terminal, if the setup is
correct.
+
[NOTE]
====
If it returns a timeout error, try again. The `test modules` timeout is short.
====

. Edit the `modules.d/azure.yml` file to also collect `billing` metrics.
+
[source,yml]
----
- module: azure
  metricsets:
  - billing  <1>
  enabled: true
  period: 24h  <2>
  client_id: '${AZURE_CLIENT_ID:""}'
  client_secret: '${AZURE_CLIENT_SECRET:""}'
  tenant_id: '${AZURE_TENANT_ID:""}'
  subscription_id: '${AZURE_SUBSCRIPTION_ID:""}'
  refresh_list_interval: 600s
----
+
<1> The `billing` metricset is a predefined metricset that collects relevant
usage data and forecast information of the subscription configured.
<2> Collects metrics every 24 hours. The period for `billing` metricset
should be 24h or multiples of 24h.

. When the input and output are ready, start {metricbeat} to collect the data.
+
[source,bash]
----
./metricbeat -e
----

. Finally, log into {kib} and open the *[{metricbeat} Azure] Compute VMs
Overview* dashboard.
+
image:monitor-azure-compute-vms-overview-dashboard.png[{metricbeat} azure
compute vms overview dashboard]
+
[NOTE]
====
The *VM Available Memory* visualization might be empty if you only have Linux
VMs as discussed https://github.com/elastic/beats/issues/20289[here].
====
+
You can also check the *[{metricbeat} Azure] Billing overview* dashboard, even
though it might take longer to collect data.
+
image:monitor-azure-billing-overview-dashboard.png[{metricbeat} azure compute
vms overview dashboard]

[discrete]
[[azure-step-four]]
=== Step 4: Install and configure {filebeat}

Now that {metricbeat} is up and running, configure {filebeat} to collect Azure
logs.

:leveloffset: +3
include::{shared}/install-configure-filebeat.asciidoc[]
:leveloffset: -3

Now that the output is working, you are going to set up the input (Azure).

[discrete]
[[azure-step-five]]
=== Step 5: Create an event hub and configure diagnostics settings

// New-AzResourceGroup –Name monitor-azure-resource-group –Location northeurope

To collect logs from Microsoft Azure, use the
{filebeat-ref}/filebeat-module-azure.html[{filebeat} Azure module].
This module periodically fetches logs that have been forwarded to an Azure event
hub.
There are four available filesets: `activitylogs`, `platformlogs`, `signinlogs`,
and `auditlogs`. This {tutorial} covers the `activitylogs` fileset.

[discrete]
==== Create Event Hubs namespace

You have different options to create an event hub, such as
https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-create[Azure portal]
or https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quickstart-powershell[PowerShell].
This {tutorial} uses PowerShell.

. Open the Azure PowerShell:
+
image::monitor-azure-open-powershell.png[Open the Azure PowerShell]

. Run the following command to create an Event Hub namespace:
+
[source,bash]
----
New-AzEventHubNamespace -ResourceGroupName monitor-azure-resource-group `
  -NamespaceName monitor-azure-namespace `
  -Location northeurope
----
+
[IMPORTANT]
====
You can only stream logs to event hubs in the same region. Make sure to choose
an appropriate region.
====

. Create an event hub:
+
[source,bash]
----
New-AzEventHub -ResourceGroupName monitor-azure-resource-group `
  -NamespaceName monitor-azure-namespace `
  -EventHubName monitor-azure-event-hub `
  -MessageRetentionInDays 3 `
----
+
[NOTE]
====
Adjust the `-MessageRetentionInDays` value to your needs. This {tutorial} uses the
default value suggested in the Azure quick start.
====

[discrete]
==== Configure activity logs to stream to the event hub

. Navigate to *Activity log*.
+
image::monitor-azure-search-activity-log.png[Navigate to Activity log]

. Click on *Diagnostics settings*.
+
image::monitor-azure-click-diagnostics-settings.png[Click on diagnostics settings]

. Click on *Add diagnostic setting*.

. Configure it and click on *Save*.
+
image::monitor-azure-configure-diagnostics-settings.png[Configure on diagnostics settings]
+
[NOTE]
====
Select the log categories that you want.
Select stream to an event hub and make sure to configure the correct namespace
event hub.
====

[discrete]
[[azure-step-six]]
=== Step 6: Configure {filebeat} Azure module

There are 2 configuration values that you need to get from the Azure portal:
`connection_string` and `storage_account_key`.

[discrete]
==== Add the `connection_string` to the keystore

. Navigate to Event Hubs.
+
image::monitor-azure-search-event-hubs.png[Search event hubs]

. Click on the created namespace (`monitor-azure-namespace`).

. Click on shared policies and then on the `RootManageSharedAccessKey` policy.

. Copy the `Connection string–primary key` value and add it to the `keystore`.
+
image::monitor-azure-click-policy.png[Click on policy]
+
[source,bash]
----
echo -n "<Your Connection string-primary key>" | ./filebeat keystore add AZURE_CONNECTION_STRING --stdin
----

[discrete]
==== Add `storage_account_key` to the keystore

A Blob Storage account is required in order to store/retrieve/update the offset
or state of the eventhub messages. This means that after stopping the {filebeat}
azure module it can start back up at the spot that it stopped processing
messages.

. Create a storage account. (You can also use an existing one.)
+
[source,bash]
----
New-AzStorageAccount -ResourceGroupName monitor-azure-resource-group `
  -Name monitorazurestorage `
  -Location northeurope `
  -SkuName Standard_ZRS `
  -Kind StorageV2
----

. Navigate to Storage accounts.
+
image::monitor-azure-search-storage-accounts.png[Search storage accounts]

. Click on the created storage account and then on *Access keys*.
+
image::monitor-azure-click-access-keys.png[Click on access keys]

. Click on *Show keys* and copy one of the keys.
+
image::monitor-azure-click-view-keys.png[Click on view keys]

. Add the `storage_account_key` to the `keystore`.
+
[source,bash]
----
echo -n "<Your Storage account key>" | ./filebeat keystore add AZURE_STORAGE_KEY --stdin
----

[discrete]
==== Configure {filebeat} Azure module

. Enable the {filebeat} Azure module.
+
[source,bash]
----
./filebeat modules enable azure
----

. Edit the `modules.d/azure.yml` file with the following configurations.
+
[source,yml]
----
- module: azure
  # All logs
  activitylogs:
    enabled: true
    var:
      eventhub: "monitor-azure-event-hub"  <1>
      consumer_group: "$Default"  <2>
      connection_string: "${AZURE_CONNECTION_STRING}"  <3>
      storage_account: "monitorazurestorage"  <4>
      storage_account_key: "${AZURE_STORAGE_KEY}"  <5>
----
+
<1> Collects logs from the `monitor-azure-event-hub` event hub.
<2> Uses the default consumer group.
<3> Connects using the configured connection string.
<4> Persists the state of the eventhub messages to the `monitorazurestorage`
storage account.
<5> Uses the configured key to authenticate to the storage account.
+
[IMPORTANT]
====
You cannot remove any of the other filesets from the configuration file.
You must have them in the config file and disabled.
====

. Start {filebeat} to collect the logs.
+
[source,bash]
----
./filebeat -e
----

. Finally, log into {kib} and open the *[{filebeat} Azure] Cloud Overview*
dashboard.
+
image::monitor-azure-cloud-overview-dashboard.png[{filebeat} azure cloud overview dashboard]

// Add Javascript and CSS for tabbed panels
include::{beats-repo-dir}/tab-widgets/code.asciidoc[]
