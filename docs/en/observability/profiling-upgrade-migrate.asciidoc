[[profiling-upgrade-migrate]]
= Upgrade Universal Profiling from version 8.8.0 or more recent

++++
<titleabbrev>Upgrade from version 8.8.0 or more recent</titleabbrev>
++++

beta::[]

NOTE: These steps only apply if you are upgrading from version 8.8.0 or more recent. If you are upgrading from versions prior to 8.8.0, follow <<profiling-upgrade-fresh, these instructions>> instead.

To upgrade Universal Profiling, you need to:

. Stop profiling data ingestion
. Perform a stack upgrade in {ecloud}
. Migrate existing profiling data
. Start profiling data ingestion

[discrete]
[[profiling-upgrade-migrate-stop-ingestion]]
== Stop profiling data ingestion

During the Universal Profiling upgrade, you must stop data ingestion.

If you have an automated host-agent setup and control of the *full* fleet of machines where the host-agent is installed, deleting
all host-agent deployments stops ingestion.

If you do not have direct control of all host-agent deployments, you can stop data ingestion by stopping incoming requests to the
Integrations Server. To do this:

. Locate the deployment you wish to upgrade in https://cloud.elastic.co[{ecloud}].
. Click the *Manage deployment* icon next to your deployment to open the deployment settings.
. Scroll down to the *Instances* section and locate all Integrations Server instances.
. Click the three vertical dots in the upper-right corner of the Integrations Server card.
. Select *Stop routing requests*.
. Repeat this process for all Integrations Server instances.

NOTE: When stopping incoming requests, host-agent replicas back off and retry connecting to the {ecloud} endpoint at increasing time intervals.

[discrete]
[[profiling-upgrade-migrate-in-cloud]]
== Perform a stack upgrade in the {ecloud} console

To perform a stack upgrade in {ecloud}:

. Locate the deployment you wish to upgrade in https://cloud.elastic.co[{ecloud}].
. Click the *Manage deployment* icon next to your deployment to open the deployment settings.
. Find *Deployment version* on the right side of the page.
. Click *Upgrade*, and choose the desired version.
. Verify the upgrade was successful under **Your deployment â†’ Activity** in the navigation menu.

[discrete]
[[profiling-migrate-data]]
== Migrate existing profiling data

When upgrading to version 8.9, you can use a migration script to migrate existing data if you meet the following requirements:

* The cluster has been upgraded from 8.8 to 8.9.
* The migration is performed on a Linux workstation with `jq` and `curl` installed.

If you meet these requirements, follow the steps below to migrate your data. If not, we suggest <<profiling-delete-data, deleting your existing profiling data>> and <<profiling-from-scratch, setting up Universal Profiling from scratch>>.

You should also verify that you have a recent snapshot of your data so you can restore it if there's an error during the migration.


To run the migration script:

. Save the script below on a Linux workstation, e.g. as `migrate-8.9.sh`
. Make it executable: `chmod u+x migrate-8.9.sh`
. Ensure that `jq` and `curl` are installed on the Linux workstation.
. Export required environment variables:
  *  `export ES_USER=<superuser name>`
  *  `export ES_PASSWORD=<superuser password>`
  *  `export ES_HOST=<elasticsearch endpoint URL>`
. Run the migration: `bash migrate-8.9.sh`
. Unset environment variables again: `unset ES_USER ES_PASSWORD ES_HOST`

[%collapsible]
.Migration Script
====
[source,bash]
----
#!/usr/bin/env bash

# Licensed to Elasticsearch B.V. under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Elasticsearch B.V. licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# fail this script immediately if any command fails with a non-zero exit code
set -e
# Treat unset env variables as an error
set -u
# fail on pipeline errors, e.g. when grepping
set -o pipefail

function check_required_binary {
  if ! command -v $1 &>/dev/null; then
    echo "Required dependency $1 not found."
    exit 1
  fi
}

function check_env_var_set {
  if [ -z ${1+x} ]; then
    echo "$1 is unset"
    exit 1
  fi
}

function check_preconditions {
  if [[ "$(uname -a)" != *Linux* ]]; then
    echo "This script is supports only Linux machines"
    exit 1
  fi

  # jq and curl are installed
  check_required_binary jq
  check_required_binary curl

  if [ -z ${ES_USER+x} ]; then
    echo "Set ES_USER"
    exit 1
  fi
  if [ -z ${ES_PASSWORD+x} ]; then
    echo "Set ES_PASSWORD"
    exit 1
  fi
  if [ -z ${ES_HOST+x} ]; then
    echo "Set ES_HOST"
    exit 1
  fi
}

function prompt {
  while true; do
    read -p "$* [y/n]: " yn
    case $yn in
    [Yy]*) return 0 ;;
    [Nn]*) exit 1 ;;
    esac
  done
}

function ask_user_prerequisites {
  prompt "Is the user $ES_USER a super user?"
  prompt "Has the cluster $ES_HOST been upgraded from 8.8.x to 8.9.0?"
  prompt "Did you stop profiling data ingestion?"
  prompt "Did you verify that you have a recent snapshot so you can restore data if the script encounters an error?"
}

function sanity_check_cluster {
  printf "Checking cluster version ... "
  # check cluster version
  local es_version=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/" | jq -r ".version.number")
  # allow snapshot versions
  if [[ "$es_version" == 8.9.* ]]; then
    printf "[OK]\n"
  else
    printf "[FAILED: %s]\n" "$es_version"
    exit 1
  fi

  printf "Checking cluster health ... "
  local status=$(curl -s -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cluster/health?wait_for_status=yellow&wait_for_no_initializing_shards=true&wait_for_no_relocating_shards=true" | jq -r ".status")
  if [ "$status" == "red" ]; then
    printf "[FAILED: status is red]\n"
    exit 1
  else
    printf "[OK: status is %s]\n" "$status"
  fi

  printf "Checking that Elastic Universal Profiling has not been enabled yet ... "
  local indices_created=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/indices/*.profiling-v001*?expand_wildcards=all")
  if [ "$indices_created" == "" ]; then
    printf "[OK]\n"
  else
    printf "[FAILED]\n"
    exit 1
  fi

  printf "Checking minimum required index version ... "
  local min_index_version=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-*/_settings/index.version.created" | jq -r "..|.created?|values" | sort | uniq | head -n 1)
  if [[ "$min_index_version" == 808* ]]; then
    printf "[OK]\n"
  else
    {
      echo "Indices are too old. Dumping indices and index versions..."
      curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-*/_settings/index.version.created?pretty"
    } >> "elastic_universal_profiling_migration_log.txt"
    printf "[FAILED: your cluster contains indices from a version before 8.8.0]\n"
    exit 1
  fi
}

function delete_index_by_alias {
  local alias_name=$1
  local index_name=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/aliases/$alias_name?h=index")
  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$index_name"
}

function rename_kv_index {
  local alias_name=$1
  local old_index_name=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/aliases/$alias_name-next?h=index")
  echo "Renaming $alias_name"

  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$old_index_name/_settings" -H 'Content-Type: application/json' -d'
  {
    "settings": {
      "index.blocks.write": true
    }
  }'

  # delete this alias for all indices
  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$alias_name*/_alias/$alias_name-next"
  local creation_date=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$old_index_name/_settings" | jq -r "..|.creation_date?|values")
  curl -s -f -o /dev/null -X POST -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$old_index_name/_clone/.$alias_name-v001-000001" -H 'Content-Type: application/json' -d"
  {
    \"settings\": {
      \"index.hidden\": true,
      \"index.lifecycle.name\": \"profiling-60-days\",
      \"index.lifecycle.rollover_alias\": \"$alias_name\",
      \"index.blocks.write\": false,
      \"index.lifecycle.origination_date\": $creation_date,
      \"routing.allocation.include._tier_preference\": \"data_hot\"
    },
    \"aliases\": {
      \"$alias_name\": {
        \"is_write_index\": true
      }
    }
  }"

  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$old_index_name"
}

function rename_regular_index {
  local index_name=$1
  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$index_name/_settings" -H 'Content-Type: application/json' -d'
  {
    "settings": {
      "index.blocks.write": true
    }
  }'
  local creation_date=$(curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$index_name/_settings" | jq -r "..|.creation_date?|values")

  curl -s -f -o /dev/null -X POST -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$index_name/_clone/.$index_name-v001" -H 'Content-Type: application/json' -d"
  {
    \"settings\": {
      \"index.hidden\": true,
      \"index.blocks.write\": false,
      \"index.lifecycle.origination_date\": $creation_date
    }
  }"

  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/$index_name"
  # Create the alias in a separate call after we've deleted the index
  curl -s -f -o /dev/null -X POST -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/.$index_name-v001/_alias/$index_name" -H 'Content-Type: application/json' -d'
  {
    "is_write_index": true
  }'
}


function migrate {
  {
    echo "Indices and aliases before migration"
    curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/indices/*profiling*?v&s=index&expand_wildcards=all"
    curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/aliases/*profiling*?v&expand_wildcards=all"
  }  >> "elastic_universal_profiling_migration_log.txt"

  echo "Allowing wildcard deletes ..."
  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cluster/settings" -H 'Content-Type: application/json' -d'
  {
    "persistent": {
      "action.destructive_requires_name": false
    }
  }'

  echo "Disabling ILM temporarily..."
  curl -s -f -o /dev/null -X POST -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_ilm/stop"

  echo "Deleting obsolete indices..."
  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/.profiling-ilm-lock"
  curl -s -f -o /dev/null -X DELETE -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-sq-executables,profiling-sq-leafframes,profiling-symbols?ignore_unavailable=true"
  # We rely only on the "next" indices
  delete_index_by_alias profiling-stackframes
  delete_index_by_alias profiling-stacktraces
  delete_index_by_alias profiling-executables

  echo "Creating ILM policy..."
  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_ilm/policy/profiling-60-days" -H 'Content-Type: application/json' -d'
{
  "policy": {
    "phases": {
      "hot": {
        "actions": {
          "rollover": {
            "max_primary_shard_size": "50gb",
            "max_age": "30d",
            "min_docs": 1
          },
          "set_priority": {
            "priority": 100
          },
          "readonly": {}
        }
      },
      "warm": {
        "min_age": "30d",
        "actions": {
          "set_priority": {
            "priority": 50
          }
        }
      },
      "delete": {
        "min_age": "60d",
        "actions": {
          "delete": {}
        }
      }
    },
    "_meta": {
      "description": "default policy for Elastic Universal Profiling",
      "managed": true,
      "version": 1
    }
  }
}'

  echo "Renaming indices to new naming scheme..."
  rename_kv_index "profiling-stackframes"
  rename_kv_index "profiling-stacktraces"
  rename_kv_index "profiling-executables"

  # profiling-symbols-private and profiling-returnpads-private may or may not be present
  status_code=$(curl -s -o /dev/null -w "%{http_code}" -I -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-symbols-private")
  if [ "$status_code" == "200" ]; then
    rename_regular_index "profiling-symbols-private"
  fi
  status_code=$(curl -s -o /dev/null -w "%{http_code}" -I -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-returnpads-private")
  if [ "$status_code" == "200" ]; then
    rename_regular_index "profiling-returnpads-private"
  fi

  echo "Renaming existing fields..."
  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/profiling-events-*/_mapping" -H 'Content-Type: application/json' -d'
  {
    "properties": {
      "profiling.project.id": {
        "type": "alias",
        "path": "service.name"
      }
    }
  }'

  echo "Enabling Universal Profiling index template management and disabling wildcard deletes..."
  curl -s -f -o /dev/null -X PUT -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cluster/settings" -H 'Content-Type: application/json' -d'
  {
    "persistent": {
      "xpack.profiling.templates.enabled": true,
      "action.destructive_requires_name": true
    }
  }'

  echo "Reenabling ILM..."
  curl -s -f -o /dev/null -X POST -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_ilm/start"

  printf "Checking cluster health ... "
  local status=$(curl -s -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cluster/health?wait_for_status=yellow&wait_for_no_initializing_shards=true&wait_for_no_relocating_shards=true" | jq -r ".status")
  if [ "$status" == "red" ]; then
    printf "[ERROR: status is red]\n"
  else
    printf "[OK: status is %s]\n" "$status"
  fi

  {
    echo "Indices and aliases after migration"
    curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/indices/*profiling*?v&s=index&expand_wildcards=all"
    curl -s -f -k -u "$ES_USER":"$ES_PASSWORD" "$ES_HOST/_cat/aliases/*profiling*?v&expand_wildcards=all"
  } >> "elastic_universal_profiling_migration_log.txt"
}

function main {
  echo "Starting migration" > "elastic_universal_profiling_migration_log.txt"
  check_preconditions
  ask_user_prerequisites
  sanity_check_cluster
  migrate

  echo "Migration has finished. You can now start profiling data ingestion."
}

main
----
====

[discrete]
[[profiling-upgrade-migrate-start-data-ingestion]]
== Start profiling data ingestion

If you stopped ingesting data by stopping routing requests to the Integrations Server, reenable traffic following the same steps but click **Start routing requests** instead of **Stop routing requests**.

[discrete]
[[profiling-upgrade-migrate-verify-upgrade-success]]
== Verify the update succeeds

Click any subheadings under Universal Profiling in the navigation menu. You should see incoming data.

If you see instructions on how to deploy the host-agent like in the <<profiling-install-host-agent,examples>> from the <<profiling-get-started,Get Started>> documentation, the agents did not reconnect to the Integrations Server replicas.

Refer to the <<profiling-troubleshooting,troubleshooting>> documentation and the <<profiling-get-started,Get Started>> documentation to investigate the issue.
