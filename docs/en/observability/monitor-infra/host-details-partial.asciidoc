// This is collapsed by default
[%collapsible]
.*Overview*
====

[role="screenshot"]
image::images/metrics-overlay.png[Host metrics]

The *Overview* tab displays metrics about the selected host, including CPU usage,
normalized load, memory usage, disk usage, network traffic, and the log rate.

Change the time range to view metrics over a specific period of time.

Hover over a specific time period on a chart to compare the various metrics at that given time.

Expand the **Alerts** section to see alerts related to the selected host.

====

[%collapsible]
.*Metadata*
====

[role="screenshot"]
image::images/metadata-overlay.png[Host metadata]

The *Metadata* tab lists all the meta information relating to the host:

* Host information
* Cloud information
* Agent information

All of this information can help when investigating eventsâ€”for example, filtering by operating system or architecture.
====

[%collapsible]
.*Processes*
====

[role="screenshot"]
image::images/processes-overlay.png[Host processes]

The *Processes* tab lists the total number of processes (`system.process.summary.total`) running on the host,
along with the total number of processes in these various states:

* Running (`system.process.summary.running`)
* Sleeping (`system.process.summary.sleeping`)
* Stopped (`system.process.summary.stopped`)
* Idle (`system.process.summary.idle`)
* Dead (`system.process.summary.dead`)
* Zombie (`system.process.summary.zombie`)
* Unknown (`system.process.summary.unknown`)

The processes listed in the *Top processes* table are based on an aggregation of the top CPU and the top memory consuming processes.
The number of top processes is controlled by `process.include_top_n.by_cpu` and `process.include_top_n.by_memory`.

|===

| *Command* | Full command line that started the process, including the absolute path to the executable, and all the arguments (`system.process.cmdline`).
| *PID* | Process id (`process.pid`).
| *User* | User name (`user.name`).
| *CPU* | The percentage of CPU time spent by the process since the last event (`system.process.cpu.total.pct`).
| *Time* | The time the process started (`system.process.cpu.start_time`).
| *Memory* | The percentage of memory (`system.process.memory.rss.pct`) the process occupied in main memory (RAM).
| *State* | The current state of the process and the total number of processes (`system.process.state`). Expected values are: `running`, `sleeping`, `dead`, `stopped`,
`idle`, `zombie`, and `unknown`.

|===
====

[%collapsible]
.*Universal Profiling*
====

[role="screenshot"]
image::images/universal-profiling-overlay.png[Host Universal Profiling]

The *Universal Profiling* tab shows CPU usage down to the application code level.
From here, you can find the sources of resource usage, and identify code that can be optimized to reduce infrastructure costs.
The Universal Profiling tab has the following views.

|===

| *Flamegraph* | A visual representation of the functions that consume the most resources. Each rectangle represents a function. The rectangle width represents the time spent in the function. The number of stacked rectangles represents the stack depth, or the number of functions called to reach the current function.

| *Top 10 Functions* | A list of the most expensive lines of code on your host. See the most frequently sampled functions, broken down by CPU time, annualized CO2, and annualized cost estimates.

|===

For more on Universal Profiling, refer to the <<universal-profiling, Universal Profiling>> docs.

====

[%collapsible]
.*Logs*
====

[role="screenshot"]
image::images/logs-overlay.png[Host logs]

The *Logs* tab displays logs relating to the host that you have selected. By default, the logs tab displays the following columns.

|===

| *Timestamp* | The timestamp of the log entry from the `timestamp` field.

| *Message* | The message extracted from the document.
The content of this field depends on the type of log message.
If no special log message type is detected, the {ecs-ref}/ecs-base.html[Elastic Common Schema (ECS)]
base field, `message`, is used.

|===

You can customize the logs view by adding a column for an arbitrary field you would like
to filter by. For more information, refer to <<customize-stream-page,Customize Stream>>.
To view the logs in the {logs-app} for a detailed analysis, click *Open in Logs*.
====

[%collapsible]
.*Anomalies*
====

[role="screenshot"]
image::images/anomalies-overlay.png[Anomalies]

The *Anomalies* table displays a list of each single metric {anomaly-detect} job for the specific host. By default, anomaly
jobs are sorted by time, showing the most recent jobs first.

Along with the name of each anomaly job, detected anomalies with a severity score equal to 50, or higher, are listed. These
scores represent a severity of "warning" or higher in the selected time period. The *summary* value represents the increase between
the actual value and the expected ("typical") value of the host metric in the anomaly record result.

To drill down and analyze the metric anomaly, select *Actions -> Open in Anomaly Explorer* to view the
{ml-docs}/ml-gs-results.html[Anomaly Explorer in {ml-app}]. You can also select *Actions -> Show in Inventory* to view the host
Inventory page, filtered by the specific metric.
====

[%collapsible]
.*Osquery*
====

[IMPORTANT]
=====
You must have an active {fleet-guide}/elastic-agent-installation.html[{agent}] with an assigned agent policy
that includes the {integrations-docs}/osquery_manager.html[Osquery Manager]
integration and have Osquery {kibana-ref}/kibana-privileges.html[{kib} privileges] as a user.
=====

[role="screenshot"]
image::images/osquery-overlay.png[Osquery]

The *Osquery* tab allows you to build SQL statements to query your host data.
You can create and run live or saved queries against
the {agent}. Osquery results are stored in {es}
so that you can use the {stack} to search, analyze, and
visualize your host metrics. To create saved queries and add scheduled query groups,
refer to {kibana-ref}/osquery.html[Osquery].

//TODO: Get updated screen capture and make sure the example query is desribed in text
//In the example above, we query for the top 5 memory hogs running on the host.
//Under the *Results* tab, the total virtual memory size (`total_size` renamed to
//`memory_used` to be a little more user friendly) is returned in descending order,
//along with the process ID (`pid`), and the process path (`name`).

To view more information about the query, click the *Status* tab. A query status can result in
`success`, `error` (along with an error message), or `pending` (if the {agent} is offline).

Other options include:

* View in Discover to search, filter, and view information about the structure of host metric fields. To learn more, refer to {kibana-ref}/discover.html[Discover].
* View in Lens to create visualizations based on your host metric fields. To learn more, refer to {kibana-ref}/lens.html[Lens].
* View the results in full screen mode.
* Add, remove, reorder, and resize columns.
* Sort field names in ascending or descending order.
====
