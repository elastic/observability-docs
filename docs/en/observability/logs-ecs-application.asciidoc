[[logs-ecs-application]]
= ECS formatted application logs

Logs formatted in Elastic Common Schema (ECS) don't require manual parsing, and the configuration can be reused across applications. ECS-formatted logs, when paired with an {apm-agent}, allow you to correlate logs to easily view logs that belong to a particular trace.

You can format your logs in ECS format the following ways:

* <<ecs-loggers>>: plugins for your logging libraries that reformat your logs into ECS format.
* <<apm-agent-ecs-reformatting>>: Java, Ruby, and Python {apm-agent}s automatically reformat application logs to ECS format without a logger.

[discrete]
[[ecs-loggers]]
= ECS loggers

ECS loggers reformat your application logs into ECS-compatible JSON, removing the need for manual parsing.
ECS loggers require {filebeat} or {agent} configured to monitor and capture application logs.
In addition, pairing ECS loggers with your framework's {apm-agent} allows you to correlate logs to easily view logs that belong to a particular trace.

[discrete]
[[get-started-ecs-logging]]
== Get started with ECS loggers

For more information on adding an ECS logger to your application, refer to the guide for your framework:

* {ecs-logging-dotnet-ref}/setup.html[.NET]
* Go: {ecs-logging-go-zap-ref}/setup.html[zap], {ecs-logging-go-logrus-ref}/setup.html[logrus]
* {ecs-logging-java-ref}/setup.html[Java]
* Node.js: {ecs-logging-nodejs-ref}/morgan.html[morgan], {ecs-logging-nodejs-ref}/pino.html[pino], {ecs-logging-nodejs-ref}/winston.html[winston]
* {ecs-logging-php-ref}/setup.html[PHP]
* {ecs-logging-python-ref}/installation.html[Python]
* {ecs-logging-ruby-ref}/setup.html[Ruby]

[discrete]
[[apm-agent-ecs-reformatting]]
= APM agent ECS reformatting

Java, Ruby, and Python {apm-agent}s can automatically reformat application logs to ECS format without an ECS logger or the need to modify your application. The {apm-agent} also allows for log correlation so you can easily view logs that belong to a particular trace.

To set up log ECS reformatting:

. <<enable-log-ecs-reformatting,Enable {apm-agent} reformatting>>
. <<ingest-ecs-logs,Ingest logs with {filebeat} or {agent}>>
. <<view-ecs-logs,View logs in Log Explorer>>

[discrete]
[[enable-log-ecs-reformatting]]
== Enable log ECS reformatting

Log ECS reformatting is controlled by the `log_ecs_reformatting` configuration option, and is disabled by default. Refer to the guide for your framework for information on enabling:

* {apm-java-ref}/config-logging.html#config-log-ecs-reformatting[Java]
* {apm-ruby-ref}/configuration.html#config-log-ecs-formatting[Ruby]
* {apm-py-ref}/configuration.html#config-log_ecs_reformatting[Python]

[discrete]
[[ingest-ecs-logs]]
== Ingest logs

After enabling log ECS reformatting, send your application logs to your project using one of the following shipping tools:

* <<ingest-ecs-logs-with-filebeat, {filebeat}>>: A lightweight data shipper that sends log data to your project.
* <<ingest-ecs-logs-with-agent, {agent}>>: A single agent for logs, metrics, security data, and threat prevention. With Fleet, you can centrally manage {agent} policies and lifecycles directly from your project.

[discrete]
[[ingest-ecs-logs-with-filebeat]]
=== Ingest logs with {filebeat}

Follow these steps to ingest application logs with {filebeat}.

[discrete]
[[step-1-ecs-install-filebeat]]
=== Step 1: Install {filebeat}

Install {filebeat} on the server you want to monitor by running the commands that align with your system:

include::tab-widgets/logs/filebeat-install-widget.asciidoc[]

[discrete]
[[step-2-ecs-connect-to-your-project]]
=== Step 2: Connect to your project

Connect to your project using an API key to set up {filebeat}. Set the following information in the `filebeat.yml` file:

[source,yaml]
----
output.elasticsearch:
  hosts: ["your-projects-elasticsearch-endpoint"]
  api_key: "id:api_key"
----

. Set the `hosts` to your deployment's {es} endpoint. Copy the {es} endpoint from *Help menu (image:images/help-icon.png[]) â†’ Connection details*. For example, `https://my-deployment.es.us-central1.gcp.cloud.es.io:443`.
. From **Developer tools**, run the following command to create an API key that grants `manage` permissions for the `cluster` and the `filebeat-*` indices using:
+
[source,console]
----
POST /_security/api_key
{
  "name": "filebeat_host001",
  "role_descriptors": {
    "filebeat_writer": {
      "cluster": ["manage"],
      "index": [
        {
          "names": ["filebeat-*"],
          "privileges": ["manage"]
        }
      ]
    }
  }
}
----
+
Refer to {filebeat-ref}/beats-api-keys.html[Grant access using API keys] for more information.

[discrete]
[[step-3-ecs-configure-filebeat]]
=== Step 3: Configure {filebeat}

Add the following configuration to your `filebeat.yaml` file to start collecting log data.

[source,yaml]
----
filebeat.inputs:
- type: filestream  <1>
  enabled: true
  paths: /path/to/logs.log  <2>
----
<1> Reads lines from an active log file.
<2> Paths that you want {filebeat} to crawl and fetch logs from.

[discrete]
[[step-4-ecs-set-up-and-start-filebeat]]
=== Step 4: Set up and start {filebeat}

From the {filebeat} installation directory, set the {ref}/index-templates.html[index template] by running the command that aligns with your system:

include::tab-widgets/logs/filebeat-setup-widget.asciidoc[]

From the {filebeat} installation directory, start filebeat by running the command that aligns with your system:

include::{observability-docs-root}/docs/en/shared/copied-from-beats/start-filebeat/start-widget-filebeat.asciidoc[]

[discrete]
[[ingest-ecs-logs-with-agent]]
=== Ingest logs with {agent}

Add the custom logs integration to ingest and centrally manage your logs using {agent} and {fleet}:

[discrete]
[[step-1-add-the-custom-logs-integration-to-your-project-ecs]]
=== Add the custom logs integration to your project

To add the custom logs integration to your project:

. From your deployment's home page, click **Add Integrations**.
. Type `custom` in the search bar and select **Custom Logs**.
. Click **Install {agent}** at the bottom of the page, and follow the instructions for your system to install the {agent}.
. After installing the {agent}, click **Save and continue** to configure the integration from the **Add Custom Logs integration** page.
. Give your integration a meaningful name and description.
. Add the **Log file path**. For example, `/var/log/your-logs.log`.
. Click **Advanced options**.
. In the **Processors** text box, add the following YAML configuration to add processors that enhance your data. Refer to {filebeat-ref}/filtering-and-enhancing-data.html[processors] to learn more.
+
[source,yaml]
----
processors:
  - add_host_metadata: \~
  - add_cloud_metadata: \~
  - add_docker_metadata: \~
  - add_kubernetes_metadata: \~
----
. Under **Custom configurations**, add the following YAML configuration to collect data.
+
[source,yaml]
----
  json:
    overwrite_keys: true <1>
    add_error_key: true <2>
    expand_keys: true <3>
    keys_under_root: true <4>
  fields_under_root: true <5>
  fields:
    service.name: your_service_name <6>
    service.version: your_service_version <6>
    service.environment: your_service_environment <6>
----
+
<1> Values from the decoded JSON object overwrite the fields that {agent} normally adds (type, source, offset, etc.) in case of conflicts.
<2> {agent} adds an "error.message" and "error.type: json" key in case of JSON unmarshalling errors.
<3> {agent} will recursively de-dot keys in the decoded JSON, and expand them into a hierarchical object structure.
<4> By default, the decoded JSON is placed under a "json" key in the output document. When set to `true`, the keys are copied top level in the output document.
<5> When set to `true`, custom fields are stored as top-level fields in the output document instead of being grouped under a fields sub-dictionary.
<6> The `service.name` (required), `service.version` (optional), and `service.environment` (optional) of the service you're collecting logs from, used for log correlation.
. Give your agent policy a name. The agent policy defines the data your {agent} collects.
. Save your integration to add it to your deployment.

[discrete]
[[view-ecs-logs]]
= View logs

Refer to the <<logs-filter-and-aggregate>> documentation for more information on viewing and filtering your logs in {kib}.