:tutorial: tutorial
:gcp: GCP

[[monitor-gcp]]
== Monitor Google Cloud Platform

In this tutorial, you'll learn how to monitor your Google Cloud Platform ({gcp})
deployments using Elastic Observability: Logs and Metrics.

[discrete]
=== What you'll learn

You'll learn how to:

- Setup a {gcp} Service Account
- Ingest metrics using the {metricbeat-ref}/metricbeat-module-gcp.html[Metricbeat
Google Cloud Platform module] and view your logs in {kib}.
- Ingest logs using the {filebeat-ref}/filebeat-module-gcp.html[Filebeat
Google Cloud module] and view your logs in {kib}.

[discrete]
=== Before you begin

Create a deployment using our hosted {ess} on {ess-trial}[{ecloud}].
The deployment includes an {es} cluster for storing and searching your data
and {kib} for visualizing and managing your data.
For more information, see <<spin-up-stack,Spin up the Elastic Stack>>.

[discrete]
=== Step 1: Setup a Service Account

Google Cloud Platform implements https://cloud.google.com/compute/docs/access/service-accounts[service
accounts] as a way to securely access APIs. In order to monitor {gcp} with
Elastic you will need a service account. The easiest way is to use a predefined
service account that {gcp} https://cloud.google.com/compute/docs/access/service-accounts?hl=en#default_service_account[creates automatically].
Alternatively you can create a new service account.
This {tutorial} creates a new one:

First, access the service account menu by clicking on
_Menu -> IAM & Admin -> Service Accounts_.

image::monitor-gcp-service-account-menu.png[Service account menu]

Next, click on _Create Service Account_. Then, define the new service account
name (for example, _gcp-monitor_) and the description (for example, "Service
account to monitor {gcp} services using the Elastic Stack").

image::monitor-gcp-service-account-name.png[Service account name]

[IMPORTANT]
====
This next step is very important, so make sure to click on the correct roles.
====

In order to monitor {gcp} services you need to add two main roles to the
service account:

_Compute Viewer_:

image::monitor-gcp-service-account-roles-compute-viewer.png[Service account roles compute viewer]

_Monitoring Viewer_:

image::monitor-gcp-service-account-roles-monitoring-viewer.png[Service account roles monitoring viewer]

The final result should be the following:

image::monitor-gcp-service-account-roles-final.png[Service account roles result]

Click on _continue_, then skip granting users access to this service. Finally, 
click on _done_ and the service account will be ready to be used.

Next, in order to use the service account click on create keys and create the
JSON key type.

image::monitor-gcp-service-account-create-key.png[Service account create key]

After clicking on create key, the credential file is downloaded. Keep this file
in a accessible place to use later.

[discrete]
=== Step 2: Install and configure {metricbeat}

In order to monitor {gcp} using the Elastic Stack you need two main components:
an Elastic deployment to store and analyze the data and an agent to collect
and ship the data.

[NOTE]
====
This {tutorial} assumes the Elastic cluster is already running and ready
to be used. Make sure you have your *cloudid* and your *credentials* in hand.
====

There are two agents that can be used to monitor {gcp}. {metricbeat} is used to
monitor metrics and {filebeat} to monitor logs. You can run the agents in any
machine. This {tutorial} uses a small {gcp} instance, e2-small (2 vCPUs,
2 GB memory), with an Ubuntu distribution.

[discrete]
==== Install metricbeat

After starting and connecting to the GCP instance, download and install
{metricbeat}.

include::{beats-repo-dir}/tab-widgets/install-widget-metricbeat.asciidoc[]

[discrete]
==== Set up assets

Metricbeat comes with predefined assets for parsing, indexing, and visualizing
your data. Run the following command to load these assets.
It may take a few minutes.

[source,bash]
----
./metricbeat setup -e -E 'cloud.id=YOUR_DEPLOYMENT_CLOUD_ID' -E 'cloud.auth=elastic:YOUR_SUPER_SECRET_PASS'
----

[IMPORTANT]
====
Setting up Metricbeat is an admin-level task that requires extra privileges.
As a best practice, https://www.elastic.co/guide/en/beats/metricbeat/7.11/privileges-to-setup-beats.html[use an administrator role to set up]
and a more restrictive role for event publishing (which you will do next).
====

[discrete]
==== Configure {metricbeat} output

Next, you are going to configure {metricbeat} output to {ess}.

. Use the {metricbeat} keystore to store
{metricbeat-ref}/keystore.html[secure settings].
Store the Cloud ID in the keystore.
+
[NOTE]
=====
Substitute the Cloud ID from your deployment in the following command. To find
your Cloud ID Click on your deployment in https://cloud.elastic.co/deployments
=====
+
[source,bash]
----
./metricbeat keystore create
echo -n "<Your Deployment Cloud ID>" | ./metricbeat keystore add CLOUD_ID --stdin
----

. To store metrics in {es} with minimal permissions, create an API key to send
data from {metricbeat} to {ess}. Log into Kibana (you can do so from the Cloud
Console without typing in any permissions) and select *Management* -> *Dev
Tools*. Then, send the following request:
+
[source,console]
----
POST /_security/api_key
{
  "name": "metricbeat-monitor-gcp",
  "role_descriptors": {
    "metricbeat_writer": {
      "cluster": ["monitor", "read_ilm"],
      "index": [
        {
          "names": ["metricbeat-*"],
          "privileges": ["view_index_metadata", "create_doc"]
        }
      ]
    }
  }
}
----

. The response contains an `api_key` and an `id` field, which can be stored in
the {metricbeat} keystore in the following format: `id:api_key`.
+
[source,bash]
----
echo -n "IhrJJHMB4JmIUAPLuM35:1GbfxhkMT8COBB4JWY3pvQ" | ./metricbeat keystore add ES_API_KEY --stdin
----
+
[NOTE]
=====
Make sure you specify the `-n` parameter; otherwise, you will have
painful debugging sessions, due to adding a newline at the end of
your API key.
=====

. To see if both settings have been stored, run `./metricbeat keystore list`.

. Then, configure {metricbeat} to output to {ess}. Edit the `metricbeat.yml`
configuration file and add the following lines to the end of the file.
+
[source,bash]
----
cloud.id: ${CLOUD_ID}
output.elasticsearch:
  api_key: ${ES_API_KEY}
----

. Finally, test if the configuration is working. If it is not working,
verify if you used the right credentials and add them again.
+
[source,bash]
----
./metricbeat test output
----

Now that the output is working you are going to setup the input (GCP).

[discrete]
==== Configure {metricbeat} Google Cloud Platform module

In order to collect metrics from Google Cloud Platform, use the
https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-googlecloud.html[Google Cloud Platform]
module. This module periodically fetches monitoring metrics from Google Cloud
Platform using
https://cloud.google.com/monitoring/api/metrics_gcp[Stackdriver Monitoring API]
for Google Cloud Platform services.

[WARNING]
====
Extra GCP charges on Stackdriver Monitoring API requests may be generated by
this module. Please see
https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-module-googlecloud.html#gcp-api-requests[rough estimation of the number of API calls]
for more details.
====

. First, enable the GCP module.
+
[source,bash]
----
./metricbeat modules enable gcp
----

. Next, edit the `modules.d/gcp.yml` file to configure which metrics to
collect.
+
[source,yml]
----
- module: googlecloud
  metricsets:
    - compute <1>
  zone: "" <2>
  project_id: "elastic-education" <3>
  period: 1m <4>
  credentials_file_path: "/home/ubuntu/credentials.json" <5>
----
+
<1> The `compute` metricset is a predefined metricset that collects some
GCP compute metrics.
<2> Defines which zones to monitor, an empty value collects data from *all* zones
<3> Collects metrics within the `elastic-education` project-id.
<4> Collects metrics every minute
<5> The GCP credential file that you generated earlier. (Don't forget to create
the file if it does not exist and to use the correct full path).

. Now, test the input to check if {metricbeat} can collect data.
[source,bash]
+
----
./metricbeat test input
----

. Input and output are ready. Next, start {metricbeat} to collect the data.
+
[source,bash]
----
./metricbeat -e
----

. Finally, go to Kibana and open the "[Metricbeat Googlecloud] Compute Overview"
dashboard.
+
image:monitor-gcp-compute-overview-dashboard.png[Compute overview dashboard]

// Add Javascript and CSS for tabbed panels
include::{beats-repo-dir}/tab-widgets/code.asciidoc[]
