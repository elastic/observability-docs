[[synthetic-run-tests]]
= Run synthetic tests

++++
<titleabbrev>Run synthetic tests</titleabbrev>
++++

There are two ways to run synthetic tests:

* If you want to create a single journey and manage it in isolation from monitors containing other journeys,
<<synthetics-inline-journey,use an inline journey>>.
Inline journeys can be more efficient, but have some limitations like not supporting dependencies or multiple journeys.
* If you have multiple journeys, rely on dependencies, or your tests need to live with your
application code, <<synthetics-test-suite,use a test suite>>.

[discrete]
[[synthetics-inline-journey]]
== Use an inline journey

The easiest way to run a synthetic test is by creating an inline journey.
The `journey` keyword isn't required, and access to variables like `page` and `params` is automatic.
You cannot `import` any dependencies using inline scripts.

To test an inline example locally, change into your test's directory
and pipe the file contents to the `npx @elastic/synthetics` command.

For example, create a `sample.js` file containing steps:

[source,js]
----
step('load homepage', async () => {
    await page.goto('https://www.elastic.co');
});
step('hover over products menu', async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

Then test the sample file:

[source,sh]
----
cat path/to/sample.js | npx @elastic/synthetics --inline
----

And you'll get a response similar to:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----

After testing locally, you can copy the script into your
Elastic Synthetics integration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add an inline journey when configuring the Elastic Synthetics integration.
In Monitor settings, use Monitor Type "Browser" and switch the Source Type to "Inline script".
See <<synthetics-quickstart-fleet>> for details.
* **{heartbeat}**: Copy and paste your test steps into `heartbeat.yml`.
{heartbeat} spawns a separate Node.js process, schedules your tests, and runs them on a Chromium browser.
See <<synthetics-quickstart-step-two>> for details.

[discrete]
[[synthetics-test-suite]]
== Use a test suite

If you have a suite of tests to implement, you can use Elastic Synthetics as a library.
In this method, you use Docker to run both {heartbeat} and `elastic-synthetics`.

To test an inline example locally, start by installing the `@elastic/synthetics` package globally:

[source,sh]
----
npm install -g @elastic/synthetics
----

Then write your tests:

. Create a new https://docs.npmjs.com/cli/v7/commands/npm-init[NPM/Node.js project].
. Create a `javascript` or `typescript` file that imports your tests.
All synthetic test files must use the `.journey.ts` or `.journey.js` file extension.
. Make sure any dependencies are defined with an `import` outside of the `journey` object.
. Compile everything together.

Find examples in the https://github.com/elastic/synthetics[elastic/synthetics] repository.
If you'd like to test an example locally, clone the repository and install the example:

[source,sh]
----
# Check out the synthetics repo and included examples
git clone git@github.com:elastic/synthetics.git &&\
cd synthetics/examples/todos/ &&\
# Install all required dependencies for the todos example
npm install
----

You are now inside the synthetics test suite, which is also an NPM project.
From this folder, you can run the provided tests.
By default only files matching the filename `*.journey.(ts|js)*` will be run.

[source,sh]
----
# Run tests on the current directory. The dot `.` indicates
# that it should run all tests in the current directory.
npx @elastic/synthetics .
----

After testing locally, you can run the test suite using the
Elastic Synthetics integration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add a test suite when configuring the Elastic Synthetics integration.
Use Monitor Type "Browser" and use the Source Type "Zip URL" pointing to a zip file containing the test project.
See <<synthetics-quickstart-fleet>> for details.
* **{heartbeat}**: Copy and paste the path to your zip file into `heartbeat.yml`.
See <<synthetics-quickstart-step-two>> for details.

[discrete]
[[synthetics-ci]]
== Run on CI

In addition to replacing your end-to-end tests locally, you can run a synthetic test suite on your CI environment.

Elastic's synthetics runner can output results in multiple formats, including JSON and JUnit
(the standard format supported by most CI platforms).
If any of your journeys fail, it will yield a non-zero exit code, which most CI systems pick up as a failure. 

You can see an example using GitHub Actions in the
https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics-demo] repository.
This example sets up a job that executes the synthetics runner and tells the runner to yield results in a JUnit format.