[[synthetic-run-tests]]
= Create a synthetic monitor

beta[]

Once you've <<synthetics-create-test, written a synthetic test>>, you can create a _monitor_ to run the test at a regular interval. You can either use <<synthetic-monitor-choose-project,project monitors>> to create monitors from an external source or copy simple journey code into the monitor's configuration to create <<synthetics-inline-journey,inline browser monitors>>.

[discrete]
[[synthetic-monitor-choose-project]]
== Project monitors

Use the `@elastic/synthetics` library's `push` command to create monitors.
Pushing your project creates a new browser monitor in {kib} for each journey in the project. Using the `push` command allows you to manage all browser monitors using a GitOps workflow. Alternatively, you could keep monitors in sync directly from your local development environment.

// pros
We recommend users adopt a GitOps workflow when using project monitors because it allows teams to keep their monitors in sync with their project's `main` branch.
Besides saving time through automation, a GitOps workflow allows users to take advantage of PR reviews and checks that could validate journeys even before they are merged.

Project monitors also allow teams to configure individual monitors through code. Instead of using {kib} to update a monitor's schedule, for example, you can set a `schedule` directly in your journey. That `schedule` will be used when pushing the journey to {kib}.

To configure default settings, you can use a global Synthetics configuration file.

[discrete]
[[monitor-use]]
== Configure monitor

When you're ready to create a browser monitor to run your tests, you'll need to set a few configuration options:

// lint ignore params
* **Give your monitor a name.** Provide a human readable name and a unique ID for the monitor. This will appear in {kib} where you can view and manage monitors after they're created.
* **Set the schedule.** Specify the interval at which your tests will run.
* **Specify where to find the tests.** This will vary based on the method you use to create a monitor.
* **Set other options as needed.** There are several other options you can set to customize your implementation including params, tags, screenshot options, throttling options, and more.

Configure each monitor directly in your test code using `monitor.use`.
The `monitor` API allows you to set unique options for each journey's monitor directly through code.
For example:

[source,js]
----
import { journey, step, monitor, expect } from '@elastic/synthetics';

journey('Ensure placeholder is correct', ({ page, params }) => {
  monitor.use({
    id: 'example-monitor',
    schedule: 10,
    throttling: {
      download: 10,
      upload: 5,
      latency: 100,
    },
  });
  step('Load the demo page', async () => {
    await page.goto('https://elastic.github.io/synthetics-demo/');
  });
  step('Assert placeholder text', async () => {
    const placeholderValue = await page.getAttribute(
      'input.new-todo',
      'placeholder'
    );
    expect(placeholderValue).toBe('What needs to be done?');
  });
});
----

For each journey, you can specify its `schedule` and the `locations` in which it runs.
When those options are not set, Synthetics will use the default values in the global configuration file.
For more details, see <<synthetics-configuration>>.

Here are all the available `monitor` configuration options:

`id` (`string`)::
A unique identifier for this monitor.
`name` (`string`)::
A human readable name for the monitor.
`tags` (`Array<string>`)::
A list of tags that will be sent with the monitor event. Tags are displayed in the {uptime-app} and allow you to search monitors by tag.
`schedule` (`number`)::
At which interval to run the test in seconds.
`enabled` (`boolean`)::
Enable or disable the monitor from running without deleting and recreating it.
`locations` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/locations/public-locations.ts#L28-L37[`Array<SyntheticsLocationsType>`])::
Where to deploy the monitor. Monitors can be deployed in multiple locations so that you can detect differences in availability and response times across those locations.
`throttling` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/common_types.ts#L194-L198[`ThrottlingOptions`])::
Control the monitor's download speeds, upload speeds, and latency to simulate your application's behavior on slower or laggier networks.
`screenshot` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/common_types.ts#L192[`ScreenshotOptions`])::
Control whether or not to capture screenshots. Options include `'on'`, `'off'`, or `'only-on-failure'`.
`privateLocations` (`Array<string>`)::
The <<private-locations,private locations>> to which the monitors will be deployed. These private locations refer to locations hosted and managed by you, whereas 
<<global-managed-testing-infrastructure,`locations`>> are hosted by Elastic. You can specify a private location using the location's name.

[discrete]
[[monitor-create]]
== Create monitor in {kib}

After setting configuration options, use the `push` command to create monitors and start collecting data.
The `push` command will create a monitor in {kib} for each local journey 
so you manage all the browser monitors from your local environment.

Push journeys to {kib} using:

[source,sh]
----
npx @elastic/synthetics push --auth <api-key> --url <kibana-url> --project <id|name>
----

To generate an API key:

. Go to **Monitor Management** in the {uptime-app}.
. Click **API Keys**.
. Click **Generate API key**.

image::images/synthetics-monitor-management-api-key.png[API Keys tooltip on the Uptime app's Monitor Management page]

NOTE: If you are pushing to a <<private-locations,private location>>, you must use an API key generated in 8.4 or higher.

For more details on using the `push` command, see <<elastic-synthetics-push-command>>.

One monitor will appear on the **Monitor management** page for each journey.

[discrete]
[[synthetics-inline-journey]]
== Create an inline monitor

Alternatively, you can create an _inline_ monitor.

An inline monitor is a single journey that you manage individually.
Inline monitors can be quick to set up, but can also be more difficult to manage.
Each inline monitor can contain only _one_ journey, which must be maintained directly in {kib} or in your {heartbeat} configuration file.

If you depend on external packages, have your journeys next to your code repository, or wish to embed and manage more than one journey from a single monitor configuration, see <<monitor-use>> instead.

When writing an inline monitor, the `journey` keyword isn't required, and variables like `page` and `params` will be part of your script's scope. 

There are two ways to create a browser monitor: {heartbeat} and {agent}. To create an inline monitor, copy the steps from inside a journey and paste them into either your `heartbeat.yml` or  Elastic Synthetics integration:

--
include::tab-widgets/uptime-monitoring/run-test-inline-widget.asciidoc[]
--

[discrete]
[[synthetics-ci]]
== Run on CI

You can also run a synthetic project on your CI environment. Elastic's synthetics runner can output results in a few different formats, including JSON and JUnit
(the standard format supported by most CI platforms).

If any of your journeys fail, the synthetics agent it will yield a non-zero exit code, which most CI systems pick up as a failure by default.

You can see an example using GitHub Actions in the
https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics-demo] repository.
This example sets up a job that executes the synthetics runner and tells the runner to yield results in a JUnit format.