[[synthetic-run-tests]]
= Run synthetic tests

++++
<titleabbrev>Run synthetic tests</titleabbrev>
++++

There are two ways to run synthetic tests:

* If you want to create a single journey and manage it individually, <<synthetics-inline-journey,use an inline monitor>>.
Inline monitors can be more efficient, but have some limitations like not supporting dependencies or more than one journey.
* If you have more than one journey, rely on dependencies, or your tests need to live with your
application code, <<synthetics-test-suite,use a test suite>>.

[discrete]
[[synthetics-inline-journey]]
== Use an inline monitor

Inline monitors are quick and easy to set up.
To create one, you can copy a journey's content, paste it into Kibana or your {heartbeat} configuration, and save.
Variables like `page` and `params` will be part of your script's scope.
However, this type of monitor does not allow you to import third-party packages.

Inline monitors can also be more difficult to manage because each inline monitor can contain only _one_ journey, which must be maintained from within Kibana.
If you depend on external packages, have your journeys next to your code repository, or wish to embed and manage more than one journey from a single monitor configuration <<synthetics-test-suite,use a test suite>>.

[discrete]
[[synthetics-inline-journey-local]]
=== Test locally

To test the inline monitor's journey locally, change into your test's directory
and pipe the journey's contents to the `npx @elastic/synthetics` command.

Assume, for example, that your inline monitor contains the following code:

[source,js]
----
step('load homepage', async () => {
    await page.goto('https://www.elastic.co');
});
step('hover over products menu', async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

To run that journey locally, you can save that code to a file and pipe the file's contents into `@elastic-synthetics`:

[source,sh]
----
cat path/to/sample.js | npx @elastic/synthetics --inline
----

And you'll get a response like the following:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----

[discrete]
[[synthetics-inline-journey-send]]
=== Send to {stack}

After testing locally, you can copy the script into your Elastic Synthetics integration or `heartbeat.yml`
depending on <<uptime-set-up-choose,the approach you chose>>.

--
include::tab-widgets/uptime-monitoring/run-test-inline-widget.asciidoc[]
--

[discrete]
[[synthetics-test-suite]]
== Use a test suite

If you have a suite of tests, you can use the `@elastic/synthetics` package as a library.

To test an test suite locally, start by writing your tests:

. Create a new https://docs.npmjs.com/cli/v7/commands/npm-init[NPM/Node.js project].
. Create a `javascript` or `typescript` file that imports your tests.
All synthetic test files must use the `.journey.ts` or `.journey.js` file extension.
. Make sure any dependencies are defined with an `import` outside of the `journey` object.
. Compile everything together.

To see an example of a test suite, see the https://github.com/elastic/synthetics[elastic/synthetics] repository.
You can use the `todo` directory if you'd like to test an example locally.
Clone the repository, change into the directory containing the synthetics test suite,
and install the necessary dependencies including `@elastic/synthetics`:

[source,sh]
----
# Check out the synthetics repo and included examples
git clone git@github.com:elastic/synthetics.git &&\
cd synthetics/examples/todos/ &&\
# Install all required dependencies for the todos example
npm install
----

[NOTE]
==============
If you want to test your own suite locally, be sure to install the `@elastic/synthetics` package:

[source,sh]
----
npm install -g @elastic/synthetics
----
==============

From inside the directory containing the synthetics test suite you can run the provided tests.
By default, the `elastic-synthetics` runner will only run files matching the filename `*.journey.(ts|js)*`.

[source,sh]
----
# Run tests on the current directory. The dot `.` indicates
# that it should run all tests in the current directory.
npx @elastic/synthetics .
----

[discrete]
[[synthetics-test-suite-send]]
=== Send to {stack}

After testing locally, you can run the test suite using the Elastic Synthetics integration or {heartbeat}
depending on <<uptime-set-up-choose,the approach you chose>>.

--
include::tab-widgets/uptime-monitoring/run-test-suite-widget.asciidoc[]
--

[discrete]
[[synthetics-ci]]
== Run on CI

Besides running locally as end-to-end tests, you can run a synthetic test suite on your CI environment.

Elastic's synthetics runner can output results in a few different formats, including JSON and JUnit
(the standard format supported by most CI platforms).
If any of your journeys fail, it will yield a non-zero exit code, which most CI systems pick up as a failure. 

You can see an example using GitHub Actions in the
https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics-demo] repository.
This example sets up a job that executes the synthetics runner and tells the runner to yield results in a JUnit format.