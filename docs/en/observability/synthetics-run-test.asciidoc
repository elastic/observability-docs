[[synthetic-run-tests]]
= Run synthetic tests

++++
<titleabbrev>Run synthetic tests</titleabbrev>
++++

There are two ways to run synthetic tests:

* If you want to create a single journey and manage it in isolation from monitors containing other journeys,
<<synthetics-inline-journey,use an inline journey>>.
Inline journeys can be more efficient, but have some limitations like not supporting dependencies or multiple journeys.
* If you have multiple journeys, rely on dependencies, or your tests need to live with your
application code, <<synthetics-test-suite,use a test suite>>.

[discrete]
[[synthetics-inline-journey]]
== Use an inline journey

The easiest way to run a synthetic test is by creating an inline journey.
The `journey` keyword isn't required, and access to variables like `page` and `params` is automatic.
You cannot `import` any dependencies using inline scripts.

To test an inline example locally, change into your test's directory
and pipe the file contents to the `npx @elastic/synthetics` command.

For example, create a `sample.js` file containing steps:

[source,js]
----
step('load homepage', async () => {
    await page.goto('https://www.elastic.co');
});
step('hover over products menu', async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

Then test the sample file:

[source,sh]
----
cat path/to/sample.js | npx @elastic/synthetics --inline
----

And you'll get a response similar to:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----

After testing locally, you can copy the script into your
Elastic Synthetics integration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add an inline journey when configuring the Elastic Synthetics integration.
In Monitor settings, use Monitor Type "Browser" and switch the Source Type to "Inline script".
See <<uptime-set-up>> for details.
* **{heartbeat}**: Copy and paste your test steps into `heartbeat.yml`.
{heartbeat} spawns a separate Node.js process, schedules your tests, and runs them on a Chromium browser.
See <<uptime-set-up-config>> for details.

// heartbeat
//
// [source,yml]
// ----
// - type: browser
//   id: elastic-website <1>
//   name: Elastic website
//   schedule: "@every 1m"
//   source:
//     inline:
//       script: |- <2>
//       step("load homepage", async () => {
//         await page.goto('https://www.elastic.co');
//       });
//       step("hover over products menu", async () => {
//         await page.hover('css=[data-nav-item=products]');
//       });
// ----
// <1> Each `monitor` gets its own ID in the {uptime-app} and, therefore its own schedule entry.
// This allows tests to be run in parallel and analyzed separately.
// <2> In this example, a synthetic test is defined inline. This is a two-step script that first loads
// a homepage and then hovers over a product menu. See <<synthetics-syntax>> for more information.


[discrete]
[[synthetics-test-suite]]
== Use a test suite

If you have a suite of tests to implement, you can use Elastic Synthetics as a library.
In this method, you use Docker to run both {heartbeat} and `elastic-synthetics`.

To test an inline example locally, start by installing the `@elastic/synthetics` package globally:

[source,sh]
----
npm install -g @elastic/synthetics
----

Then write your tests:

. Create a new https://docs.npmjs.com/cli/v7/commands/npm-init[NPM/Node.js project].
. Create a `javascript` or `typescript` file that imports your tests.
All synthetic test files must use the `.journey.ts` or `.journey.js` file extension.
. Make sure any dependencies are defined with an `import` outside of the `journey` object.
. Compile everything together.

Find examples in the https://github.com/elastic/synthetics[elastic/synthetics] repository.
If you'd like to test an example locally, clone the repository and install the example:

[source,sh]
----
# Check out the synthetics repo and included examples
git clone git@github.com:elastic/synthetics.git &&\
cd synthetics/examples/todos/ &&\
# Install all required dependencies for the todos example
npm install
----

You are now inside the synthetics test suite, which is also an NPM project.
From this folder, you can run the provided tests.
By default only files matching the filename `*.journey.(ts|js)*` will be run.

[source,sh]
----
# Run tests on the current directory. The dot `.` indicates
# that it should run all tests in the current directory.
npx @elastic/synthetics .
----

After testing locally, you can run the test suite using the
Elastic Synthetics integration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add a test suite when configuring the Elastic Synthetics integration.
Use Monitor Type "Browser" and use the Source Type "Zip URL" pointing to a zip file containing the test project.
See <<uptime-set-up>> for details.
* **{heartbeat}**: Copy and paste the path to your zip file into `heartbeat.yml`.
See <<uptime-set-up-config>> for details.

// heartbeat
//
// [source,yml]
// ----
// - name: Todos
//   id: todos
//   type: browser
//   schedule: "@every 1m"
//   params:
//     url: "https://elastic.github.io/synthetics-demo/" <1>
//   source:
//     zip_url: <2>
//       url: "https://github.com/elastic/synthetics-demo/archive/refs/heads/main.zip" <3>
//       folder: ""todos/synthetics-tests" <4>
//       username: "" <5>
//       password: "" 
// ----
// <1> The params section lets you define custom parameters to use in your script. In this example the 'url' parameter is used by the test suite to determine which site to test.
// <2> In this example, our library of synthetic tests is downloaded from the
// remote zip endpoint for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. 
// <3> Note that the url refers to the endpoint where the test project exists.
// <4> Folder refers to the relative path where the synthetic journey files are located. {heartbeat} will invoke the synthetics library on this folder.
// <5> Username and password are blank here, but if provided, will be sent as HTTP Basic Authentication headers to the remote zip endpoint.

// agent

// beta[] Elastic Synthetics tests can be configured through {fleet} using the Elastic Synthetics integration. To learn more, see <<add-synthetics-integration,Elastic Synthetics>>.
//
// [role="screenshot"]
// image::images/synthetics-integration.png[Synthetics integration]
//
// In the example above, our library of synthetic tests is downloaded from the
// remote zip endpoint for the git repository for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. 
//
// By using a git repository for synthetics journeys, we can benefit from a GitOps workflow for deploying changes to  synthetic monitors, enabling git features such as pull requests, reverts, etc. for managing tests more effectively.
//
// The fields should be set as follows:
//
// * *Zip URL*: URL pointing to a zip file containing the test project.
// * *Folder*: The folder within the zip file containing synthetics tests. This will be the working directory in which the synthetics agent runs. {heartbeat} will invoke the synthetics library in this folder. 
// * *Params*: JSON formatted dynamic values that may be required by your specific tests. See <<synthetics-params-secrets>> for more information.
// * *Zip URL Username* and *Zip URL Password*: HTTP Basic Authentication headers for the remote zip endpoint. 
//
// [role="screenshot"]
// image::images/synthetics-integration-source-type.png[Set source type and related parameters for a synthetic monitor in Elastic {fleet}]
//
// In the example above, our library of synthetic tests is downloaded from the
// remote zip endpoint for the git repository for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. 
//
// Using a git repository for synthetics journeys allows you to use a GitOps workflow for deploying changes to synthetic monitors,
// enabling git features, like pull requests and reverts, for managing tests more effectively.
//
// Click *Advanced Browser options* to see more ways to configure your monitor including _Throttling options_.
// Set throttling parameters to more accurately control the network speed that the monitor represents.
//
// [role="screenshot"]
// image::images/synthetics-integration-throttling.png[Set throttling parameters for a synthetic monitor in Elastic {fleet}]
//
// When applying the integration policy to an {agent} policy, make sure to select your dedicated synthetics agent policy.
//
// [role="screenshot"]
// image::images/synthetics-agent-policy-select.png[Synthetics integration]


[discrete]
[[synthetics-ci]]
== Run on CI

In addition to replacing your end-to-end tests locally, you can run a synthetic test suite on your CI environment.

Elastic's synthetics runner can output results in multiple formats, including JSON and JUnit
(the standard format supported by most CI platforms).
If any of your journeys fail, it will yield a non-zero exit code, which most CI systems pick up as a failure. 

You can see an example using GitHub Actions in the
https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics-demo] repository.
This example sets up a job that executes the synthetics runner and tells the runner to yield results in a JUnit format.