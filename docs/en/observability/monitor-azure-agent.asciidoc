[[monitor-azure-elastic-agent]]
== Monitor Microsoft Azure with {agent}

****
**New to Elastic?** Follow the steps in our {estc-welcome}/getting-started-observability.html[getting started guide] instead
of the steps described here. Return to this tutorial after you've learned the
basics.

**Using the native Azure integration from the marketplace?** Refer to
<<monitor-azure-native>>.
****

In this tutorial, youâ€™ll learn how to deploy {agent} and monitor your Azure
infrastructure with Elastic {observability}.

[discrete]
[[azure-elastic-agent-what-you-learn]]
=== What you'll learn

You'll learn how to:

* Create an Azure service principal with permissions to read monitoring data.
* Collect Azure billing metrics.
* Collect Azure activity logs.
* Visualize the logs and infrastructure metrics in {kib}.

//NOTE: Active directory logs are harder to capture because they require a
//permission level my Azure user doesn't have. Will try capturing activity logs
//for now and see how that goes.

[discrete]
[[azure-collect-metrics]]
=== Step 1: Create an Azure service principal

In this step, you create an Azure service principal and then grant them access
to use the Azure Monitor REST API.

The https://docs.microsoft.com/en-us/rest/api/monitor/[Azure Monitor REST API]
allows you to get insights into your Azure resources using different operations.
To access the Azure Monitor REST API, you need to use the Azure Resource Manager
authentication model. Therefore, you must authenticate all requests with Azure
Active Directory (Azure AD). You can create the service principal using the
https://docs.microsoft.com/en-us/azure/active-directory/develop/howto-create-service-principal-portal[Azure portal] or
https://docs.microsoft.com/en-us/powershell/azure/create-azure-service-principal-azureps?view=azps-2.7.0[Azure PowerShell].
Then, you need to grant access permission, which is detailed
https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles[here].
This tutorial shows how to use the Azure portal.

[discrete]
==== Create an Azure service principal

//QUESTION: Is this still the recommended way to control access? I see this
//note on the Azure page for app registrations, but I don't know if it's
//relevant: "Starting June 30th, 2020 we will no longer add any new features to
//Azure Active Directory Authentication Library (ADAL) and Azure AD Graph. We
//will continue to provide technical support and security updates but we will no
//longer provide feature updates. Applications will need to be upgraded to
//Microsoft Authentication Library (MSAL) and Microsoft Graph." (The link points)

//TODO: Decide whether remaining screen captures are necessary (I've removed
//both of them because they will take extra time to maintain over time.)

. Go to the https://portal.azure.com/[Azure Management Portal]. Search for and
select **Azure Active Directory**.

. In the navigation pane, select **App registrations** and then click
**New registration**.

. Type the name of your application (this tutorial uses
`ingest-tutorial-monitor-azure`) and click **Register** (accept the default
values for other settings).
+
[role="screenshot"]
image::images/agent-tut-azure-register-app.png[Screenshot of the application registration]
+
Copy the **Application (client) ID** and save it for later. This ID is
required to configure {agent} to connect to your Azure account.
+
. In the navigation pane, select **Certificates & secrets**, and then click
**New client secret** to create a new security key.
+
[role="screenshot"]
image::images/agent-tut-azure-click-client-secret.png[Screenshot of adding a new client secret]

. Type a description of the secret and select an expiration. Click **Add** to
create the client secret. Under **Value**, copy the secret value and save it
(along with your client ID) for later.
+
[IMPORTANT]
====
This is your only chance to copy the secret value. You can't retrieve this
value after you leave this page!
====

[discrete]
==== Grant access permission for your service principal

After creating the Azure service principal, you need to grant it the correct
permission. You need `Reader` permission to configure {agent} to monitor
your services.

//TODO: Decide whether we want to document all these steps. It costs us to
//maintain them, but maybe with minimal screen captures it's not that hard. It
//is easier than expecting the user to go to the Azure docs from the tutorial.

. In the Azure Portal, search for and select **Subscriptions**.
. In the Subscriptions page, click the name of your subscription.
. In the navigation pane, select **Access control (IAM)**.
. Click **Add** and select **Add role assignment**.
. On the **Roles** tab, select the **Reader** role, then click **Next**.
. On the **Members** tab, assign access to **User, group, or service principal**.
. Click **Select members**, then search for and select the principal you created
earlier.
. For the description, enter the name of your service principal.
. Click **Next** to review the role assignment:
+
[role="screenshot"]
image::images/agent-tut-azure-add-role-assignment.png[Screen capture of adding a role assignment]

. Click **Review + assign** to grant the service principal access to your
subscription.

//TODO: Verify that Billing Reader is required here ^^ and not just the Reader role.

//TODO: Beats tutorial needs to be updated, too, because these steps ^^ have
//changed in the Azure Portal UI.

//REVIEWERS: I'm starting with metrics collection instead of logs because it seems easier than
//and might give users a better sense of accomplishment right away. We can
//reconsider this after we get the logging section written (I still don't know)
//all the details involved there.

[discrete]
[[elastic-agent-add-azure-integration]]
=== Step 2: Install the Azure Billing Metrics integration

In this step, you install the Azure Billing Metrics integration in {kib} to
collect usage details and forecast information about your subscription.

//TODO: Probably need to add more detail here.

To add the integration: 

. Go to the {kib} home page and click **Add integrations**.
+
[role="screenshot"]
image::images/kibana-home.png[Screenshot of the {kib} home page]

. In the query bar, search for **Azure Billing** and select the Azure Billing
Metrics integration to see more details about it.

. Click **Add Azure Billing Metrics**.

. Under Integration settings, configure the integration name and optionally add
a description.
+
TIP: If you don't see options for configuring the integration, you're probably
in a workflow designed for new deployments. Follow the steps, then return to
this tutorial when you're ready to configure the integration.

. Specify values for all the required fields:
+
[role="screenshot"]
image::images/agent-tut-azure-integration-settings.png[Screenshot of integration settings for Azure]
+
[horizontal]
**Client ID**::
The Application (client) ID that you copied earlier when you created the service
principal. 

**Client secret**:: The secret value that you copied earlier.

**Tenant ID**:: The tenant ID listed on the main Azure Active Directory Page.

**Subscription ID**:: The subscription ID listed on the main Subscriptions page.

. Make sure the **Collect Azure Billing metrics** selector is turned on, and
optionally change the default period to a multiple of 24h.

. Click **Save and continue**. This step takes a minute or two to complete. When
it's done, you'll have an agent policy that contains the Azure configuration you
just specified.

A popup should appear that prompts you to **Add {agent} to your hosts**.

[discrete]
[[azure-elastic-agent-install]]
=== Step 3: Install and run an {agent} on your machine

You can install {agent} on any host that can access the Azure account and forward
events to {es}.

. In the popup, click **Add {agent} to your hosts** to open the **Add agent**
flyout.
+
--
TIP: If you accidentally closed the popup, go to **{fleet} -> Agents**, then
click **Add agent** to access the installation instructions.

--
+
The **Add agent** flyout has two options: **Enroll in {fleet}** and **Run
standalone**. The default is to enroll the agents in {fleet}, as this reduces
the amount of work on the person managing the hosts by providing a centralized
management tool in {kib}.

. The enrollment token you need should already be selected.
+
NOTE: The enrollment token is specific to the {agent} policy that you just
created. When you run the command to enroll the agent in {fleet}, you will pass
in the enrollment token.

. To download, install, and enroll the {agent}, select your host operating
system and copy the installation command shown in the instructions.

. Run the command on the host where you want to install {agent}.

It takes a few minutes for {agent} to enroll in {fleet}, download the
configuration specified in the policy, and start collecting data. You can wait
to confirm incoming data, or close the window.

[discrete]
[[azure-elastic-agent-visualize-metrics]]
=== Step 4: Visualize Azure billing metrics

Now that the metrics are streaming to {es}, you can visualize them in {kib}. In
Kibana, open the main menu and click **Dashboard**. Search for Azure Billing and
select the dashboard called **[Azure Billing] Billing Overview**.

[role="screenshot"]
image::images/agent-tut-azure-billing-dashboard.png[Screenshot of Azure billing overview dashboard]

Keep in mind {agent} collects data every 24 hours.

[discrete]
[[azure-elastic-agent-collect-azure-activity-logs]]
=== Step 5: Collect Azure activity logs

Azure activity logs provide information about subscription-level events, such as
when a resource is modified and who modified it, and when virtual machines are
started (or fail to start). In this step, you configure Azure to export activity
logs to an Azure event hub, then you configure the Azure Logs integration to
read logs from the event hub and send them to {es}.

//Note: Related content about creating event hub is here: https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create

==== Create an event hub for your logs

Azure Event Hubs is a data streaming platform and event ingestion service that
you use to store Azure logs before sending them to {es}. 

Typically you create an event hub for each group of logs you want to collect.
For example, imagine that you want to collect logs from the Azure Monitor
service and the Active Directory service. Rather than sending all logs to a
single event hub, you create an event hub for each service.

//INSERT DIAGRAM

This setup is more efficient than using a single event hub for all logs because
it ensures that you publish only the logs expected by the downstream
integration. This approach saves bandwidth and compute resources because it
avoids unnecessary log processing, and it prevents integrations from
inadvertently creating duplicates. For high-volume deployments, you might even
want to have a dedicated event hub for each data stream.

For this tutorial, however, you create a single event hub for activity logs
collected by the Azure Monitor service.

To create an Azure event hub:

. Create a resource group and namespace as described in
https://learn.microsoft.com/en-us/azure/event-hubs/event-hubs-create[Quickstart: Create an event hub using Azure portal],
or identify an existing resource group and namespace to use.

. In the namespace, create an new event hub.

//QUESTION: Is this true? Do we assume users have already created this?

==== Configure diagnostic settings to send logs to the event hub

Diagnostic settings is an azure component. Every service that creates logs comes
with diagnostic settings. It is reponsible for exporting logs and metrics to an
external destination. 

User who wants to build integration needs to configure diagnostic settings. You can tell to export ProvisionLogs, RiskyUser, UserRiskEvents and send somewhere. Itâ€™s like a bridge.

Send to an event hub. 
Next, you configure diagnostic settings to send the logs for your resource
to the event hub.

==== Configure the Azure Logs integration to collect activity logs


[discrete]
[[azure-elastic-agent-collect-azure-active-directory-logs]]
=== Step 5: Collect Azure Active Directory logs


[discrete]
[[azure-elastic-agent-collect-xyz-metrics]]
=== Step 6: Visualize Azure activity logs




