:aws: AWS

[[deploy-elastic-serverless-forwarder]]
= Deploy Elastic Serverless Forwarder

++++
<titleabbrev>Deploy</titleabbrev>
++++
:keywords: serverless
:description: Deploy the Elastic Serverless Forwarder using Kibana and Amazon's Serverless Application Repository (SAR).

To deploy Elastic Serverless Forwarder, you must perform the following two steps:

. Add {aws} integration in {kib}.
. Deploy function from {aws} SAR (Serverless Application Repository).

[[aws-serverless-forwarder-deploy-kibana]]
== Add {aws} integration in {kib}

. Go to **Integrations** in {kib} and search for {aws} (or select the **{aws}** category to filter the list).
. Click the {aws} integration, select **Settings** and click **Install {aws} assets** to install all the {aws} integration assets.

Adding integrations from {kib} provides appropriate pre-built dashboards, ingest node configurations, and other assets that help you get the most out of the data you ingest. For more information, refer to the {integrations-docs}[Integrations documentation].

// add screenshot?

[[aws-serverless-forwarder-deploy-sar]]
== Deploy elastic-serverless-forwarder from SAR

There are several deployment methods available via {aws} SAR:

* <<aws-serverless-forwarder-deploy-console>>
* <<aws-serverless-forwarder-deploy-cloudformation>>
* <<aws-serverless-forwarder-deploy-terraform>>

[[aws-serverless-forwarder-deploy-console]]
=== Deploy using {aws} Console

. Log in to {aws} console and navigate to the Lambda service.
. Click **Create function**.
. Select **Browse serverless app repository**.
. Select **Public applications**.
. Search for **elastic-serverless-forwarder** and select it from results.
+
[role="screenshot"]
image::images/aws-serverless-forwarder-create-function.png[Create Elastic Serverless Forwarder Lambda function within SAR]
+
. Complete the **Application settings** as follows:
    * `ElasticServerlessForwarderS3ConfigFile`: Set the value of the S3 URL in the format `s3://bucket-name/config-file-name` to the configuration file for your deployment of Elastic Serverless Forwarder. This will populate the `S3_CONFIG_FILE` environment variable of the deployed Lambda.
    * `ElasticServerlessForwarderSSMSecrets` add a comma delimited list of {aws} SSM Secrets ARNs referenced in the config yaml file (if any).
    * `ElasticServerlessForwarderKMSKeys` add a comma delimited list of {aws} KMS Keys ARNs to be used for decrypting {aws} SSM Secrets referenced in the config yaml file (if any).
    * `ElasticServerlessForwarderSQSEvents` add a comma delimited list of Direct SQS queues ARNs to set as event triggers for the Lambda (if any).
    * `ElasticServerlessForwarderS3SQSEvents` add a comma delimited list of S3 SQS Event Notifications ARNs to set as event triggers for the Lambda (if any).
    * `ElasticServerlessForwarderKinesisEvents` add a comma delimited list of Kinesis Data Stream ARNs to set as event triggers for the Lambda (if any).
    * `ElasticServerlessForwarderCloudWatchLogsEvents` add a comma delimited list of Cloudwatch Logs Log Groups ARNs to set subscription filters on the Lambda (if any).
    * `ElasticServerlessForwarderS3Buckets` add a comma delimited list of S3 buckets ARNs that are sources for the S3 SQS Event Notifications (if any).
. After your settings have been added, click **Deploy**.
. On the Applications page for **serverlessrepo-elastic-serverless-forwarder**, click **Deployments**.
. Refresh the **Deployment history** until you see the `Create complete` status update.
. (Optional) To enable Elastic APM instrumentation for your new deployment:
    * Go to **Lambda > Functions** within {aws} console, and find and select the function with **serverlessrepo-elastic-se-ElasticServerlessForward-**.
    * Go to **Configuration** tab and select **Environment Variables**
    * Add the following environment variables:

      | Key                       | Value  |
      |---------------------------|--------|
      |`ELASTIC_APM_ACTIVE`       | `true` |
      |`ELASTIC_APM_SECRET_TOKEN` | token  |
      |`ELASTIC_APM_SERVER_URL`	  | url    |

[[aws-serverless-forwarder-deploy-cloudformation]]
=== Deploy using Cloudformation

. Use the following code to get the semantic version of the latest application:
+
[source, bash]
----
aws serverlessrepo list-application-versions --application-id arn:aws:serverlessrepo:eu-central-1:267093732750:applications/elastic-serverless-forwarder
----
+

. Save the following yaml content as `sar-application.yaml` and fill in the correct parameters:
+
[source, yaml]
----
    Transform: AWS::Serverless-2016-10-31
    Resources:
      SarCloudformationDeployment:
        Type: AWS::Serverless::Application
        Properties:
          Location:
            ApplicationId: 'arn:aws:serverlessrepo:eu-central-1:267093732750:applications/elastic-serverless-forwarder'
            SemanticVersion: '%SEMANTICVERSION%'  ## CHANGE REFERENCING THE SEMANTIC VERSION (IT MUST BE GREATER THAN 0.30.0)
          Parameters:
            ElasticServerlessForwarderS3ConfigFile: ""          ## FILL WITH THE VALUE OF THE S3 URL IN THE FORMAT "s3://bucket-name/config-file-name" POINTING TO THE CONFIGURATION FILE FOR YOUR DEPLOYMENT OF THE ELASTIC SERVERLESS FORWARDER
            ElasticServerlessForwarderSSMSecrets: ""            ## FILL WITH A COMMA DELIMITED LIST OF AWS SSM SECRETS ARNS REFERENCED IN THE CONFIG YAML FILE (IF ANY).
            ElasticServerlessForwarderKMSKeys: ""               ## FILL WITH A COMMA DELIMITED LIST OF AWS KMS KEYS ARNS TO BE USED FOR DECRYPTING AWS SSM SECRETS REFERENCED IN THE CONFIG YAML FILE (IF ANY).
            ElasticServerlessForwarderSQSEvents: ""             ## FILL WITH A COMMA DELIMITED LIST OF DIRECT SQS QUEUES ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
            ElasticServerlessForwarderS3SQSEvents: ""           ## FILL WITH A COMMA DELIMITED LIST OF S3 SQS EVENT NOTIFICATIONS ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
            ElasticServerlessForwarderKinesisEvents: ""         ## FILL WITH A COMMA DELIMITED LIST OF KINESIS DATA STREAM ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
            ElasticServerlessForwarderCloudWatchLogsEvents: ""  ## FILL WITH A COMMA DELIMITED LIST OF CLOUDWATCH LOGS LOG GROUPS ARNS TO SET SUBSCRIPTION FILTERS ON THE LAMBDA FOR (IF ANY).
            ElasticServerlessForwarderS3Buckets: ""             ## FILL WITH A COMMA DELIMITED LIST OF S3 BUCKETS ARNS THAT ARE THE SOURCES OF THE S3 SQS EVENT NOTIFICATIONS (IF ANY).
----
+

. Deploy the Lambda function from SAR by running the following command:
+
[source, shell]
----
    aws cloudformation deploy --template-file sar-application.yaml --stack-name esf-cloudformation-deployment --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND
----


NOTE: Starting from **v1.4.0**, if you want to update the Events settings for the deployment, you do not need to manually delete existing settings before applying new settings.


[[aws-serverless-forwarder-deploy-terraform]]
=== Deploy using Terraform

. Save the following yaml content as `sar-application.tf` and fill in the correct parameters:
+
[source, yaml]
----
  provider "aws" {
    region = ""  ## FILL WITH THE AWS REGION WHERE YOU WANT TO DEPLOY THE ELASTIC SERVERLESS FORWARDER
  }
  data "aws_serverlessapplicationrepository_application" "esf_sar" {
    application_id = "arn:aws:serverlessrepo:eu-central-1:267093732750:applications/elastic-serverless-forwarder"
  }
  resource "aws_serverlessapplicationrepository_cloudformation_stack" "esf_cf_stak" {
    name             = "terraform-elastic-serverless-forwarder"
    application_id   = data.aws_serverlessapplicationrepository_application.esf_sar.application_id
    semantic_version = data.aws_serverlessapplicationrepository_application.esf_sar.semantic_version
    capabilities     = data.aws_serverlessapplicationrepository_application.esf_sar.required_capabilities
  parameters = {
      ElasticServerlessForwarderS3ConfigFile         = ""  ## FILL WITH THE VALUE OF THE S3 URL IN THE FORMAT "s3://bucket-name/config-file-name" POINTING TO THE CONFIGURATION FILE FOR YOUR DEPLOYMENT OF THE ELASTIC SERVERLESS FORWARDER
      ElasticServerlessForwarderSSMSecrets           = ""  ## FILL WITH A COMMA DELIMITED LIST OF AWS SSM SECRETS ARNS REFERENCED IN THE CONFIG YAML FILE (IF ANY).
      ElasticServerlessForwarderKMSKeys              = ""  ## FILL WITH A COMMA DELIMITED LIST OF AWS KMS KEYS ARNS TO BE USED FOR DECRYPTING AWS SSM SECRETS REFERENCED IN THE CONFIG YAML FILE (IF ANY).
      ElasticServerlessForwarderSQSEvents            = ""  ## FILL WITH A COMMA DELIMITED LIST OF DIRECT SQS QUEUES ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
      ElasticServerlessForwarderS3SQSEvents          = ""  ## FILL WITH A COMMA DELIMITED LIST OF S3 SQS EVENT NOTIFICATIONS ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
      ElasticServerlessForwarderKinesisEvents        = ""  ## FILL WITH A COMMA DELIMITED LIST OF KINESIS DATA STREAM ARNS TO SET AS EVENT TRIGGERS FOR THE LAMBDA (IF ANY).
      ElasticServerlessForwarderCloudWatchLogsEvents = ""  ## FILL WITH A COMMA DELIMITED LIST OF CLOUDWATCH LOGS LOG GROUPS ARNS TO SET SUBSCRIPTION FILTERS ON THE LAMBDA FOR (IF ANY).
      ElasticServerlessForwarderS3Buckets            = ""  ## FILL WITH A COMMA DELIMITED LIST OF S3 BUCKETS ARNS THAT ARE THE SOURCES OF THE S3 SQS EVENT NOTIFICATIONS (IF ANY).
    }
  }
----
+

. Deploy the function from SAR by running the following commands:
+
[source, shell]
----
  terrafrom init
  terrafrom apply
----
+


[NOTE]
====
Starting from **v1.4.0**, if you want to update the Events settings for the deployment, it is no longer required to manually delete existing settings before applying the new settings.

Due to a https://github.com/hashicorp/terraform-provider-aws/issues/24771[Terraform bug] related to `aws_serverlessapplicationrepository_application`, if you want to delete existing Event parameters you have to set the related `aws_serverlessapplicationrepository_cloudformation_stack.parameters` to a blank space value (`" "`) instead of an empty string (`""`).
====
