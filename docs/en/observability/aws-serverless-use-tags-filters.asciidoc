:aws: AWS

<!-- lint disable yaml -->

[[aws-serverless-use-tags-filters]]
= Use tags and filters

You can use tags and filters to tag and filter messages based on regular expressions.

// expand? should we move this into Configure topic?

[[aws-serverless-use-tags]]
== Use custom tags

You can add custom tags to filter and categorize items in events.

[source, yaml]
----
inputs:
  - type: "s3-sqs"
    id: "arn:aws:sqs:%REGION%:%ACCOUNT%:%QUEUENAME%"
    tags:
      - "tag1"
      - "tag2"
      - "tag3"
    outputs:
      - type: "elasticsearch"
        args:
          elasticsearch_url: "arn:aws:secretsmanager:eu-central-1:123456789:secret:es_url"
          username: "arn:aws:secretsmanager:eu-west-1:123456789:secret:es_secrets:username"
          password: "arn:aws:secretsmanager:eu-west-1:123456789:secret:es_secrets:password"
          es_datastream_name: "logs-generic-default"
----

Using the above example configuration, the tags will be set in the following way:

`["forwarded", "generic", "tag1", "tag2", "tag3"]`

// where do first two tags come from?

[NOTE]
====
- Tags must be defined within `inputs` in the config file.
- Each tag must be a string and added to the list.
====

[[aws-serverless-define-include-exclude-filters]]
== Define include/exclude filters

You can define multiple filters for inputs to include or exclude events from data ingestion.

[source, yaml]
----
inputs:
  - type: "s3-sqs"
    id: "arn:aws:sqs:%REGION%:%ACCOUNT%:%QUEUENAME%"
    include:
      - "[a-zA-Z]"
    exclude:
      - "skip this"
      - "skip also this"
    outputs:
      - type: "elasticsearch"
        args:
          elasticsearch_url: "arn:aws:secretsmanager:eu-central-1:123456789:secret:es_url"
          username: "arn:aws:secretsmanager:eu-west-1:123456789:secret:es_secrets:username"
          password: "arn:aws:secretsmanager:eu-west-1:123456789:secret:es_secrets:password"
          es_datastream_name: "logs-generic-default"
----

You can define a list of regular expressions within `inputs.[].include`. If this list is populated, only messages **matching any** of the defined regular expressions will be forwarded to the outputs.

You can define a list of regular expressions within `inputs.[].exclude`. If this list is populated, only messages **not matching any** of the defined regular expressions will be forwarded to the outputs i.e. every message will be forwarded to the outputs unless it matches any of the defined regular expressions.

[NOTE]
====
Both config parameters are optional, and can be set independently of each other. In terms of rule precedence, the exclude filter is applied first and then the include filter.

//check "so exclude takes precedence if both are supplied"?

All regular expressions are case-sensitive and should follow https://docs.python.org/3.9/library/re.html#regular-expression-syntax[Python's 3.9 regular expression syntax].

Messages are scanned for terms that match the defined filters. Anchoring at the beginning of the string must be done explicitly with the `^` (caret) special character.

// what is anchoring? Expand?

No flags are used when the regular expression is compiled. Please refer to https://docs.python.org/3.9/library/re.html#re.compile[inline flag documentation] for alternative options for multiline, case-insensitive, and other matching behaviors.

====
