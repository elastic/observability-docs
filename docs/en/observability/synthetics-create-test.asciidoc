[[synthetics-create-test]]
= Create a new synthetic test

++++
<titleabbrev>Create a test</titleabbrev>
++++

[discrete]
[[synthetics-syntax]]
== Syntax

beta[] To write synthetic tests for your application, you'll need to know basic JavaScript and
{playwright-url}[Playwright] syntax.
Synthetics agent exposes a an API for creating and running tests:

* `journey(name, ({ page, browser, context, params }) => {})` -- A journey tests one discrete unit of functionality.
For example, logging into a website, adding something to a cart, or joining a mailing list.
Each journey provides a fresh playwright `browser`, `context`, and `page` instance.
See <<synthetics-create-journey>> for more information.
* `step(name, function)` -- A journey consists of multiple steps, i.e., actions that should be completed in a specific order.
Steps are displayed individually in the {uptime-app} for easy debugging and error tracking.
* `beforeAll(({ params }) => {})` -- Runs a provided function prior to all `journey` runs.
If the provided function is a promise, the runner will wait for the promise to resolve before invoking the journey.
This function is useful for setting up global state or a server that will be used across multiple journeys.
* `before(({ params }) => {})` -- Runs a provided function prior to a single `journey` runs.
This function is useful for setting up global state or a server that will be used for a single journey.
* `afterAll(({ params }) => {})` -- Runs a provided function after all the journeys have completed.
This function is useful for removing global state or closing a server that was used in multiple journeys.
* `after(({ params }) => {})` -- Runs a provided function after a single journey has completed.
This function is useful for removing global state or closing a server that was used in a single journey.

TIP: {playwright-url}[Playwright] is browser testing library developed by Microsoft.
It is reliable and fast and features a modern API that auto waits for page elements to be ready.

// [discrete]
// [[synthetics-install]]
// == Install Elastic Synthetics

// Create a new https://docs.npmjs.com/cli/v7/commands/npm-init[NPM/Node.js project].
// Then, install the synthetics runner as a dev-dependency using `npm install -D @elastic/synthetics`.

[discrete]
[[synthetics-create-journey]]
== Write a synthetic test

A journey tests one discrete unit of functionality.
For example, logging into a website, adding something to a cart, or joining a mailing list.

Start by creating a new file called using the `.journey.ts` or `.journey.js` file extension,
importing the synthetics library, and adding a new journey.

[source,js]
----
journey('Journey name', ({ page, browser, context, params }) => {
  // Add steps here
});
----

The `journey` function takes a single parameter, `name` ('Journey name' in the example above).
Then you pass a callback to the global `journey` function to encapsulate the whole test.
This callback function provides access to fresh Playwright `page`, `params`, `browser`, and `context` instances.

[horizontal]
`name`::        A string you provide to describe the journey.
`page`::        A https://playwright.dev/docs/api/class-page[page] object from Playwright
                that lets you control the browser's current page.
`browser`::     A {playwright-api-docs}[browser] object created by Playwright.
`context`::     A https://playwright.dev/docs/api/class-browsercontext[browser context] 
                that doesn't share cookies or cache with other browser contexts.
`params`::      User-defined variables that allow you to invoke the Synthetics suite with custom parameters.
                For example, if you want to use a different homepage depending on the `env`
                (localhost for `dev`, and a URL for `prod`). See <<synthetics-params-secrets>>
                for more information.


[discrete]
[[synthetics-create-step]]
=== Add steps

A journey consists of multiple _steps_. Steps are actions that should be completed in a specific order.
Steps are displayed individually in the {uptime-app} for easy debugging and error tracking.

A basic two-step journey would look like this:

[source,js]
----
journey('Journey name', ({ page, browser, client, params }) => {
    step('Step 1 name', () => {
      // Do something here
    });
    step('Step 2 name', () => {
      // Do something else here
    });
});
----

Steps can be as simple or complex as you need them to be.
For example, a basic first step might load a web page:

[source,js]
----
step('Load the demo page', () => {
  await page.goto('https://elastic.github.io/synthetics-demo/'); <1>
});
----
<1> See the https://playwright.dev/docs/api/class-page#page-goto[`page.goto` reference] for more information.

A more complex step might wait for a page element to be selected
and then ensure that it matches an expected value.

For example, on a page using the following HTML:

[source,html]
----
<header class="header">
  <h1>todos</h1>
  <input class="new-todo"
    autofocus autocomplete="off"
    placeholder="What needs to be done?">
</header>
----

You can verify that the `input` element with class `new-todo` contains the expected `placeholder` value
(the hint text for `input` elements) with the following test:

[source,js]
----
step('Assert placeholder text', async () => {
  const placeholderValue = await page.getAttribute(
      'input.new-todo',
      'placeholder'
  ); <1>
  expect(placeholderValue).toBe('What needs to be done?'); <2>
});
----
<1> Find the `input` element with class `new-todo` and get the value of the `placeholder` attribute. See the https://playwright.dev/docs/api/class-page#page-get-attribute[`page.getAttribute` reference] for more information.
<2> Use the assertion library provided by the Synthetics agent to look for the
expected value. See https://jestjs.io/docs/expect[Jest expect docs] for more information.

[discrete]
[[synthetics-sample-test]]
=== Sample synthetic test

A complete example of a basic synthetic test looks like this:

[source,js]
----
import { journey, step, expect } from '@elastic/synthetics';

journey('Ensure placeholder is correct', ({ page }) => {
  step('Load the demo page', async () => {
    await page.goto('https://elastic.github.io/synthetics-demo/');
  });
  step('Assert placeholder text', async () => {
    const placeholderValue = await page.getAttribute(
      'input.new-todo',
      'placeholder'
    );
    expect(placeholderValue).toBe('What needs to be done?');
  });
});
----

[discrete]
[[synthetic-run-tests]]
== Run synthetic tests

There are two ways to run synthetic tests:

* If you want to invoke a single journey with few steps, <<synthetics-inline-journey,run an inline journey>>.
This can be more efficient, but has some limitations like not supporting dependencies.
* If you have any dependencies, you have a complex test suite, or your tests need to live with your
application code, <<synthetics-test-suite,run a test suite>>. Any dependencies need to be defined with an
`import` outside of the `journey` object and run via the test suite.

[discrete]
[[synthetics-inline-journey]]
=== Run an inline journey

The easiest way to run a synthetic test is by creating an inline journey.
The `journey` keyword isn't required, and access to variables like `page` and `params` is automatic.
You cannot `import` any dependencies using inline scripts.

To test an inline example locally, change into the directory of your test
and pipe the file contents to the `npx @elastic/synthetics` command.

For example, create a `sample.js` file containing steps:

[source,js]
----
step("load homepage", async () => {
    await page.goto('https://www.elastic.co');
});
step("hover over products menu", async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

Then test the sample file:

[source,sh]
----
cat path/to/sample.js | npx @elastic/synthetics --inline
----

And you'll get a response similar to:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----

After testing locally, you can copy the script into your
Elastic Synthetics integration configuration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add an inline journey when configuring the Elastic Synthetics integration.
In Monitor settings, use Monitor Type "Browser" and switch the Source Type to "Inline script".
See <<synthetics-quickstart-fleet>> for details.
* **{heartbeat}**: Copy and paste your test steps into `heartbeat.yml`.
{heartbeat} spawns a separate Node.js process, schedules your tests, and runs them on a chromium browser.
You can jump to <<synthetics-quickstart-step-two>> if you're using the the provided Docker
project template or spin up {heartbeat} yourself.

[discrete]
[[synthetics-test-suite]]
=== Run a test suite

If you have a suite of tests to implement, you can use Elastic Synthetics as a library.
In this method, you use Docker to run both {heartbeat} and `elastic-synthetics`.

To test an inline example locally, start by installing the `@elastic/synthetics` package globally:

[source,sh]
----
npm install -g @elastic/synthetics
----

Then write your tests:

. Create a new https://docs.npmjs.com/cli/v7/commands/npm-init[NPM/Node.js project].
. Create a `javascript` or `typescript` file that imports your tests.
All synthetic test files must use the `.journey.ts` or `.journey.js` file extension.
. Compile everything together.

Find examples in the https://github.com/elastic/synthetics[elastic/synthetics] repository.
If you'd like to test an example locally, clone the repo and install the example:

[source,sh]
----
# Check out the synthetics repo and included examples
git clone git@github.com:elastic/synthetics.git &&\
cd synthetics/examples/todos/ &&\
# Install all required dependencies for the todos example
npm install
----

You are now inside the a synthetics test suite, which is also an NPM project.
You can now run the provided tests. By default only files matching the filename `*.journey.(ts|js)*`
will be run.

[source,sh]
----
# Run tests on the current directory. The dot `.` indicates
# that it should run all tests in the current directory.
npx @elastic/synthetics .
----

After testing locally, you can run the test suite using the
Elastic Synthetics integration configuration or `heartbeat.yml`.

* **{agent} and {fleet}**: Add a test suite when configuring the Elastic Synthetics integration.
Use Monitor Type "Browser" and use the Source Type "Zip URL" pointing to a zip file containing the test project.
See <<synthetics-quickstart-fleet>> for details.
* **{heartbeat}**: Copy and paste the path to your zip file into `heartbeat.yml`.
You can jump to <<synthetics-quickstart-step-two>> if you're using the the provided Docker
project template or spin up {heartbeat} yourself.

[discrete]
[[synthetics-ci]]
=== Run on CI

In addition to replacing your end-to-end tests locally, you can run a synthetic test suite on your CI environment.

You can run `@elastic/synthetics` in a CI environment to execute journeys.
Elastic's synthetics runnercan output results in multiple formats, including JSON and JUnit
(the standard format supported by most CI platforms).
If any of your journeys fail, it will yield a non-zero exit code, which most CI systems pick up as a failure. 

You can see an example using GitHub Actions in the
https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics] repository.
This example sets up a job that executes the synthetics runner and tells the runner to yield results in a JUnit format.