[[synthetics-create-test]]
= Write a synthetic test

[[synthetics-syntax]]

beta[] To write synthetic tests for your application, you'll need to know basic JavaScript and
{playwright-url}[Playwright] syntax.

TIP: {playwright-url}[Playwright] is a browser testing library developed by Microsoft.
It's fast, reliable, and features a modern API that automatically waits for page elements to be ready.

The synthetics agent exposes an API for creating and running tests, including:

[horizontal]
`journey`::     Tests one discrete unit of functionality.
                Takes two parameters: a `name` (string) and a `callback` (function).
                See <<synthetics-create-journey>>.
`step`::        Actions within a journey that should be completed in a specific order.
                Takes two parameters: a `name` (string) and a `callback` (function).
                See <<synthetics-create-step>>.
`beforeAll`::   Runs a provided function once, before any `journey` runs.
                If the provided function is a promise, the runner will wait for the
                promise to resolve before invoking the `journey`.
                Takes one parameter: a `callback` (function).
                See <<before-after>>.
`before`::      Runs a provided function before a single `journey` runs.
                Takes one parameter: a `callback` (function).
                See <<before-after>>.
`afterAll`::    Runs a provided function once, after all the `journey` runs have completed.
                Takes one parameter: a `callback` (function).
                See <<before-after>>.
`after`::       Runs a provided function after a single `journey` has completed.
                Takes one parameter: a `callback` (function).
                See <<before-after>>.
`monitor`::     The `monitor.use` method allows you to determine a monitor's configuration on a journey-by-journey basis.
                If you want two journeys to create monitors with different intervals, for example, you should call
                `monitor.use` in each of them and set the `schedule` property to different values in each.
                Note that this is only relevant when using the `push` command to create monitors in {kib}.
                See the "Project monitors" option in <<synthetic-run-tests>>.

[discrete]
[[synthetics-initialize]]
== Initialize a synthetic project

Start by installing the Elastic Synthetics agent:

[source,sh]
----
npm install -g @elastic/synthetics
----

Then create a Node.js project using the `@elastic/synthetics` `init` command.
This will create a template Node.js project that includes the synthetics agent, required dependencies,
a synthetics configuration file, and example journey files:

[source,sh]
----
npx @elastic/synthetics init <name-of-your-project>
----

Once you have a project set up, you can start writing journeys and pushing them to create monitors.

[discrete]
[[synthetics-create-journey]]
== Create a journey

Create a new file using the `.journey.ts` or `.journey.js` file extension or edit one of the example journey files.

A _journey_ tests one discrete unit of functionality.
For example, logging into a website, adding something to a cart, or joining a mailing list.

The journey function takes two parameters: a `name` and a `callback`.
The `name` helps you identify an individual journey.
The `callback` argument is a function that encapsulates what the journey does.
The callback provides access to fresh Playwright `page`, `params`, `browser`, and `context` instances.

[source,js]
----
journey('Journey name', ({ page, browser, context, params }) => {
  // Add steps here
});
----

[horizontal]
`name`::        A user-defined string to describe the journey.
`page`::        A https://playwright.dev/docs/api/class-page[page] object from Playwright
                that lets you control the browser's current page.
`browser`::     A {playwright-api-docs}[browser] object created by Playwright.
`context`::     A https://playwright.dev/docs/api/class-browsercontext[browser context] 
                that doesn't share cookies or cache with other browser contexts.
`params`::      User-defined variables that allow you to invoke the Synthetics suite with custom parameters.
                For example, if you want to use a different homepage depending on the `env`
                (`localhost` for `dev` and a URL for `prod`). See <<synthetics-params-secrets>>
                for more information.


[discrete]
[[synthetics-create-step]]
== Add steps

A journey consists of one or more _steps_. Steps are actions that should be completed in a specific order.
Steps are displayed individually in the {uptime-app} along with screenshots for convenient debugging and error tracking.

A basic two-step journey would look like this:

[source,js]
----
journey('Journey name', ({ page, browser, client, params }) => {
    step('Step 1 name', () => {
      // Do something here
    });
    step('Step 2 name', () => {
      // Do something else here
    });
});
----

Steps can be as simple or complex as you need them to be.
For example, a basic first step might load a web page:

[source,js]
----
step('Load the demo page', () => {
  await page.goto('https://elastic.github.io/synthetics-demo/'); <1>
});
----
<1> See the https://playwright.dev/docs/api/class-page#page-goto[`page.goto` reference] for more information.

A more complex step might wait for a page element to be selected
and then make sure that it matches an expected value.

For example, on a page using the following HTML:

[source,html]
----
<header class="header">
  <h1>todos</h1>
  <input class="new-todo"
    autofocus autocomplete="off"
    placeholder="What needs to be done?">
</header>
----

You can verify that the `input` element with class `new-todo` has the expected `placeholder` value
(the hint text for `input` elements) with the following test:

[source,js]
----
step('Assert placeholder text', async () => {
  const placeholderValue = await page.getAttribute(
      'input.new-todo',
      'placeholder'
  ); <1>
  expect(placeholderValue).toBe('What needs to be done?'); <2>
});
----
<1> Find the `input` element with class `new-todo` and get the value of the `placeholder` attribute.
See the https://playwright.dev/docs/api/class-page#page-get-attribute[`page.getAttribute` reference] for more information.
<2> Use the assertion library provided by the Synthetics agent to look for the
expected value. See https://jestjs.io/docs/expect[Jest expect docs] for more information.

[discrete]
[[before-after]]
== Set up and remove a global state

If there are any actions that should be done before or after journeys, you can use `before`, `beforeAll`, `after`, or `afterAll`.

To set up global state or a server that will be used for a **single** `journey`, for example,
use a `before` hook. To perform this setup once before **all** journeys, use a `beforeAll` hook.

[source,js]
----
before(({ params }) => {
  // Actions to take
});

beforeAll(({ params }) => {
  // Actions to take
});
----

You can clean up global state or close a server used for a **single** `journey` using an `after` hook.
To perform this cleanup once after all journeys, use an `afterAll` hook.

[source,js]
----
after(({ params }) => {
  // Actions to take
});

afterAll(({ params }) => {
  // Actions to take
});
----

[discrete]
[[synthetics-sample-test]]
== Sample synthetic test

A complete example of a basic synthetic test looks like this:

[source,js]
----
import { journey, step, expect } from '@elastic/synthetics';

journey('Ensure placeholder is correct', ({ page }) => {
  step('Load the demo page', async () => {
    await page.goto('https://elastic.github.io/synthetics-demo/');
  });
  step('Assert placeholder text', async () => {
    const placeholderValue = await page.getAttribute(
      'input.new-todo',
      'placeholder'
    );
    expect(placeholderValue).toBe('What needs to be done?');
  });
});
----

For more information on using `monitor`, see the "Project monitors" option in <<synthetic-run-tests>>.

[discrete]
[[synthetics-test-suite]]
== Test locally

As you write journeys, you can run them locally to verify they work as expected. Then, you can create monitors to run your journeys at a regular interval.

To test all the journeys in a project, navigate into the directory containing the synthetics project and run the journeys in there.
By default, the `@elastic/synthetics` runner will only run files matching the filename `*.journey.(ts|js)*`.

[source,sh]
----
# Run tests on the current directory. The dot `.` indicates
# that it should run all tests in the current directory.
npx @elastic/synthetics .
----

[discrete]
[[synthetics-test-inline]]
=== Test an inline monitor

To test an inline monitor's journey locally, pipe the inline journey into the `npx @elastic/synthetics` command.

Assume, for example, that your inline monitor includes the following code:

[source,js]
----
step('load homepage', async () => {
    await page.goto('https://www.elastic.co');
});
step('hover over products menu', async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

To run that journey locally, you can save that code to a file and pipe the file's contents into `@elastic-synthetics`:

[source,sh]
----
cat path/to/sample.js | npx @elastic/synthetics --inline
----

And you'll get a response like the following:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----