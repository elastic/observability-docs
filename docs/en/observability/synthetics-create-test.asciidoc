[[synthetics-create-test]]
= Create a new synthetic test

++++
<titleabbrev>Create a test</titleabbrev>
++++

[WARNING]
====
This functionality is experimental and may be changed or removed completely in a future release.
Elastic will take a best effort approach to fix any issues, but experimental features are not subject
to the support SLA of official GA features.

Have a question? Want to leave feedback? Visit the
https://discuss.elastic.co/tags/c/observability/uptime/75/synthetics[Synthetics discussion forum].
====

[discrete]
[[synthetics-syntax]]
== Syntax

To write synthetic tests for your application, you'll need to know basic JavaScript and
{playwright-url}[Playwright] syntax.
Elastic also provides a few custom syntax elements:

* `journey(name, ({ page, browser, client, params }) => {})` -- A journey tests one discrete unit of functionality.
For example, logging into a website, adding something to a cart, or joining a mailing list.
Each journey provides a fresh playwright browser, context, and page instance.
* `step(name, function)` -- A journey consists of multiple steps, i.e., actions that should be completed in a specific order.
Steps are displayed individually in the {uptime-app} for easy debugging and error tracking.
* `beforeAll(function)` -- Runs a provided function prior to all `journey` runs.
If the provided function is a promise, the runner will wait for the promise to resolve before invoking the journey.
This function is useful for setting up global state or a server that will be used multiple journeys.
* `before(function)` -- Runs a provided function prior to a single `journey` runs.
This function is useful for setting up global state or a server that will be used for a single journey.
* `afterAll(function)` -- Runs a provided function after all the journeys have completed.
This function is useful for removing global state or closing a server that was used in multiple journeys.
* `after(function)` -- Runs a provided function after a single journey has completed.
This function is useful for removing global state or closing a server that was used in a single journey.

TIP: {playwright-url}[Playwright] is browser testing library developed by Microsoft.
It is reliable and fast and features a modern API that auto waits for page elements to be ready.

[discrete]
[[synthetics-create-journey]]
=== Create a `journey`

The `journey` function takes two main parameters, `page` and `params`:

* `page` -- A `page` object from Playwright that lets you control the browser's current page.
* `params` -- User-defined variables that allow you to invoke the Synthetics suite with custom parameters.
For example, if you want to use a different homepage depending on the `env`
(localhost for `dev`, and a URL for `prod`).

Putting it all together, a basic, two step journey might look something like this:

[source,js]
----
journey("Journey title", async ({page}) => {
    step("Step 1 title", async () => {
      // Do something here
    })
    step("Step 2 title", async () => {
      // Do something else here
    })
});
----

// REVIEWERS
// Should we add a note here about the `async` keyword / promises / link to mdn docs?
// https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await[async/await].

[discrete]
[[synthetics-create-step]]
=== Create a `step`

Steps can be as simple or complex as you need them to be.
The {playwright-api-docs}[Playwright page API reference] will be your friend while writing tests.

A basic first step might simply load a page:

[source,js]
----
await page.goto('https://www.elastic.co'); <1>
----
<1> See the https://github.com/microsoft/playwright/blob/master/docs/api.md#pagegotourl-options[`page.goto` reference] for more information.

A more complex second step might wait for a page element to be selected,
and then ensure that it matches an expected value.
Consider the following HTML snippet:

[source,html]
----
<header class="header">
  <h1>todos</h1>
  <input class="new-todo"
    autofocus autocomplete="off"
    placeholder="What needs to be done?"
    v-model="newTodo"
    @keyup.enter="addTodo">
</header>
----

You can verify that `new-todo` class element contains the expected `placeholder` (input hint)
with the following test:

[source,js]
----
const input = await page.$('input.new-todo'); <1>
deepStrictEqual(await input.getAttribute('placeholder'), "What needs to be done?"); <2>
----
<1> Query the page for the `input.new-todo` selector.
See the https://github.com/microsoft/playwright/blob/master/docs/api.md#pageselector[`page.$` reference] for more information.
<2> Return the `placeholder` attribute for `new-todo` with https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute[`getAttribute()`], and ensure it equals the provided text.
`deepStrictEqual` is provided by Node.js and tests for deep equality between the actual and
expected parameters.
See the https://nodejs.org/api/assert.html#assert_assert_deepstrictequal_actual_expected_message[Node.js API reference] for more information.

[discrete]
[[synthetics-sample-test]]
=== Sample Synthetic test

A complete example of a basic synthetic test looks like this:

[source,js]
----
import { journey, step } from '@elastic/synthetics';

journey("Ensure placeholder is correct", async ({page}) => {
    step("Go to elastic.co", async () => {
      await page.goto('https://www.elastic.co');
    })
    step("Check placeholder text", async () => {
      const input = await page.$('input.new-todo');
      deepStrictEqual(await input.getAttribute('placeholder'), "What needs to be done?");
    })
});
----

[discrete]
[[synthetic-run-tests]]
== Running synthetic tests

// REVIEWERS:
// Should we doc required technologies?
// Node.js, npx, typescript, etc.?

As explained in the <<synthetics-quickstart,quickstart>>, there are two ways to run synthetic tests:

* Run as an inline journey -- copy/paste into `heartbeat.yml`
* Run a test suite -- import your tests into Heartbeat

Which option is right for you? That depends.
If you only have a few tests, an inline journey might be the easiest workflow --
you only need paste your tests into your `heartbeat.yml` file.
if you have a complex test suite, or your tests need to live with your application code,
you're likely better off setting up a synthetic test suite.

[discrete]
[[synthetics-inline-journey]]
=== Run an inline journey

The easiest way to run a synthetic test is by creating an inline journey.
The `journey` keyword isn't required, and access to variables like `page` and `params` is automatic.

Copy and paste your test steps into `heartbeat.yml`.
Heartbeat will fork Node.js, schedule your tests, and start headless chrome.
You don't need to worry about anything else.

An example, `short.js`, is provided in the
https://github.com/elastic/synthetics/tree/master/examples/inline[elastic/synthetics] GitHub repository:

[source,js]
----
// test-homepage-hover.js
step("load homepage", async () => {
    await page.goto('https://www.elastic.co');
});
step("hover over products menu", async () => {
    await page.hover('css=[data-nav-item=products]');
});
----

To run this, or any other inline example locally, change into the directory of your test,
and pipe the file contents to the `elastic-synthetics` command.

For example:

[source,sh]
----
cat examples/inline/short.js | npx synthetics --inline
----

If everything works as expected, you'll get the following response:

[source,sh]
----
Journey: inline
   ✓  Step: 'load homepage' succeeded (1831 ms)
   ✓  Step: 'hover over products menu' succeeded (97 ms)

 2 passed (2511 ms)
----

The script can then be copied into your in your `heartbeat.yml`:

[source,yml]
----
heartbeat.monitors:
- type: browser
  id: my-monitor
  name: My Monitor
  schedule: "@every 1m"
  script: |-
    step("load homepage", async () => {
        await page.goto('https://www.elastic.co');
    });
    step("hover over products menu", async () => {
        await page.hover('css=[data-nav-item=products]');
    });
----

That's it! You can either spin up Heartbeat yourself, or jump to <<synthetics-quickstart-step-three>>
of the Quickstart to use the provided Docker project template.

[discrete]
[[synthetics-test-suite]]
=== Run a test suite

If you have a suite of tests you'd like to implement, you can use Elastic synthetics as a library.
In this method, you use Docker to run both Heartbeat and `elastic-synthetics`.

// [discrete]
// [[synthetics-suite-install]]
// ==== Step 1: Install `elastic-synthetics`

If you haven't already, clone the https://github.com/elastic/synthetics[elastic/synthetics] repository
and install the project:

[source,sh]
----
git clone git@github.com:elastic/synthetics.git &&\
npm install
----

// [discrete]
// [[synthetics-suite-create]]
// ==== Step 2: Create your tests

Now it's time to write your tests:

. Create a new Node.js project.
. Create a `javascript` or `typescript` file that imports your tests.
All synthetic test files must use the `.journey.ts` or `.journey.js` file extension.
. Call `run`, which is imported from `elastic-synthetics` and runs the CLI application.
. Compile everything together.

At Elastic, we're fans of examples, so one is provided in `synthetics/examples/todo`.
Switch into the directory and install the application:

[source,sh]
----
cd examples/todos/ && npm install
----

From the root of the `synthetics` repo, you can now run the provided tests.
Any files matching the filename `*.journey.*` will be run.

[source,sh]
----
npx elastic-synthetics examples/todos
----

Once you have your tests up and running, follow the steps in the <<synthetics-quickstart,quickstart guide>>
to integrate with the provided Docker project template.
You'll need to write some additional orchestration to get Heartbeat on a box,
pull your source of tests, and share it with Heartbeat.

// Results. . .
// [source,sh]
// ----
// Journey: basic addition and completion of single task
//    ✓  Step: 'go to app' succeeded (150 ms)
//    ✓  Step: 'add task Dont put salt in your eyes' succeeded (79 ms)
//    ✓  Step: 'check that task list has exactly 1 elements' succeeded (7 ms)
//    ✓  Step: 'check for task 'Don't put salt in your eyes' in list' succeeded (50 ms)
//    ✓  Step: 'destroy task 'Don't put salt in your eyes'' succeeded (75 ms)
//    ✓  Step: 'check that task list has exactly 0 elements' succeeded (2 ms)

// Journey: adding and removing a few tasks
//    ✓  Step: 'go to app' succeeded (125 ms)
//    ✓  Step: 'add task Task 1' succeeded (40 ms)
//    ✓  Step: 'add task Task 2' succeeded (49 ms)
//    ✓  Step: 'add task Task 3' succeeded (21 ms)
//    ✓  Step: 'check that task list has exactly 3 elements' succeeded (8 ms)
//    ✓  Step: 'destroy task 'Task 2'' succeeded (94 ms)
//    ✓  Step: 'check that task list has exactly 2 elements' succeeded (5 ms)
//    ✓  Step: 'add task Task 4' succeeded (36 ms)
//    ✓  Step: 'check that task list has exactly 3 elements' succeeded (4 ms)

// Journey: check that title is present
//    ✓  Step: 'go to app' succeeded (139 ms)
//    ✓  Step: 'check title is present' succeeded (27 ms)

// Journey: check that input placeholder is correct
//    ✓  Step: 'go to app' succeeded (121 ms)
//    ✓  Step: 'check title is present' succeeded (18 ms)

//  19 passed (2983 ms)
// ----
