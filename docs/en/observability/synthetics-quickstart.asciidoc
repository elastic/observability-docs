:synthetics-image: docker.elastic.co/beats/heartbeat:{version}

[[synthetics-quickstart]]
= Quickstart: Synthetic monitoring via Docker

++++
<titleabbrev>Quickstart with Docker</titleabbrev>
++++

[WARNING]
====
This functionality is experimental and may be changed or removed completely in a future release.
Elastic will take a best effort approach to fix any issues, but experimental features are not subject
to the support SLA of official GA features.

Have a question? Want to leave feedback? Visit the
https://discuss.elastic.co/tags/c/observability/uptime/75/synthetics[Synthetics discussion forum].
====

A customizable Docker project template is provided to get started with Elastic Synthetics quickly.
This template provides two types of sample tests: a simple, two-step, inline test,
and a packaged todo application with a custom suite of tests.

[discrete]
[[synthetics-quickstart-step-one]]
== Step 1: Pull the latest synthetics docker image

Elastic Synthetics is regularly updated during this experimental phase, even within the same version.
You'll want to ensure you're running the latest docker image by running the below command.{synthetics-image}

[source,sh,subs="attributes"]
----
docker pull {synthetics-image}
----


[discrete]
[[synthetics-quickstart-step-two]]
== Step 2: Create a heartbeat.yml configuration file

There are two ways to configure a synthetic test.
Let's take a quick look at each.

Run an inline test::

If you're running an inline browser based test, you can use the traditional Heartbeat flow to completely
configure your synthetic testing directly in a file named `heartbeat.yml` as shown below. 

You'll need to setup your elasticsearch credentials for either an https://www.elastic.co/guide/en/beats/heartbeat/current/configure-cloud-id.html[Elastic Cloud ID] or another https://www.elastic.co/guide/en/beats/heartbeat/current/elasticsearch-output.html[Elasticsearch Cluster] in
the `heartbeat.yml` file. The example below demonstrates using https://cloud.elastic.co[Elastic Cloud] credentials.

[source,yml]
----
heartbeat.monitors:
- type: browser
  id: my-monitor <1>
  name: My Monitor
  schedule: "@every 1m"
  source:
    inline:
      script: |- <2>
        step("load homepage", async () => {
            await page.goto('https://www.elastic.co');
        });
        step("hover over products menu", async () => {
            await page.hover('css=[data-nav-item=products]');
        });
----
<1> Each `monitor` gets its own ID in the {uptime-app} and, therefore its own schedule entry.
This allows tests to be run in parallel and analyzed separately.
<2> In this example, a synthetic test is defined inline. This is a two-step script that first loads
a homepage and then hovers over a product menu. See <<synthetics-syntax>> for more information.


Run a test suite::

If you'd like to run multiple tests, you'd probably be better off creating a library of tests defined
outside of `heartbeat.docker.yml`.
This, for example, allows your tests to live with your application or in a separate Git repository.

[source,yml]
----
- name: Todos
  id: todos
  type: browser
  schedule: "@every 1m"
  source:
    local:
      path: "/opt/examples/todos" <1>
----
<1> In this example, our library of synthetic tests come from https://github.com/elastic/synthetics/tree/master/examples/todos[our todos example]. The path shown here corresponds to the path heartbeat will look at inside the docker container.

Heartbeat will attempt to run all files in that directory with the extension `.journey.ts` or `.journey.js`.
See <<synthetics-syntax>> for more information.

[discrete]
[[synthetics-quickstart-step-three]]
== Step 3: Run the container

WARNING: Elastic synthetics runs Chromium without the extra protection of its process https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md[sandbox] for greater compatibility with Linux server distributions. Add the `sandbox: true` option to a given browser
monitor to enable sandboxing. This may require using a https://github.com/elastic/synthetics/blob/master/examples/docker/seccomp_profile.json[custom seccomp policy] with docker, which brings its own additional risks. This is generally safe when run against sites whose content you trust,
and with a recent version of Elastic synthetics and chromium.

[source,sh,subs="+attributes"]
----
docker run \
  --rm \
  --name=heartbeat \
  --user=heartbeat \
  --volume="$PWD/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro" \ <1>
  --volume="$PWD/PATH/TO/todos-example:/opt/todos:ro" \ <2>
  {synthetics-image} heartbeat
----
<1> Provides your `heartbeat.docker.yml` file as a volume.
<2> Provides the `todos` example as a volume. Replace the first path the location of your local copy of the todos example.

Use the following command to run the provided sample tests (or your own).
Don't forget to update the example with your {es} credentials.

// Right now we do not publish docker images for patch releases
// Docker pull should reference only the .0 bugfix of the minor
// We can accomplish this with the following attribute `{minor-version}.0`

[source,sh,subs="attributes"]
----
sh run.sh {minor-version}.0 \
  '-E cloud.id=<cloud-id>' \
  '-E cloud.auth=elastic:<cloud-pass>'
----

If you aren't using {ecloud}, replace `-E cloud.id` and `-E cloud.auth` with your Elasticsearch hosts,
username, and password:

[source,sh,subs="attributes"]
----
sh run.sh {minor-version}.0 \
  '-E output.elasticsearch.hosts=["localhost:9200"]' \
  '-E output.elasticsearch.username=elastic' \
  '-E output.elasticsearch.password=changeme'
----

[discrete]
[[synthetics-quickstart-step-five]]
== Step 4: View in {kib}

That's it! Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the app), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.

[discrete]
[[synthetics-quickstart-step-next]]
== Next steps

Now you can customize the provided Docker example with your own tests!
See <<synthetics-syntax>> to learn more.
