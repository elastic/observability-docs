:synthetics-image: docker.elastic.co/beats/heartbeat:{version}

[[synthetics-quickstart]]
= Quickstart: Synthetic monitoring via Docker

++++
<titleabbrev>Quickstart with Docker</titleabbrev>
++++

beta[] A customizable Docker project template is provided to get started with Elastic Synthetics quickly.
This template provides two types of sample tests: a simple, two-step, inline test,
and a packaged todo application with a custom suite of tests.

[discrete]
[[synthetics-quickstart-step-one]]
== Step 1: Pull the latest synthetics docker image

Elastic Synthetics is regularly updated during this beta phase, even within the same version.
You'll want to ensure you're running the latest docker image by running the command below .

[source,sh,subs="attributes"]
----
docker pull {synthetics-image}
----

[discrete]
[[synthetics-quickstart-step-two]]
== Step 2: Create a heartbeat.yml configuration file

There are two ways to configure a synthetic test. The config file below demonstrates both.
The first entry in `heartbeat.monitors` uses the `inline` source type, where the entire synthetic journey is directly embedded in the yaml file.
The second method uses the `zip_url` source type, which points to a remote endpoint where synthetics tests can be downloaded with basic authentication.
For test suites {heartbeat} will attempt to run all files in that directory with the extension `.journey.ts` or `.journey.js`.
See <<synthetics-syntax>> for more information.

To start, download or clone a local copy of https://github.com/elastic/synthetics/tree/master/examples/todos[our todos example suite] from our synthetics repo to your
local machine, and navigate to the `examples/todos` folder. We'll work inside that folder going forward.

[source,yml]
----
heartbeat.monitors:
- type: browser
  id: my-monitor <1>
  name: My Monitor
  schedule: "@every 1m"
  source:
    inline:
      script: |- <2>
        step("load homepage", async () => {
            await page.goto('https://www.elastic.co');
        });
        step("hover over products menu", async () => {
            await page.hover('css=[data-nav-item=products]');
        });
- name: Todos
  id: todos
  type: browser
  schedule: "@every 1m"
  source:
    zip_url: <3>
      url: "https://github.com/elastic/synthetics/archive/refs/heads/master.zip" <4>
      folder: "examples/todos" <5>
      username: "" <6>
      password: "" 
----
<1> Each `monitor` gets its own ID in the {uptime-app} and, therefore its own schedule entry.
This allows tests to be run in parallel and analyzed separately.
<2> In this example, a synthetic test is defined inline. This is a two-step script that first loads
a homepage and then hovers over a product menu. See <<synthetics-syntax>> for more information.
<3> In this example, our library of synthetic tests is downloaded from the
remote zip endpoint for https://github.com/elastic/synthetics/tree/master/examples/todos[our todos example]. 
<4> Note that the url refers to the endpoint where the test project exists.
<5> Folder refers to the relative path where the synthetic journey files are located. {heartbeat} will invoke the synthetics library on this folder.
<6> Username and password are blank here, but if provided, will be sent as HTTP Basic Authentication headers to the remote zip endpoint.

[discrete]
[[synthetics-quickstart-step-three]]
== Step 3: Run the container, connecting it to Elasticsearch

Before we proceed, you'll need to retrieve your Elasticsearch credentials for either an {heartbeat-ref}/configure-cloud-id.html[Elastic Cloud ID] or another {heartbeat-ref}/elasticsearch-output.html[Elasticsearch Cluster].

WARNING: Elastic synthetics runs Chromium without the extra protection of its process https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md[sandbox] for greater compatibility with Linux server distributions. Add the `sandbox: true` option to a given browser
monitor in {heartbeat} to enable sandboxing. This may require using a https://github.com/elastic/synthetics/blob/master/examples/docker/seccomp_profile.json[custom seccomp policy] with docker, which brings its own additional risks. This is generally safe when run against sites whose content you trust,
and with a recent version of Elastic synthetics and chromium.

The example below, run from the `examples/todos` directory shows how to run synthetics tests indexing data into Elasticsearch.

Run the script below to start running your synthetics tests. You'll need to insert your actual `cloud.id` and `cloud.auth` values to successfully index data to your cluster.

// NOTE: We do NOT use <1> references in the below example, because they create whitespace after the trailing \
// when copied into a shell, which creates mysterious errors when copy and pasting!
[source,sh,subs="+attributes"]
----
docker run \
  --rm \
  --name=heartbeat \
  --user=heartbeat \
  --volume="$PWD/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro" \
  {synthetics-image} heartbeat -e \
  -E cloud.id=cloud-id \
  -E cloud.auth=elastic:cloud-pass
----

If you aren't using {ecloud}, replace `-E cloud.id` and `-E cloud.auth` with your Elasticsearch hosts,
username, and password:

[source,sh,subs="attributes"]
----
docker run \
  --rm \
  --name=heartbeat \
  --user=heartbeat \
  --volume="$PWD/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro" \
  {synthetics-image} heartbeat -e \
  -E output.elasticsearch.hosts=["localhost:9200"] \
  -E output.elasticsearch.username=elastic \
  -E output.elasticsearch.password=changeme
----

Note the two `--volume` options, which mount local directories into the container. The first mounts the `heartbeat.yml` file configured above,
into {heartbeat}'s expected location for `heartbeat.yml`. The second mounts the test suite into the VM in the same location listed in the `source`
section of our `heartbeat.yml`.


[discrete]
[[synthetics-quickstart-step-five]]
== Step 4: View in {kib}

That's it! Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the app), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.

[discrete]
[[synthetics-quickstart-step-next]]
== Next steps

Now you can customize the provided Docker example with your own tests!
See <<synthetics-syntax>> to learn more.
