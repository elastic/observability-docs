[[uptime-get-started]]
= Get started with Uptime

IMPORTANT: *This approach can only be used to create lightweight monitors.* To create _browser_ monitors, use the <<synthetics-get-started,{synthetics-app}>>.

{heartbeat} is a lightweight daemon that you install on a remote server to periodically
check the status of your services and determine if they are available. It gathers performance data,
formats it, and sends the data to the {stack}.

image::images/synthetics-get-started-heartbeat.png[Diagram showing which pieces of software are used to configure monitors, create monitors, and view results when using {heartbeat}. Described in detail in Diagram text description.]

[NOTE]
====
The Elastic Synthetics integration is a method for creating
synthetic monitors that is no longer recommended.
*Do not use the Elastic Synthetics integration to set up new monitors.*

For details on how to migrate from Elastic Synthetics integration to
{project-monitors} or the {synthetics-app}, refer to <<synthetics-migrate-from-integration>>.

If you've used the Elastic Synthetics integration to create monitors in the past
and need to reference documentation about the integration, go to the
https://www.elastic.co/guide/en/observability/8.3/uptime-set-up.html#uptime-set-up-choose-agent[8.3 documentation].
====


[discrete]
[[uptime-set-up-docker]]
= Pull the Docker image

Elastic provides Docker images that you can use to run monitors.
Start by pulling the {heartbeat} Docker image.

ifeval::["{release-state}"=="unreleased"]

Version {version} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
----
docker pull docker.elastic.co/beats/heartbeat:{version}
----

endif::[]

[discrete]
[[uptime-set-up-config]]
= Configure

Next, create a `heartbeat.yml` configuration file.

The example below shows how to configure an `http` monitor, one of {heartbeat-ref}/configuration-heartbeat-options.html#monitor-types[three types of lightweight monitors].

[source,yml]
----
heartbeat.monitors:
- type: http
  id: service-status <1>
  name: Service Status
  service.name: my-apm-service-name
  hosts: ["http://localhost:80/service/status"]
  check.response.status: [200]
  schedule: '@every 5s'
----
<1> Each `monitor` gets its own ID in the {uptime-app} and its own schedule entry.
This allows tests to be run in parallel and analyzed separately.

Read more about configuration options in {heartbeat-ref}/configuration-heartbeat-options.html[Configure {heartbeat} monitors].

[WARNING]
====
*Do not use {heartbeat} to set up a _new_ `browser` monitor.* Instead, use the <<synthetics-get-started,{synthetics-app}>>.

If you previously used {heartbeat} to set up **`browser`** monitor, you can find resources in the
https://www.elastic.co/guide/en/beats/heartbeat/8.4/monitor-browser-options.html[8.4 {heartbeat} documentation].
====

[discrete]
[[uptime-set-up-connect]]
= Connect to the {stack}

After configuring the monitor, run it in Docker and connect the monitor to the {stack}.

ifeval::["{release-state}"=="unreleased"]

Version {version} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

You'll need to retrieve your {es} credentials for either an {heartbeat-ref}/configure-cloud-id.html[{ecloud} ID] or another {heartbeat-ref}/elasticsearch-output.html[{es} Cluster].

The example below, shows how to run synthetics tests indexing data into {es}.
You'll need to insert your actual `cloud.id` and `cloud.auth` values to successfully index data to your cluster.

// NOTE: We do NOT use <1> references in the below example, because they create whitespace after the trailing \
// when copied into a shell, which creates mysterious errors when copy and pasting!
[source,sh,subs="+attributes"]
----
docker run \
  --rm \
  --name=heartbeat \
  --user=heartbeat \
  --volume="$PWD/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro" \
  --cap-add=NET_RAW \
  docker.elastic.co/beats/heartbeat:{version} heartbeat -e \
  -E cloud.id={cloud-id} \
  -E cloud.auth=elastic:{cloud-pass}
----

If you aren't using {ecloud}, replace `-E cloud.id` and `-E cloud.auth` with your {es} hosts,
username, and password:

[source,sh,subs="attributes"]
----
docker run \
  --rm \
  --name=heartbeat \
  --user=heartbeat \
  --volume="$PWD/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml:ro" \
  --cap-add=NET_RAW \
  docker.elastic.co/beats/heartbeat:{version} heartbeat -e \
  -E output.elasticsearch.hosts=["localhost:9200"] \
  -E output.elasticsearch.username=elastic \
  -E output.elasticsearch.password=changeme
----

Note the `--volume` option, which mounts local directories into the
container. Here, we mount the `heartbeat.yml` from the working directory,
into {heartbeat}'s expected location for `heartbeat.yml`.

WARNING: Elastic Synthetics runs Chromium without the extra protection of its process
https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md[sandbox]
for greater compatibility with Linux server distributions.
Add the `sandbox: true` option to a given browser monitor in {heartbeat} to enable sandboxing.
This may require using a custom seccomp policy with docker, which brings its own added risks.
This is generally safe when run against sites whose content you trust,
and with a recent version of Elastic Synthetics and Chromium.

endif::[]

[discrete]
[[uptime-set-up-kibana]]
= View in {kib}

{heartbeat} is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the {uptime-app}), you'll be able to view the step script that failed,
any errors, and a stack trace.
For more information, refer to <<uptime-analyze>>.

[discrete]
[[uptime-manage]]
= Manage monitors

After you've created a monitor, you'll need to manage that monitor over time.
This might include updating or permanently deleting an existing monitor.

To update a monitor's configuration, update the relevant options in the {heartbeat}
configuration file, and the changes will be reflected in the monitors.

To permanently delete a monitor, delete the monitor entry in the `heartbeat.yml` file.
