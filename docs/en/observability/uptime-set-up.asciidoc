[[uptime-set-up]]
= Set up monitors

++++
<titleabbrev>Set up monitors</titleabbrev>
++++

To set up an uptime monitor, you will pull an Elastic-provided Docker image, configure the monitor,
and use the Docker image to run the monitor and send data back to Elasticsearch.
After setup is complete, the data will be available in the {uptime-app} in {kib} to view, analyze, and alert on.

[discrete]
[[uptime-set-up-choose]]
== Choose an approach

There are two ways to set up an uptime monitor: *{heartbeat}* or *{agent}*.

[discrete]
[[uptime-set-up-choose-heartbeat]]
=== Heartbeat

{heartbeat} is a lightweight daemon that you install on a remote server to periodically
check the status of your services and determine whether they are available.
Performance data is then gathered and reported back to {heartbeat},
where it is formatted and sent to the {stack}.

// What are the pros and cons?
Using {heartbeat} works well when...

The downsides of using {heartbeat} are...

[discrete]
[[uptime-set-up-choose-agent]]
=== {agent}

beta[] {agent} is a single, unified agent that you can deploy to hosts or containers to collect data and send it to the {stack}.
Behind the scenes, {agent} runs {beats} or {elastic-endpoint} required for your configuration. 

// What are the pros and cons?
Using {agent} works well when...

There are many benefits to using {agent} including central management, easier configuration processes, and endpoint protection (see more in {fleet-guide}/migrate-beats-to-agent.html#why-migrate-to-elastic-agent[Why migrate to Elastic Agent?]).
However, the Elastic Synthetics integration is currently in beta so...

The downsides of using {agent} are...

If you are using the {agent} approach, there are two prerequisites to complete before you can configure monitors:

* *Set up {fleet-server}*: If you are using Elastic Cloud fleet server will already be provided and you can skip this step.
To learn more, see <<set-up-fleet,{fleet}>>.
* *Create a separate fleet policy to use for Synthetics monitors*: It is generally the case that synthetics monitors should run on nodes dedicated to that purpose.
See {fleet-guide}/agent-policy.html#create-a-policy[{agent} policy] for more information on Fleet policies and creating them.

[discrete]
[[uptime-set-up-instructions]]
== Set up

Once you've chosen an approach, you can begin setting up your first monitor.

[discrete]
[[uptime-set-up-docker]]
=== Pull the Docker image

Start by pulling the Docker image.

--
include::tab-widgets/uptime-monitoring/set-up-docker-widget.asciidoc[]
--

[discrete]
[[uptime-set-up-config]]
=== Configure

Configure the monitor using either a `heartbeat.yml` configuration file or through the {agent} UI.

--
include::tab-widgets/uptime-monitoring/set-up-conf-widget.asciidoc[]
--

[discrete]
[[uptime-set-up-connect]]
=== Connect to the {stack}

After configuring the monitor, run it in Docker and connect the monitor to the {stack}.

--
include::tab-widgets/uptime-monitoring/set-up-connect-widget.asciidoc[]
--

[discrete]
[[uptime-set-up-kibana]]
=== View in {kib}

Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the {uptime-app}), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.

[discrete]
[[uptime-set-up-next]]
== Next steps

Now you can customize the provided Docker example with your own tests!
See <<synthetics-syntax>> to learn more.
