[[monitor-uptime-synthetics]]
= Uptime monitoring

++++
<titleabbrev>Uptime monitoring</titleabbrev>
++++

Synthetic monitoring extends traditional end-to-end testing techniques because it allows your tests to run continuously on the cloud.
With synthetic monitoring in the {uptime-app}, you can assert that your application continues to work after a deployment by reusing
the same journeys that you used to validate the software on your machine.

You can use synthetic monitors to detect bugs caused by invalid states you couldn't anticipate and didn't write tests for.
Synthetic monitors can also help you catch bugs in features that don't get enough traffic by allowing you to periodically simulate users' actions.

[discrete]
[[uptime-monitors]]
== Monitors

The {uptime-app} uses {agent} to check the status of your services and applications periodically.
By adding the Elastic Synthetics integration to the policy used by your agent, you can monitor the
availability of network endpoints and services using the following Uptime monitors:

* <<monitoring-uptime>>
* <<monitoring-synthetics>>

[discrete]
[[monitoring-uptime]]
// [[monitor-uptime]]
=== Lightweight HTTP/S, TCP, and ICMP checks

In the {uptime-app}, you can monitor the status of network endpoints using the following lightweight checks:

|===

| *ICMP monitor* | Check the availability of your hosts. The ICMP monitor uses ICMP (v4 and v6) Echo
Requests to check the network reachability of the hosts you are pinging. This will tell you whether the
host is available and connected to the network. However, it doesn't tell you if a service on the host is running or
not.

| *TCP monitor* | Monitor the services running on your hosts. The TCP monitor checks individual ports
to ensure the service is accessible and running.

| *HTTP monitor* | Monitor your website. The HTTP monitor checks to ensure specific endpoints return the correct
status code and display the correct text.

|===

[role="screenshot"]
image::images/uptime-app.png[Uptime app in Kibana]


// Along with getting notified when your <<tls-certificate-alert,TLS certificates>> are set to expire, you can also
// create an <<duration-anomaly-alert,Uptime duration anomaly >> rule to receive notifications based on the response durations for all of the
// geographic locations of each monitor.

// , explore
// endpoint status over time, drill down into specific monitors, and view a high-level
// snapshot of your environment at any point in time.

[discrete]
[[monitoring-synthetics]]
// [[synthetic-monitoring]]
=== Browser checks

// | *Browser monitor* | 

beta[] Real browser synthetic monitoring enables you to test critical actions and requests that an end-user would perform
on your site at predefined intervals and in a controlled environment.
The result is rich, consistent, and repeatable data that you can trend and alert on.

For example, you can test popular user journeys, like logging in, adding items to a cart, and checking
out -- actions that need to work for your users consistently.

Using the synthetics agent, you can run automated synthetic monitoring test suites on a real Chromium browser and
view each synthetic monitoring journey in the {uptime-app} side-by-side with your other monitors.

[role="screenshot"]
image::images/synthetic-app-overview.png[Synthetics app overview]

Alerting ensures that any degraded performance or broken actions are fixed before impacting your bottom line or customer
experience.

To get started writing user journeys, see <<synthetics-journeys>>.

// [TIP]
// ====
// Have a question? Want to leave feedback? Visit the
// https://discuss.elastic.co/tags/c/observability/uptime/75/synthetics[Synthetics discussion forum].
// ====

// [role="screenshot"]
// image::images/synthetic-app-overview.png[Synthetics app overview]

// beta[] The {uptime-app} uses {agent} to run automated synthetic monitoring test suites using a real Chromium browser.
// Using the `elastic-agent-complete` Docker container, create a *browser* monitor to mimic the user experience
// across multistep journeys and analyze what the browser displays for each step alongside a test script. 

// To get started, try out our {agent} using the `elastic-agent-complete` Docker container image. For details, refer
// to <<uptime-set-up,Get started using {agent} and {fleet}>>.

// Or you might prefer to get started using our customizable Docker project template. This template provides two
// types of sample tests: a two-step inline test and a packaged todo application with a custom suite of tests. For
// more details, see <<uptime-set-up,Get started using Docker>>.

[discrete]
[[view-certificate-status]]
== TLS Certificates

The TLS Certificates page in the {uptime-app} lists the TLS certificates that are being monitored and 
shows the TLS certificate data in your indices.

In addition to the common name, associated monitors, issuer information, and SHA fingerprints,
an assigned status is derived from the threshold values in the <<configure-uptime-settings,Settings>> page.

[role="screenshot"]
image::images/tls-certificates.png[TLS certificates]

The table entries can be sorted by _status_ and _valid until_. You can use the search bar at the
top of the view to find values in most of the TLS-related fields in your Uptime indices.

Additionally, you can select the *Alerts and rules* dropdown at the top of the page, and create a <<tls-certificate-alert,TLS rule>>.