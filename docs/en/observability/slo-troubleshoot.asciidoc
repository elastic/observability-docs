[[slo-troubleshoot-slos]]
= Troubleshoot service-level objectives (SLOs)

++++
<titleabbrev>Troubleshoot SLOs</titleabbrev>
++++

include::slo-overview.asciidoc[tag=slo-license]

This document provides an overview of common issues encountered when working with service-level objectives (SLOs). It explores the relationships between SLOs and other core functionalities within the stack, such as {ref}/transforms.html[transforms] and {ref}/ingest.html[ingest pipelines], highlighting how these integrations can impact the functionality of SLOs.

* <<slo-understanding-slos>>
* <<slo-common-problems>>
* <<slo-troubleshoot-actions>>

[discrete]
[[slo-understanding-slos]]
== Understanding SLOs

[TIP]
====
If you’re already familiar with how SLOs work and their relationship with other system components, such as transforms and ingest pipelines, you can jump directly to <<slo-common-problems>>.
====

An SLO is represented by several system resources:

* *SLO Definition*: Stored as a Kibana Saved Object.
* *Transforms*: For each SLO, {kib} creates two transforms:
** *Rolling-up transform*: Rolls up the data into a smaller set of documents.
** *Summarising transform*: Updates the latest values, such as the observed SLI or remaining error budget, for efficient searching and filtering of SLOs.
* *Additional resources*: {kib} also installs and manages shared resources to the SLOs, including index templates, indices, and ingest pipelines, among others.

The rollup documents are stored in an index named `.slo-observability.sli-v3` (index split per month through an ingest pipeline) while summary documents are stored in `.slo-observability.summary-v3`.

Each time an SLO is updated, a new transform is created using the latest SLO definition. The transform ID is generated by combining the SLO ID and the SLO revision, following the format: `slo-{slo.id}-{slo.revision}`.

Ensuring that transforms are functioning correctly and that the cluster is healthy is crucial for maintaining accurate and reliable SLOs.

(TBD: explain also the main pipelines associated with SLOs and their objectives?)
(TBD: anything to add about index templates or other indices being used?)

[discrete]
[[slo-common-problems]]
== Common problems

One of the common issues with SLOs arises when there are underlying problems in the cluster, such as unavailable shards or failed transforms. Since SLOs rely on transforms to aggregate and process data, any failure or misconfiguration in these components can lead to inaccurate or incomplete SLO calculations. Additionally, unavailable shards can affect the data retrieval process, further complicating the reliability of SLO metrics.

[discrete]
[[slo-no-transform-ingest-node]]
=== No transform or ingest nodes

Because SLOs depend on both {ref}/ingest.html[ingest pipelines] and {ref}/transforms.html[transforms] to process the data, it's essential to ensure that the cluster has nodes with the appropriate {ref}/modules-node.html#node-roles[roles].

Ensure the cluster includes one or more nodes with both `ingest` and `transform` roles to support the data processing and transformations required for SLOs to function properly. The roles can exist on the same node or be distributed across separate nodes.

[discrete]
[[slo-transform-unhealthy]]
=== Unhealthy transforms

When working with SLOs, ensuring that the associated transforms function correctly is crucial. Transforms are responsible for generating the data needed for SLOs, and typically, two transforms are created for each SLO. If you notice that your SLOs are not displaying the expected data, it's time to check the health of these associated transforms.

{kib} shows the following message when any of the associated transforms is in an unexpected state:

* `"The following transform is an unhealthy state"`, followed by a list of transforms, as shown in the picture:
(TBD: add screenshot of how the unhealthy transform report looks like, the warning introduced in 8.15)

In the case of reported **unhealthy transforms**, refer to the {ref}/transform-troubleshooting.html[troubleshooting transforms] documentation for detailed guidance on diagnosing and resolving transform-related issues.

Additionally, it is recommended to perform the following **transform checks**:

* Ensure the needed transforms for the SLOs haven't been deleted or stopped.
+
If a transform has been deleted the easiest way to recreate it is using the <<slo-troubleshoot-reset>> action, forcing the recreation of the transforms.
If a transform was stopped just try to start it.

* <<slo-troubleshoot-inspect>> to analyze the SLO definition and all associated resources.
+
Use the direct links offered by the **inspect UI** and check that all referenced resources exist, as that's not verified by the inspect functionality.
+
Use the `query composite` content to verify if the queries performed by the transforms are valid and return the expected data.

* Check the source data and queries of the SLO
+
The most common cause of legitimate transform failures is issues with the source data, such as timestamp parsing errors or incorrect query structures.

* As a last resort, consider <<slo-troubleshoot-reset, resetting the SLO>>.

[discrete]
[[slo-missing-pipeline]]
=== Missing Ingest Pipelines

(decide what to do here)

[discrete]
[[slo-missing-template]]
=== Missing Templates

(decide what to do here)

[discrete]
[[slo-missing-indices]]
=== Missing Indices or Shards

(decide what to do here. I'm sharing error examples I have collected to see if it makes sense to offer some background and context for issues that are not really related with SLOs logic but with other parts of the stack).

Other examples:
> Failed to execute phase [can_match], start; org.elasticsearch.action.search.SearchPhaseExecutionException: Search rejected due to missing shards [[.ds-metrics-apm.internal-default-2024.06.08-000030][1], [.ds-metrics-apm.service_transaction.1m-default-2024.06.07-000023][1], [.ds-metrics-apm.transaction.1m-default-2024.06.07-000024][1]]. Consider using `allow_partial_search_results` setting to bypass this error.

another (unavailable remote cluster (CCS))
> Validation Failed: 1: no such remote cluster: [metrics];2: no such remote cluster: [metrics];

> Some Transform failures can be totally unrelated to SLO/O11y but to platform (example: circuit breaker exceptions due to low memory on ES side).

[source,bash]
----
      "reason": """Failed to index documents into destination index due to permanent error: [org.elasticsearch.xpack.transform.transforms.BulkIndexingException: Bulk index experienced [500] failures and at least 1 irrecoverable [unable to parse date [1702842480000]]. Other failures: 
[IngestProcessorException] message [org.elasticsearch.ingest.IngestProcessorException: java.lang.IllegalArgumentException: unable to parse date [1702842480000]]; java.lang.IllegalArgumentException: unable to parse date [1702842480000]]""",

            "issue": "Transform task state is [failed]",
            "details": """Failed to index documents into destination index due to permanent error: [org.elasticsearch.xpack.transform.transforms.BulkIndexingException: Bulk index experienced [500] failures and at least 1 irrecoverable [unable to parse date [1702842480000]]. Other failures: 
[IngestProcessorException] message [org.elasticsearch.ingest.IngestProcessorException: java.lang.IllegalArgumentException: unable to parse date [1702842480000]]; java.lang.IllegalArgumentException: unable to parse date [1702842480000]]""",
            "count": 1
----

[discrete]
[[slo-troubleshoot-actions]]
== SLO troubleshooting actions

[discrete]
[[slo-troubleshoot-inspect]]
=== Inspect SLO assets

To be able to inspect SLOs, activate the following advanced setting in {kib}:

. Open {kib}'s *Stack Management* -> *Advanced Settings*
. Enable `observability:enableInspectEsQueries`

Afterwards visit the *SLO edit page* and click on *SLO Inspect* at the bottom of the page.

The *SLO Inspect* option provides a detailed report of an SLO, including:

* SLO configuration
* Rollup transform configuration
* Summary transform configuration
* Rollup ingest pipeline
* Summary ingest pipeline
* Temporary document
* Rollup transform query composite
* Summary transform query composite

These resources are very useful to for example try out the queries performed by the transforms and check the `ids` of all associated resources. The view also includes direct links to transforms and ingest pipelines sections of {kib}.

(TBD: should we add a screenshot here?)

[discrete]
[[slo-troubleshoot-reset]]
=== Reset SLO

Resetting an SLO forces the deletion of all SLI data, summary data, and transforms, and then reinstalls and processes the data. Essentially, it recreates the SLO as if it had been deleted and re-created by the user.

[NOTE]
====
While resetting an SLO can help resolve certain issues, it may not always address the root cause of errors. Most errors related to transforms typically arise from improperly structured source data, such as unparseable timestamps, which prevent the transform from progressing. Additionally, incorrect formatted SLO queries, and consequently transform queries, can also lead to failures.

Therefore, before resetting the SLO, verify that the source data and queries are correctly formatted and validated. Resetting should only be used as a last resort when all other troubleshooting steps have been exhausted.
====

Follow these steps to reset an SLO:

. Find **SLOs** in the main menu or use the {kibana-ref}/introduction.html#kibana-navigation-search[global search field].
. Click on the SLO to reset.
. Select *Actions* → *Reset*

Alternatively you can use {kib} API for the reset action:

[source,console]
----
POST kbn:/api/observability/slos/{sloId}∫/_reset
----

Where `sloId` can be obtained from the <<slo-troubleshoot-inspect>> action.

[discrete]
[[slo-troubleshoot-beta]]
== Upgrade from beta to GA

Starting in version 8.12.0, SLOs are generally available (GA).
If you're upgrading from a beta version of SLOs (available in 8.11.0 and earlier),
you must migrate your SLO definitions to a new format. Otherwise SLOs won't show up.

[%collapsible]
.Migrate your SLO definitions
====
To migrate your SLO definitions, open the SLO overview.
A banner will display the number of outdated SLOs detected.
For each outdated SLO, click **Reset**. If you no longer need the SLO, select **Delete**.

If you have a large number of SLO definitions, it is possible to automate this process.
To do this, you'll need to use two Elastic APIs:

* https://github.com/elastic/kibana/blob/9cb830fe9a021cda1d091effbe3e0cd300220969/x-pack/plugins/observability/docs/openapi/slo/bundled.yaml#L453-L514[SLO Definitions Find API] (`/api/observability/slos/_definitions`)
* https://github.com/elastic/kibana/blob/9cb830fe9a021cda1d091effbe3e0cd300220969/x-pack/plugins/observability/docs/openapi/slo/bundled.yaml#L368-L410[SLO Reset API] (`/api/observability/slos/${id}/_reset`)

Pass in `includeOutdatedOnly=1` as a query parameter to the Definitions Find API.
This will display your outdated SLO definitions.
Loop through this list, one by one, calling the Reset API on each outdated SLO definition.
The Reset API loads the outdated SLO definition and resets it to the new format required for GA.
Once an SLO is reset, it will start to regenerate SLIs and summary data.
====

[%collapsible]
.Remove legacy summary transforms
====
After migrating to 8.12 or later, you might have some legacy SLO summary transforms running.
You can safely delete the following legacy summary transforms:

[source,sh]
----------------------------------
# Stop all legacy summary transforms
POST _transform/slo-summary-occurrences-30d-rolling/_stop?force=true
POST _transform/slo-summary-occurrences-7d-rolling/_stop?force=true
POST _transform/slo-summary-occurrences-90d-rolling/_stop?force=true
POST _transform/slo-summary-occurrences-monthly-aligned/_stop?force=true
POST _transform/slo-summary-occurrences-weekly-aligned/_stop?force=true
POST _transform/slo-summary-timeslices-30d-rolling/_stop?force=true
POST _transform/slo-summary-timeslices-7d-rolling/_stop?force=true
POST _transform/slo-summary-timeslices-90d-rolling/_stop?force=true
POST _transform/slo-summary-timeslices-monthly-aligned/_stop?force=true
POST _transform/slo-summary-timeslices-weekly-aligned/_stop?force=true

# Delete all legacy summary transforms
DELETE _transform/slo-summary-occurrences-30d-rolling?force=true
DELETE _transform/slo-summary-occurrences-7d-rolling?force=true
DELETE _transform/slo-summary-occurrences-90d-rolling?force=true
DELETE _transform/slo-summary-occurrences-monthly-aligned?force=true
DELETE _transform/slo-summary-occurrences-weekly-aligned?force=true
DELETE _transform/slo-summary-timeslices-30d-rolling?force=true
DELETE _transform/slo-summary-timeslices-7d-rolling?force=true
DELETE _transform/slo-summary-timeslices-90d-rolling?force=true
DELETE _transform/slo-summary-timeslices-monthly-aligned?force=true
DELETE _transform/slo-summary-timeslices-weekly-aligned?force=true
----------------------------------

Do not delete any new summary transforms used by your migrated SLOs.
====

[discrete]
[[slo-api-calls]]
== Using API calls to retrieve SLO details

TBD: determine if we need this section or not. I think it's NOT needed, as SLO Inspect offers all details already.

The following {kib} API calls are useful to retrieve different level of details of the SLOs and surrounding components.

[discrete]
[[slo-api-find]]
=== Find SLO definitions

You can achieve this in multiple ways:

* From Saved Objects

The following query returns the stored SLO definitions. SLO, and therefore this API, is space aware.

[source,console]
----------------------------------
GET kbn:/s/{space}/api/saved_objects/_find?type=slo
----------------------------------

* Through _definitions API

The following internal API returns the SLO definitions. It is space aware.

[source,console]
----------------------------------
GET kbn:/s/{space}/api/observability/slos/_definitions
----------------------------------

* Through slos API

The following public API returns the total number of SLOs, including the group by instances. It is space aware.

[source,console]
----------------------------------
GET kbn:/s/{space}/api/observability/slos
----------------------------------

* Through UI

Users can also get the total number of SLOs through the SLO UI. In the SLO Overview page we display the total number of SLOs.

* Via Raw Kibana index

[source,console]
----------------------------------
GET .kibana*/_search
{
  "size": 10, # adjust this
  "query": {
    "term": {
      "type": {
        "value": "slo"
      }
    }
  } 
}
----------------------------------


[discrete]
[[slo-api-find-specific]]
=== Find definition for a specific SLO

The following internal API returns the SLO definition for a specific SLO, filtered by the name of the SLO:

[source,console]
----------------------------------
GET kbn:/api/observability/slos/_definitions?search=Some SLO
----------------------------------



[discrete]
[[slo-api-find-rollup]]
=== Find rollup SLO transforms

Each SLO creates a rollup transform, and everytime you update the SLO a new transform is created with the latest definition.

The transform id is built with the slo id and the slo revision as `slo-{slo.id}-{slo.revision}`.

Fetch a specific transform for a given SLO using this call:

[source,console]
----------------------------------
GET _transform/slo-{id}-{revision}
----------------------------------

You can also fetch all transforms using:

GET _transform/slo-*

[discrete]
[[slo-api-rollup-documents]]
=== Search the rollup documents for an SLO

It can be useful to fetch the latest rollup document for a given slo id and optionally an instance id, in case investigating why an SLO shows as no data for too long.

[source,console]
----------------------------------
POST .slo-observability.sli-v3*/_search
{
  "sort": [
    {
      "event.ingested": {
        "order": "desc"
      }
    }
  ], 
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "slo.id": "id"
          }
        },
        {
          "term": {
            "slo.instanceId": "instanceId"
          }
        }
      ]
    }
  }
}
----------------------------------

[discrete]
[[slo-api-summary-documents]]
=== Search the summary documents for an SLO

It can be useful to fetch the latest summary document for a given slo id and optionally an instance id:

[source,console]
----------------------------------
POST .slo-observability.summary-v3*/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "slo.id": "id"
          }
        },
        {
          "term": {
            "slo.instanceId": "instanceId"
          }
        }
      ]
    }
  }
}
----------------------------------