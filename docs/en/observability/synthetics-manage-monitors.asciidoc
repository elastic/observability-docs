[[synthetics-manage-monitors]]
= Manage monitors

After you've <<synthetics-get-started, created a synthetic monitor>>,
you'll need to manage that monitor over time. This might include updating
or permanently deleting an existing monitor.

If you're using {project-monitors}, you should also set up a workflow that uses
<<synthetics-projects-best-practices,best practices for managing monitors effectively>>
in a production environment.

[discrete]
[[manage-monitors-config]]
= Update a monitor

You can update a monitor's configuration, for example, changing the interval at which
the monitor runs a test.

You can also update the journey used in a browser monitor.
For example, if you update the UI used in your application, you may want to update
your journey's selectors and assertions.

include::tab-widgets/synthetics/manage-monitors-update-monitor-widget.asciidoc[]

[discrete]
[[manage-monitors-delete]]
= Delete a monitor 

Eventually you might want to delete a monitor altogether.
For example, if the user journey you were validating no longer exists.

include::tab-widgets/synthetics/manage-monitors-delete-monitor-widget.asciidoc[]

Alternatively, you can temporarily disable a monitor by updating the monitor's
configuration in your journey's code or in the {synthetics-app} using the _Enabled_ toggle.

[discrete]
[[synthetics-projects-best-practices]]
= Implement best practices for projects

IMPORTANT: This is only relevant to monitors created using projects.

After you've <<synthetics-get-started-project,set up a project>>,
there are some best practices you can implement to manage {project-monitors} effectively.

[discrete]
[[synthetics-version-control]]
== Use version control

First, it's recommended that you version control all files in Git.
If your project is not already in a version controlled directory add it
and push it to your Git host.

[discrete]
[[synthetics-workflow]]
== Set up recommended workflow

While it can be convenient to run the `push` command directly from your workstation,
especially when setting up a new project, it is not recommended for production environments.

Instead, we recommended that you:

. Develop and test changes locally.
. Create a pull request for all config changes.
. Have your CI service automatically verify the PR by running `npx @elastic/synthetics .`
+
Elastic's synthetics runner can output results in a few different formats,
including JSON and JUnit (the standard format supported by most CI platforms).
+
If any of your journeys fail, it will yield a non-zero exit code, which most CI systems pick up as a failure by default.
. Have a human approve the pull request.
. Merge the pull request.
. Have your CI service automatically deploy the change by running `npx @elastic/synthetics push` after changes are merged.

The exact implementation details will depend on the CI system and Git host you use. 
You can reference the sample GitHub configuration file that is included in the `.github`
directory when you create a new project.

// or find an example in the
// https://github.com/elastic/synthetics-demo/blob/main/.github/workflows/run-synthetics.yml[elastic/synthetics-demo] repository.
