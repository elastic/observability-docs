// tag::android[]
*1. Add the agent to your project*

First, add the https://plugins.gradle.org/plugin/co.elastic.apm.android[Elastic APM agent plugin] to your application's `build.gradle` file as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    id "com.android.application"
    id "co.elastic.apm.android" version "[latest_version]" <1>
}
----
<1> The Elastic plugin declaration must be added below the Android app plugin declaration (`com.android.application`) and below the Kotlin plugin declaration (if used).

*2. Configure the agent*

After adding the agent plugin, configure it.
A minimal configuration sets the Elastic APM integration endpoint as shown below:

[source,groovy]
----
// Android app's build.gradle file
plugins {
    //...
    id "co.elastic.apm.android" version "[latest_version]" <1>
}

elasticApm {
    // Minimal configuration
    serverUrl = "https://your.elastic.server"

    // Optional
    serviceName = "your app name" <2>
    serviceVersion = "0.0.0" <3>
    apiKey = "your server api key" <4>
    secretToken = "your server auth token" <5>
}
----
<1> You can find the latest version in the https://plugins.gradle.org/plugin/co.elastic.apm.android[Gradle plugin portal].
<2> Defaults to your `android.defaultConfig.applicationId` value.
<3> Defaults to your `android.defaultConfig.versionName` value.
<4> Defaults to null.
More info on API Keys {ref}/security-api-create-api-key.html[here].
<5> Defaults to null.

NOTE: When both `secretToken` and `apiKey` are provided, apiKey has priority and secretToken is ignored.

*3. Initialize the agent*

After syncing your project with the Gradle changes above, the Elastic APM agent needs to be initialized within your https://developer.android.com/reference/android/app/Application[Application class].
This example shows the simplest way to configure the agent:

[source,java]
----
// Your Application class

class MyApp extends android.app.Application {

    @Override
    public void onCreate() {
        super.onCreate();
        ElasticApmAgent.initialize(this); <1>
    }
}
----
<1> Initialize the Elastic APM agent once.

All that's left is to compile and run your application.
That's it!

*Learn more in the agent reference*

Read more in the {apm-android-ref}/intro.html[APM Android Agent Reference].
// end::android[]

// tag::go[]
*1. Install the agent*

Install the Elastic APM Go agent package using `go get`:

[source,bash]
----
go get -u go.elastic.co/apm/v2
----

*2. Configure the agent*

To simplify development and testing,
the agent defaults to sending data to the Elastic APM integration at `http://localhost:8200`.
To send data to an alternative location, you must configure `ELASTIC_APM_SERVER_URL`.

[source,go]
----
# The APM integration host and port
export ELASTIC_APM_SERVER_URL=

# If you do not specify `ELASTIC_APM_SERVICE_NAME`, the Go agent will use the
# executable name. For example, if your executable is called "my-app.exe", then your
# service will be identified as "my-app".
export ELASTIC_APM_SERVICE_NAME=

# Secret tokens are used to authorize requests to the APM integration
export ELASTIC_APM_SECRET_TOKEN=
----

*3. Instrument your application*

Instrumentation is the process of extending your applicationâ€™s code to report trace data to Elastic APM. Go applications must be instrumented manually at the source code level. To instrument your applications, use one of the following approaches:

* {apm-go-ref-v}/builtin-modules.html[Built-in instrumentation modules].
* {apm-go-ref-v}/custom-instrumentation.html[Custom instrumentation] and context propagation with the Go Agent API.

*Learn more in the agent reference*

* {apm-go-ref-v}/supported-tech.html[Supported technologies]
* {apm-go-ref-v}/configuration.html[Advanced configuration]
* {apm-go-ref-v}/getting-started.html[Detailed guide to instrumenting Go source code]
// end::go[]

// ***************************************************
// ***************************************************

// tag::ios[]

*1. Add the agent dependency to your project*

Add the Elastic APM iOS Agent to your Xcode project or your `Package.swift`.

Here are instructions for adding a https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app[package dependency] to a standard Xcode project.

Refer to https://developer.apple.com/documentation/xcode/creating_a_standalone_swift_package_with_xcode#3578941['Add a Dependency on Another Swift Package'] for details about adding dependencies to your `Package.swift`.
Here is a helpful code-snippet:

[source,swift]
----
Package(
    dependencies:[
         .package(name: "apm-agent-ios", url: "https://github.com/elastic/apm-agent-ios.git", from: "1.0.0"),
    ],
  targets:[
    .target(
        name: "MyApp",
        dependencies: [
            .product(name: "ElasticApm", package: "apm-agent-ios")
        ]
    ),
])
----

*2. Initialize the agent*

If you're using `SwiftUI` to build your app, add the following to your `App.swift`:

[source,swift]
----
import SwiftUI
import ElasticApm

class AppDelegate : NSObject, UIApplicationDelegate {
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        var config = AgentConfigBuilder()
            .withServerUrl(URL(string:"http://127.0.0.1:8200")) <1>
            .withSecretToken("<SecretToken>") <2>
            .build()

        ElasticApmAgent.start(with: config)
        return true
    }
}

@main
struct MyApp: App {
    @UIApplicationDelegateAdaptor(AppDelegate.self) var appDelegate
    init() {
    }
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
----
<1> The APM integration host and port
<2> Secret token for APM integration connection

If you're not using `SwiftUI`, you can alternatively add the same thing to your `AppDelegate.swift` file:

[source,swift]
----
import UIKit
import ElasticApm
@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
var config = AgentConfigBuilder()
                       .withServerUrl(URL(string:"http://127.0.0.1:8200")) <1>
                       .withSecretToken("<SecretToken>") <2>
                       .build()
        ElasticApmAgent.start(with: config)
        return true
    }
}
----
<1> The APM integration host and port
<2> Secret token for APM integration connection

*Learn more in the agent reference*

Read more in the {apm-ios-ref}/intro.html[APM iOS Agent Reference].
// end::ios[]

// ***************************************************
// ***************************************************

// tag::java[]
Manually set up and configure the agent with the `-javaagent` JVM option. No application code change is required, but this requires an
application restart. See below for more information on this setup method.

*1. Download the {apm-agent}*

The first step in getting started with the Elastic APM Java agent is to retrieve a copy of the agent JAR.
Java agent releases are published to https://repo.maven.apache.org/maven2/[Maven central]. In order to get a copy you can either:

- download the link:https://oss.sonatype.org/service/local/artifact/maven/redirect?r=releases&g=co.elastic.apm&a=elastic-apm-agent&v=LATEST[latest agent]
or link:https://mvnrepository.com/artifact/co.elastic.apm/elastic-apm-agent[previous releases] from Maven central.
- download with `curl`:
+
[source,bash]
----
curl -o 'elastic-apm-agent.jar' -L 'https://oss.sonatype.org/service/local/artifact/maven/redirect?r=releases&g=co.elastic.apm&a=elastic-apm-agent&v=LATEST'
----

*2. Add `-javaagent` flag*

When starting your application, add the JVM flag `-javaagent:/path/to/elastic-apm-agent-<version>.jar`

*3. Configure*

Different application servers have different ways of setting the `-javaagent` flag and system properties.
Start your application (for example a Spring Boot application or other embedded servers) and add the `-javaagent` JVM flag.
Use the `-D` prefix to configure the agent using system properties:

[source,bash]
----
java -javaagent:/path/to/elastic-apm-agent-<version>.jar -Delastic.apm.service_name=my-cool-service -Delastic.apm.application_packages=org.example,org.another.example -Delastic.apm.server_url=http://127.0.0.1:8200 -jar my-application.jar
----

Refer to {apm-java-ref-v}/setup-javaagent.html[Manual setup with `-javaagent` flag] to learn more.

*Alternate setup methods*

* **Automatic setup with `apm-agent-attach-cli.jar`** +
  Automatically set up the agent without needing to alter the configuration of your JVM or application server. This method requires no changes to application code
  or JVM options, and allows attaching to a running JVM. Refer to the {apm-java-ref-v}/setup-attach-cli.html[Java agent documentation] for more information on this setup method.
* **Programmatic API setup to self-attach** +
  Set up the agent with a one-line code change and an extra `apm-agent-attach` dependency. This method requires no changes to JVM options, and
  the agent artifact is embedded within the packaged application binary. Refer to the {apm-java-ref-v}/setup-attach-api.html[Java agent documentation] for more information on this setup method.

// end::java[]

// ***************************************************
// ***************************************************

// tag::net[]
*Set up the {apm-agent}*

The .NET agent can be added to an application in a few different ways:

* **Profiler runtime instrumentation**:
The agent supports auto instrumentation without any code change and without
any recompilation of your projects. See {apm-dotnet-ref-v}/setup-auto-instrumentation.html[Profiler auto instrumentation].
* **NuGet packages**:
The agent ships as a set of {apm-dotnet-ref-v}/packages.html[NuGet packages] available on https://nuget.org[nuget.org].
You can add the Agent and specific instrumentations to a .NET application by
referencing one or more of these packages and following the package documentation.
* **Host startup hook**:
On .NET Core 3.0+ or .NET 5+, the agent supports auto instrumentation without any code change and without
any recompilation of your projects. See {apm-dotnet-ref-v}/setup-dotnet-net-core.html[Zero code change setup on .NET Core]
for more details.

*Learn more in the agent reference*

* {apm-dotnet-ref-v}/supported-technologies.html[Supported technologies]
* {apm-dotnet-ref-v}/configuration.html[Advanced configuration]
// end::net[]

// ***************************************************
// ***************************************************

// tag::node[]
*1. Install the {apm-agent}*

Install the {apm-agent} for Node.js as a dependency to your application.

[source,js]
----
npm install elastic-apm-node --save
----

*2. Initialization*

It's important that the agent is started before you require *any* other modules in your Node.js application - i.e. before `http` and before your router etc.

This means that you should probably require and start the agent in your application's main file (usually `index.js`, `server.js` or `app.js`).

Here's a simple example of how Elastic APM is normally required and started:

[source,js]
----
// Add this to the VERY top of the first file loaded in your app
var apm = require('elastic-apm-node').start({
  // Override service name from package.json
  // Allowed characters: a-z, A-Z, 0-9, -, _, and space
  serviceName: '',

  // Use if APM integration requires a token
  secretToken: '',

  // Use if APM integration uses API keys for authentication
  apiKey: '',

  // Set custom APM integration host and port (default: http://127.0.0.1:8200)
  serverUrl: '',
})
----

The agent will now monitor the performance of your application and record any uncaught exceptions.

*Learn more in the agent reference*

* {apm-node-ref-v}/supported-technologies.html[Supported technologies]
* {apm-node-ref-v}/advanced-setup.html[Babel/ES Modules]
* {apm-node-ref-v}/configuring-the-agent.html[Advanced configuration]

// end::node[]

// ***************************************************
// ***************************************************

// tag::php[]

*1. Install the agent*

Install the agent using one of the https://github.com/elastic/apm-agent-php/releases/latest[packages for supported platforms].

To use the RPM Package (RHEL/CentOS and Fedora):

[source,bash]
----
rpm -ivh <package-file>.rpm
----

To use the DEB package (Debian and Ubuntu):

[source,bash]
----
dpkg -i <package-file>.deb
----

To use the APK package (Alpine):

[source,bash]
----
apk add --allow-untrusted <package-file>.apk
----

If you canâ€™t find your distribution, you can install the agent by building it from the source.
The following instructions will build the APM agent using the same docker environment that Elastic uses to build our official packages.

NOTE: The agent is currently only available for Linux operating system.

1. Download the agent source from https://github.com/elastic/apm-agent-php/.
2. Execute the following commands to build the agent and install it:

[source,bash]
----
cd apm-agent-php
# for linux glibc - libc distributions (Ubuntu, Redhat, etc)
export BUILD_ARCHITECTURE=linux-x86-64
# for linux with musl - libc distributions (Alpine)
export BUILD_ARCHITECTURE=linuxmusl-x86-64
# provide a path to php-config tool
export PHP_CONFIG=php-config

# build extensions
make -f .ci/Makefile build

# run extension tests
PHP_VERSION=`$PHP_CONFIG --version | cut -d'.' -f 1,2` make -f .ci/Makefile run-phpt-tests

# install agent extensions
sudo cp agent/native/_build/${BUILD_ARCHITECTURE}-release/ext/elastic_apm-*.so `$PHP_CONFIG --extension-dir`

# install automatic loader
sudo cp agent/native/_build/${BUILD_ARCHITECTURE}-release/loader/code/elastic_apm_loader.so `$PHP_CONFIG --extension-dir`
----

*2. Enable and configure the APM agent*

Enable and configure your agent inside of the `php.ini` file:

[source,ini]
----
extension=elastic_apm_loader.so
elastic_apm.bootstrap_php_part_file=<repo root>/agent/php/bootstrap_php_part.php
----

*Learn more in the agent reference*

* {apm-php-ref-v}/supported-technologies.html[Supported technologies]
* {apm-php-ref-v}/configuration.html[Configuration]

// end::php[]

// ***************************************************
// ***************************************************

// tag::python[]
Django::
+
*1. Install the {apm-agent}*
+
Install the {apm-agent} for Python as a dependency.
+
[source,python]
----
$ pip install elastic-apm
----
+
*2. Configure the agent*
+
Agents are libraries that run inside of your application process.
APM services are created programmatically based on the `SERVICE_NAME`.
+
[source,python]
----
# Add the agent to the installed apps
INSTALLED_APPS = (
  'elasticapm.contrib.django',
  # ...
)

ELASTIC_APM = {
  # Set required service name. Allowed characters:
  # a-z, A-Z, 0-9, -, _, and space
  'SERVICE_NAME': '',

  # Use if APM integration requires a token
  'SECRET_TOKEN': '',

  # Set custom APM integration host and port (default: http://localhost:8200)
  'SERVER_URL': '',
}

# To send performance metrics, add our tracing middleware:
MIDDLEWARE = (
  'elasticapm.contrib.django.middleware.TracingMiddleware',
  #...
)
----

Flask::
+
*1. Install the {apm-agent}*
+
Install the {apm-agent} for Python as a dependency.
+
[source,python]
----
$ pip install elastic-apm[flask]
----
+
*2. Configure the agent*
+
Agents are libraries that run inside of your application process.
APM services are created programmatically based on the `SERVICE_NAME`.
+
[source,python]
----
# initialize using environment variables
from elasticapm.contrib.flask import ElasticAPM
app = Flask(__name__)
apm = ElasticAPM(app)

# or configure to use ELASTIC_APM in your application settings
from elasticapm.contrib.flask import ElasticAPM
app.config['ELASTIC_APM'] = {
  # Set required service name. Allowed characters:
  # a-z, A-Z, 0-9, -, _, and space
  'SERVICE_NAME': '',

  # Use if APM integration requires a token
  'SECRET_TOKEN': '',

  # Set custom APM integration host and port (default: http://localhost:8200)
  'SERVER_URL': '',
}

apm = ElasticAPM(app)
----

*Learn more in the agent reference*

* {apm-py-ref-v}/supported-technologies.html[Supported technologies]
* {apm-py-ref-v}/configuration.html[Advanced configuration]

// end::python[]

// ***************************************************
// ***************************************************

// tag::ruby[]
*1. Install the {apm-agent}*

Add the agent to your Gemfile.

[source,ruby]
----
gem 'elastic-apm'
----
*2. Configure the agent*

Ruby on Rails::
+
APM is automatically started when your app boots.
Configure the agent by creating the config file `config/elastic_apm.yml`:
+
[source,ruby]
----
# config/elastic_apm.yml:

# Set service name - allowed characters: a-z, A-Z, 0-9, -, _ and space
# Defaults to the name of your Rails app
service_name: 'my-service'

# Use if APM integration requires a token
secret_token: ''

# Set custom APM integration host and port (default: http://localhost:8200)
server_url: 'http://localhost:8200'
----

Rack::
+
For Rack or a compatible framework, like Sinatra, include the middleware in your app and start the agent.
+
[source,ruby]
----
# config.ru

app = lambda do |env|
  [200, {'Content-Type' => 'text/plain'}, ['ok']]
end

# Wraps all requests in transactions and reports exceptions
use ElasticAPM::Middleware

# Start an instance of the Agent
ElasticAPM.start(service_name: 'NothingButRack')

run app

# Gracefully stop the agent when process exits.
# Makes sure any pending transactions are sent.
at_exit { ElasticAPM.stop }
----
+
*Create a config file*
+
Create a config file config/elastic_apm.yml:
+
[source,ruby]
----
# config/elastic_apm.yml:

# Set service name - allowed characters: a-z, A-Z, 0-9, -, _ and space
# Defaults to the name of your Rack app's class.
service_name: 'my-service'

# Use if APM integration requires a token
secret_token: ''

# Set custom APM integration host and port (default: http://localhost:8200)
server_url: 'http://localhost:8200'
----

*Learn more in the agent reference*

* {apm-ruby-ref-v}/supported-technologies.html[Supported technologies]
* {apm-ruby-ref-v}/configuration.html[Advanced configuration]

// end::ruby[]

// ***************************************************
// ***************************************************

// tag::rum[]
*1. Enable Real User Monitoring (RUM)*

RUM is disabled by default. Enable it by setting `Enable RUM` to `true`.

*2. Set up the agent*

Set up the agent with `<script>` tags or by using a bundler.

_Synchronous / Blocking Pattern_

Add a <script> tag to load the bundle and use the `elasticApm` global
object to initialize the agent:

[source,html]
----
<script src="https://<your-cdn-host>.com/path/to/elastic-apm-rum.umd.min-<version>.js" crossorigin></script>
<script>
  elasticApm.init({
    serviceName: '<instrumented-app>',
    serverUrl: '<apm-server-url>',
  })
</script>
----

_Asynchronous / Non-Blocking Pattern_

Loading the script asynchronously ensures the agent script will not block other
resources on the page, however, it will still block browsers `onload` event.

[source,html]
----
<script>
  ;(function(d, s, c) {
    var j = d.createElement(s),
      t = d.getElementsByTagName(s)[0]

    j.src = 'https://<your-cdn-host>.com/path/to/elastic-apm-rum.umd.min-<version>.js'
    j.onload = function() {elasticApm.init(c)}
    t.parentNode.insertBefore(j, t)
  })(document, 'script', {serviceName: '<instrumented-app>', serverUrl: '<apm-server-url>'})
</script>
----

_Using Bundlers_

Install the Real User Monitoring APM agent as a dependency to your application:

[source,bash]
----
npm install @elastic/apm-rum --save
----

Configure the agent:

[source,js]
----
import { init as initApm } from '@elastic/apm-rum'

const apm = initApm({

  // Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)
  serviceName: '',

  // Set custom APM integration host and port (default: http://localhost:8200)
  serverUrl: 'http://localhost:8200',

  // Set service version (required for sourcemap feature)
  serviceVersion: ''
})
----

*Learn more in the agent reference*

* {apm-rum-ref-v}/supported-technologies.html[Supported technologies]
* {apm-rum-ref-v}/configuration.html[Advanced configuration]

// end::rum[]
