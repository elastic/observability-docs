:global-flags: Also see <<global-flags,Global flags>>.

:deploy-command-short-desc: Deploys the specified function to your serverless environment

:apikey-command-short-desc: Manage API Keys for communication between APM agents and server.

ifndef::serverless[]
:export-command-short-desc: Exports the configuration, index template, or {ilm-init} policy to stdout
endif::serverless[]

ifdef::serverless[]
:export-command-short-desc: Exports the configuration, index template, or {cloudformation-ref} template to stdout
endif::serverless[]

:help-command-short-desc: Shows help for any command
:keystore-command-short-desc: Manages the <<keystore,secrets keystore>>
:modules-command-short-desc: Manages configured modules
:package-command-short-desc: Packages the configuration and executable into a zip file
:remove-command-short-desc: Removes the specified function from your serverless environment
:run-command-short-desc: Runs APM Server. This command is used by default if you start APM Server without specifying a command

:update-command-short-desc: Updates the specified function
:test-command-short-desc: Tests the configuration
:version-command-short-desc: Shows information about the current version

// end::attributes[]

[[command-line-options]]
=== APM Server command reference

++++
<titleabbrev>Command reference</titleabbrev>
++++

IMPORTANT: These commands only apply to the APM Server binary installation method.

APM Server provides a command-line interface for starting APM Server and
performing common tasks, like testing configuration files.

The command-line also supports <<global-flags,global flags>>
for controlling global behaviors.

[TIP]
=========================
Use `sudo` to run the following commands if:

* the config file is owned by `root`, or
* APM Server is configured to capture data that requires `root` access

=========================

Some of the features described here require an Elastic license. For
more information, see https://www.elastic.co/subscriptions and
{kibana-ref}/managing-licenses.html[License Management].


[options="header"]
|=======================
|Commands |
|<<apikey-command,`apikey`>> |{apikey-command-short-desc}.
|<<export-command,`export`>> |{export-command-short-desc}.
|<<help-command,`help`>> |{help-command-short-desc}.
ifndef::serverless[]
|<<keystore-command,`keystore`>> |{keystore-command-short-desc}.
endif::[]
ifndef::serverless[]
|<<run-command,`run`>> |{run-command-short-desc}.
endif::[]
|<<test-command,`test`>> |{test-command-short-desc}.
|<<version-command,`version`>> |{version-command-short-desc}.
|=======================

Also see <<global-flags,Global flags>>.

[float]
[[apikey-command]]
==== `apikey` command

experimental::[]

deprecated::[8.6.0, Users should create API Keys through {kib} or the {es} REST API. See <<api-key>>.]

Communication between APM agents and APM Server now supports sending an
<<api-key,API Key in the Authorization header>>.
APM Server provides an `apikey` command that can create, verify, invalidate,
and show information about API Keys for agent/server communication.
Most operations require the `manage_own_api_key` cluster privilege,
and you must ensure that `apm-server.api_key` or `output.elasticsearch` are configured appropriately.

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server apikey SUBCOMMAND [FLAGS]
----

*`SUBCOMMAND`*

// tag::apikey-subcommands[]
*`create`*::
Create an API Key with the specified privilege(s). No required flags.
+
The user requesting to create an API Key needs to have APM privileges used by the APM Server.
A superuser, by default, has these privileges. For other users,
you can create them. See <<privileges-api-key,create an API key user>> for required privileges.

*`info`*::
Query API Key(s). `--id` or `--name` required.

*`invalidate`*::
Invalidate API Key(s). `--id` or `--name` required.

*`verify`*::
Check if a credentials string has the given privilege(s).
 `--credentials` required.
// end::apikey-subcommands[]

*FLAGS*

*`--agent-config`*::
Required for agents to read configuration remotely. Valid with the `create` and `verify` subcommands.
When used with `create`, gives the `config_agent:read` privilege to the created key.
When used with `verify`, asks for the `config_agent:read` privilege.

*`--credentials CREDS`*::
Required for the `verify` subcommand. Specifies the credentials for which to check privileges.
Credentials are the base64 encoded representation of the API key's `id:api_key`.

*`--expiration TIME`*::
When used with `create`, specifies the expiration for the key, e.g., "1d" (default never).

*`--id ID`*::
ID of the API key. Valid with the `info` and `invalidate` subcommands.
When used with `info`, queries the specified ID.
When used with `invalidate`, deletes the specified ID.

*`--ingest`*::
Required for ingesting events. Valid with the `create` and `verify` subcommands.
When used with `create`, gives the `event:write` privilege to the created key.
When used with `verify`, asks for the `event:write` privilege.

*`--json`*::
Prints the output of the command as JSON.
Valid with all `apikey` subcommands.

*`--name NAME`*::
Name of the API key(s). Valid with the `create`, `info`, and `invalidate` subcommands.
When used with `create`, specifies the name of the API key to be created (default: "apm-key").
When used with `info`, specifies the API key to query (multiple matches are possible).
When used with `invalidate`, specifies the API key to delete (multiple matches are possible).

*`--sourcemap`*::
Required for uploading source maps. Valid with the `create` and `verify` subcommands.
When used with `create`, gives the `sourcemap:write` privilege to the created key.
When used with `verify`, asks for the `sourcemap:write` privilege.

*`--valid-only`*::
When used with `info`, only returns valid API Keys (not expired or invalidated).

{global-flags}

*EXAMPLES*

["source","sh",subs="attributes"]
-----
apm-server apikey create --ingest --agent-config --name example-001
apm-server apikey info --name example-001 --valid-only
apm-server apikey invalidate --name example-001
-----

For more information, see <<api-key>>.

[float]
[[export-command]]
==== `export` command

ifndef::serverless[]
{export-command-short-desc}. You can use this
command to quickly view your configuration or see the contents of the index
template or the {ilm-init} policy.
endif::serverless[]

ifdef::serverless[]
{export-command-short-desc}. You can use this
command to quickly view your configuration, see the contents of the index
template and the {ilm-init} policy, or export an CloudFormation template.
endif::serverless[]

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server export SUBCOMMAND [FLAGS]
----

*`SUBCOMMAND`*

*`config`*::
Exports the current configuration to stdout. If you use the `-c` flag, this
command exports the configuration that's defined in the specified file.

[[template-subcommand]]*`template`*::
Exports the index template to stdout. You can specify the `--es.version` and
`--index` flags to further define what gets exported. Furthermore you can export
the template to a file instead of `stdout` by defining a directory via `--dir`.

[[ilm-policy-subcommand]]
*`ilm-policy`*::
Exports the {ilm} policy to stdout. You can specify the
`--es.version` and a `--dir` to which the policy should be exported as a
file rather than exporting to `stdout`.

ifdef::serverless[]
[[function-subcommand]]*`function` FUNCTION_NAME*::
Exports an {cloudformation-ref} template to stdout.
endif::serverless[]

*FLAGS*

*`--es.version VERSION`*::
When used with <<template-subcommand,`template`>>, exports an index
template that is compatible with the specified version.
When used with <<ilm-policy-subcommand,`ilm-policy`>>, exports the {ilm-init} policy
if the specified ES version is enabled for {ilm-init}.

*`-h, --help`*::
Shows help for the `export` command.

*`--index BASE_NAME`*::
When used with <<template-subcommand,`template`>>, sets the base name to use for
the index template. If this flag is not specified, the default base name is
+apm-server+.

*`--dir DIRNAME`*::
Define a directory to which the template and {ilm-init} policy should be exported to
as files instead of printing them to `stdout`.

{global-flags}

*EXAMPLES*

ifndef::serverless[]
["source","sh",subs="attributes"]
-----
apm-server export config
apm-server export template --es.version {version} --index myindexname
-----
endif::serverless[]

ifdef::serverless[]
["source","sh",subs="attributes"]
-----
apm-server export config
apm-server export template --es.version {version} --index myindexname
apm-server export function cloudwatch
-----
endif::serverless[]

[float]
[[help-command]]
==== `help` command

{help-command-short-desc}.
ifndef::serverless[]
If no command is specified, shows help for the `run` command.
endif::[]

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server help COMMAND_NAME [FLAGS]
----

*`COMMAND_NAME`*::
Specifies the name of the command to show help for.

*FLAGS*

*`-h, --help`*:: Shows help for the `help` command.

{global-flags}

*EXAMPLE*

["source","sh",subs="attributes"]
-----
apm-server help export
-----

ifndef::serverless[]
[float]
[[keystore-command]]
==== `keystore` command

{keystore-command-short-desc}.

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server keystore SUBCOMMAND [FLAGS]
----

*`SUBCOMMAND`*

*`add KEY`*::
Adds the specified key to the keystore. Use the `--force` flag to overwrite an
existing key. Use the `--stdin` flag to pass the value through `stdin`.

*`create`*::
Creates a keystore to hold secrets. Use the `--force` flag to overwrite the
existing keystore.

*`list`*::
Lists the keys in the keystore.

*`remove KEY`*::
Removes the specified key from the keystore.

*FLAGS*

*`--force`*::
Valid with the `add` and `create` subcommands. When used with `add`, overwrites
the specified key. When used with `create`, overwrites the keystore.

*`--stdin`*::
When used with `add`, uses the stdin as the source of the key's value.

*`-h, --help`*::
Shows help for the `keystore` command.


{global-flags}

*EXAMPLES*

["source","sh",subs="attributes"]
-----
apm-server keystore create
apm-server keystore add ES_PWD
apm-server keystore remove ES_PWD
apm-server keystore list
-----

See <<keystore>> for more examples.

endif::[]

ifndef::serverless[]
[float]
[[run-command]]
==== `run` command

{run-command-short-desc}.

*SYNOPSIS*

["source","sh",subs="attributes"]
-----
apm-server run [FLAGS]
-----

Or:

["source","sh",subs="attributes"]
-----
apm-server [FLAGS]
-----

*FLAGS*

*`-N, --N`*:: Disables publishing for testing purposes.

*`--cpuprofile FILE`*::
Writes CPU profile data to the specified file. This option is useful for
troubleshooting APM Server.

*`-h, --help`*::
Shows help for the `run` command.

*`--httpprof [HOST]:PORT`*::
Starts an HTTP server for profiling. This option is useful for troubleshooting
and profiling APM Server.

*`--memprofile FILE`*::
Writes memory profile data to the specified output file. This option is useful
for troubleshooting APM Server.

*`--system.hostfs MOUNT_POINT`*::
Specifies the mount point of the host's file system for use in monitoring a host.

{global-flags}

*EXAMPLE*

["source","sh",subs="attributes"]
-----
apm-server run -e
-----

Or:

["source","sh",subs="attributes"]
-----
apm-server -e
-----
endif::[]

[float]
[[test-command]]
==== `test` command

{test-command-short-desc}.

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server test SUBCOMMAND [FLAGS]
----

*`SUBCOMMAND`*

*`config`*::
Tests the configuration settings.

*`output`*::
Tests that APM Server can connect to the output by using the
current settings.

*FLAGS*

*`-h, --help`*:: Shows help for the `test` command.

{global-flags}

*EXAMPLE*

["source","sh",subs="attributes"]
-----
apm-server test config
-----

[float]
[[version-command]]
==== `version` command

{version-command-short-desc}.

*SYNOPSIS*

["source","sh",subs="attributes"]
----
apm-server version [FLAGS]
----


*FLAGS*

*`-h, --help`*:: Shows help for the `version` command.

{global-flags}

*EXAMPLE*

["source","sh",subs="attributes"]
-----
apm-server version
-----


[float]
[[global-flags]]
=== Global flags

These global flags are available whenever you run APM Server.

*`-E, --E "SETTING_NAME=VALUE"`*::
Overrides a specific configuration setting. You can specify multiple overrides.
For example:
+
["source","sh",subs="attributes"]
----------------------------------------------------------------------
apm-server -E "name=mybeat" -E "output.elasticsearch.hosts=['http://myhost:9200']"
----------------------------------------------------------------------
+
This setting is applied to the currently running APM Server process.
The APM Server configuration file is not changed.

*`-c, --c FILE`*::
Specifies the configuration file to use for APM Server. The file you specify
here is relative to `path.config`. If the `-c` flag is not specified, the
default config file, +apm-server.yml+, is used.

*`-d, --d SELECTORS`*::
Enables debugging for the specified selectors. For the selectors, you can
specify a comma-separated
list of components, or you can use `-d "*"` to enable debugging for all
components. For example, `-d "publisher"` displays all the publisher-related
messages.

*`-e, --e`*::
Logs to stderr and disables syslog/file output.

*`-environment`*::
For logging purposes, specifies the environment that APM Server is running in.
This setting is used to select a default log output when no log output is configured.
Supported values are: `systemd`, `container`, `macos_service`, and `windows_service`.
If `systemd` or `container` is specified, APM Server will log to stdout and stderr
by default.

*`--path.config`*::
Sets the path for configuration files. See the <<directory-layout>> section for
details.

*`--path.data`*::
Sets the path for data files. See the <<directory-layout>> section for details.

*`--path.home`*::
Sets the path for miscellaneous files. See the <<directory-layout>> section for
details.

*`--path.logs`*::
Sets the path for log files. See the <<directory-layout>> section for details.

*`--strict.perms`*::
Sets strict permission checking on configuration files. The default is `-strict.perms=true`.
See <<config-file-ownership>> for more information.

*`-v, --v`*::
Logs INFO-level messages.

:!global-flags:
:!deploy-command-short-desc:
:!apikey-command-short-desc:
:!export-command-short-desc:
:!export-command-short-desc:
:!export-command-short-desc:
:!help-command-short-desc:
:!keystore-command-short-desc:
:!modules-command-short-desc:
:!package-command-short-desc:
:!remove-command-short-desc:
:!run-command-short-desc:
:!update-command-short-desc:
:!test-command-short-desc:
:!version-command-short-desc: