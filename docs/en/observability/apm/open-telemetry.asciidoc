[[apm-open-telemetry]]
== Use OpenTelemetry with APM

++++
<titleabbrev>Use OpenTelemetry</titleabbrev>
++++

https://opentelemetry.io/docs/concepts/what-is-opentelemetry/[OpenTelemetry] is a set of APIs, SDKs, tooling,
and integrations that enable the capture and management of telemetry data from your services and applications.

[NOTE]
====
For a complete overview of using OpenTelemetry with Elastic, explore https://github.com/elastic/opentelemetry[Elastic Distributions for OpenTelemetry].
====

Elastic integrates with OpenTelemetry, allowing you to reuse your existing instrumentation
to easily send observability data to the {stack}.
There are several ways to integrate OpenTelemetry with the {stack}:

* <<apm-otel-elastic-distros,Elastic Distributions for OpenTelemetry Language SDKs>>
* <<apm-otel-api-sdk-elastic-agent,OpenTelemetry API/SDK + Elastic APM agent>>
* <<apm-otel-native-support,OpenTelemetry native support>>
* <<apm-otel-lambda,Lambda collector exporter>>

[float]
[[apm-otel-elastic-distros]]
== Elastic Distributions for OpenTelemetry Language SDKs

preview::[]

Elastic offers several distributions for OpenTelemetry language SDKs.
A _distribution_ is a customized version of an upstream OpenTelemetry repository.
Each Elastic Distribution for OpenTelemetry is a wrapper around an https://opentelemetry.io/docs/languages/[OpenTelemetry Language SDK].

image::images/apm-otel-distro.png[]

With an Elastic Distribution for OpenTelemetry Language SDK you have access to all the features of the OpenTelemetry SDK that it customizes, plus:

* You may get access to SDK improvements and bug fixes contributed by the Elastic team _before_
the changes are available upstream in the OpenTelemetry repositories.
* The distro preconfigures the collection of tracing and metrics signals, applying some opinionated defaults,
such as which sources are collected by default.

// Why you wouldn't choose this method
// Still in tech preview?

Get started with an Elastic Distribution for OpenTelemetry Language SDK:

* preview:["The Elastic Distribution for OpenTelemetry Java is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-java[*Elastic Distribution for OpenTelemetry Java →*]
* preview:["The Elastic Distribution for OpenTelemetry .NET is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-dotnet[*Elastic Distribution for OpenTelemetry .NET →*]
* preview:["The Elastic Distribution for OpenTelemetry Node.js is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-node[*Elastic Distribution for OpenTelemetry Node.js →*]

[NOTE]
====
For more details about OpenTelemetry distributions in general,
visit the https://opentelemetry.io/docs/concepts/distributions[OpenTelemetry documentation].
====

[float]
[[apm-otel-api-sdk-elastic-agent]]
== OpenTelemetry API/SDK + Elastic APM agent

Use the OpenTelemetry API/SDKs with Elastic APM agents to translate OpenTelemetry API calls to Elastic APM API calls.

image::images/apm-otel-api-sdk-elastic-agent.png[]

// Why you _would_ choose this method
This allows you to reuse your existing OpenTelemetry instrumentation to create Elastic APM transactions and spans--avoiding
vendor lock-in and having to redo manual instrumentation.

// Why you would _not_ choose this method
However, not all features of the OpenTelemetry API are supported when using this approach, and
not all Elastic APM agents support this approach.

Find more details about how to use an OpenTelemetry API or SDK with an Elastic APM agent and
which OpenTelemetry API features are supported in the APM agent documentation:

* {apm-java-ref}/opentelemetry-bridge.html[*APM Java agent →*]
* {apm-dotnet-ref}/opentelemetry-bridge.html[*APM .NET agent →*]
* {apm-node-ref}/opentelemetry-bridge.html[*APM Node.js agent →*]
* {apm-py-ref}/opentelemetry-bridge.html[*APM Python agent →*]

// <<apm-open-telemetry-with-elastic,*Get started with an OpenTelemetry API/SDK + an Elastic APM agent →*>>

[float]
[[apm-otel-native-support]]
== OpenTelemetry native support

The {stack} natively supports the OpenTelemetry protocol (OTLP).
This means trace data and metrics collected from your applications and infrastructure by an
OpenTelemetry agent or OpenTelemetry Collector can be sent directly to the {stack}.

image::images/apm-otel-api-sdk-collector.png[]

// Why you _would_ choose this approach
// OpenTelemetry agent
If you want to instrument a technology that Elastic doesn't provide a solution for,
you can use an OpenTelemetry API/SDK to send data directly to APM Server.
For example, if you want to instrument C or C++ you could use the
https://github.com/open-telemetry/opentelemetry-cpp[OpenTelemetry C{plus}{plus} client].
// Other languages include erlang, lua, perl.

// Why you _would_ choose this approach
// OpenTelemetry Collector
// Alternatively, you can use an OpenTelemetry Collector to... if...

// Why you would _not_ choose this approach
However, there are some limitations when using APIs, SDKs, and other tooling built and maintained
by OpenTelemetry, including:

* Elastic can't provide implementation support on how to use OpenTelemetry-built tools.
* You won't have access to Elastic enterprise APM features.
* You may experience problems with performance efficiency.

For more on the limitations associated with this approach, refer to <<apm-open-telemetry-known-limitations>>.

<<apm-open-telemetry-direct,*Get started with OpenTelemetry native support →*>>

[float]
[[apm-otel-lambda]]
== AWS Lambda Collector exporter

AWS Lambda functions can be instrumented with OpenTelemetry and monitored with Elastic {observability}.

// Do we want to say anything about why you would/wouldn't choose this
// method to send data to Elastic?

<<apm-open-telemetry-aws-lambda,*Get started with a Lambda collector exporter →*>>

// TODO: I'm not sure what this diagram should look like...
image::images/apm-otel-lambda.png[]

include::./otel-with-elastic.asciidoc[]

include::./otel-direct.asciidoc[]

include::./otel-other.asciidoc[]

include::./otel-metrics.asciidoc[]

include::./otel-limitations.asciidoc[]

include::./otel-attrs.asciidoc[]

// ****
// The text below is used in the Quick start guide
// tag::otel-get-started[]
Elastic integrates with OpenTelemetry, allowing you to reuse your existing instrumentation
to easily send observability data to the {stack}.

For more information on how to combine Elastic and OpenTelemetry,
see {observability-guide}/apm-open-telemetry.html[OpenTelemetry integration].
// end::otel-get-started[]
// ****