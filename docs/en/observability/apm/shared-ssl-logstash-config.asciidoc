[float]
[[configuring-ssl-logstash]]
== Secure communication with {ls}

You can use SSL mutual authentication to secure connections between APM Server and {ls}. This ensures that
APM Server sends encrypted data to trusted {ls} servers only, and that the {ls} server receives data from
trusted APM Server clients only.

To use SSL mutual authentication:

. Create a certificate authority (CA) and use it to sign the certificates that you plan to use for
APM Server and {ls}. Creating a correct SSL/TLS infrastructure is outside the scope of this
document. There are many online resources available that describe how to create certificates.
+
TIP: If you are using {security-features}, you can use the
{ref}/certutil.html[`elasticsearch-certutil` tool] to generate certificates.

. Configure APM Server to use SSL. In the +apm-server.yml+ config file, specify the following settings under
`ssl`:
+
* `certificate_authorities`: Configures APM Server to trust any certificates signed by the specified CA. If
`certificate_authorities` is empty or not set, the trusted certificate authorities of the host system are used.

* `certificate` and `key`: Specifies the certificate and key that APM Server uses to authenticate with
{ls}.
+
For example:
+
[source,yaml]
------------------------------------------------------------------------------
output.logstash:
  hosts: ["logs.mycompany.com:5044"]
  ssl.certificate_authorities: ["/etc/ca.crt"]
  ssl.certificate: "/etc/client.crt"
  ssl.key: "/etc/client.key"
------------------------------------------------------------------------------
+
For more information about these configuration options, see <<configuration-ssl>>.

. Configure {ls} to use SSL. In the {ls} config file, specify the following settings for the {logstash-ref}/plugins-inputs-beats.html[{beats} input plugin for {ls}]:
+
* `ssl`: When set to true, enables {ls} to use SSL/TLS.
* `ssl_certificate_authorities`: Configures {ls} to trust any certificates signed by the specified CA.
* `ssl_certificate` and `ssl_key`: Specify the certificate and key that {ls} uses to authenticate with the client.
* `ssl_verify_mode`: Specifies whether the {ls} server verifies the client certificate against the CA. You
need to specify either `peer` or `force_peer` to make the server ask for the certificate and validate it. If you
specify `force_peer`, and APM Server doesn't provide a certificate, the {ls} connection will be closed. If you choose not to use {ref}/certutil.html[`certutil`], the certificates that you obtain must allow for both `clientAuth` and `serverAuth` if the extended key usage extension is present.
+
For example:
+
[source,json]
------------------------------------------------------------------------------
input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate_authorities => ["/etc/ca.crt"]
    ssl_certificate => "/etc/server.crt"
    ssl_key => "/etc/server.key"
    ssl_verify_mode => "force_peer"
  }
}
------------------------------------------------------------------------------
+
For more information about these options, see the
{logstash-ref}/plugins-inputs-beats.html[documentation for the {beats} input plugin].

[float]
[[testing-ssl-logstash]]
=== Validate the {ls} server's certificate

Before running APM Server, you should validate the {ls} server's certificate. You can use `curl` to validate the certificate even though the protocol used to communicate with {ls} is not based on HTTP. For example:

[source,shell]
------------------------------------------------------------------------------
curl -v --cacert ca.crt https://logs.mycompany.com:5044
------------------------------------------------------------------------------

If the test is successful, you'll receive an empty response error:

[source,shell]
------------------------------------------------------------------------------
* Rebuilt URL to: https://logs.mycompany.com:5044/
*   Trying 192.168.99.100...
* Connected to logs.mycompany.com (192.168.99.100) port 5044 (#0)
* TLS 1.2 connection using TLS_DHE_RSA_WITH_AES_256_CBC_SHA
* Server certificate: logs.mycompany.com
* Server certificate: mycompany.com
> GET / HTTP/1.1
> Host: logs.mycompany.com:5044
> User-Agent: curl/7.43.0
> Accept: */*
>
* Empty reply from server
* Connection #0 to host logs.mycompany.com left intact
curl: (52) Empty reply from server
------------------------------------------------------------------------------

The following example uses the IP address rather than the hostname to validate the certificate:

[source,shell]
------------------------------------------------------------------------------
curl -v --cacert ca.crt https://192.168.99.100:5044
------------------------------------------------------------------------------

Validation for this test fails because the certificate is not valid for the specified IP address. It's only valid for the `logs.mycompany.com`, the hostname that appears in the Subject field of the certificate.

[source,shell]
------------------------------------------------------------------------------
* Rebuilt URL to: https://192.168.99.100:5044/
*   Trying 192.168.99.100...
* Connected to 192.168.99.100 (192.168.99.100) port 5044 (#0)
* WARNING: using IP address, SNI is being disabled by the OS.
* SSL: certificate verification failed (result: 5)
* Closing connection 0
curl: (51) SSL: certificate verification failed (result: 5)
------------------------------------------------------------------------------

See the <<ssl-client-fails,troubleshooting docs>> for info about resolving this issue.

[float]
=== Test the APM Server to {ls} connection

If you have APM Server running as a service, first stop the service. Then test your setup by running APM Server in
the foreground so you can quickly see any errors that occur:

["source","sh",subs="attributes,callouts"]
------------------------------------------------------------------------------
apm-server -c apm-server.yml -e -v
------------------------------------------------------------------------------

Any errors will be printed to the console. See the <<ssl-client-fails,troubleshooting docs>> for info about
resolving common errors.