[[apm-data-model-metadata]]
= Metadata

Metadata can enrich your events and make application performance monitoring even more useful.
Let's explore the different types of metadata that Elastic APM offers.

[float]
[[apm-data-model-labels]]
== Labels

Labels add *indexed* information to transactions, spans, and errors.
Indexed means the data is searchable and aggregatable in {es}.
Add additional key-value pairs to define multiple labels.

* Indexed: Yes
* {es} type: {ref}/object.html[object]
* {es} field: `labels`
* Applies to: <<apm-data-model-transactions>> | <<apm-data-model-spans>> | <<apm-data-model-errors>>

Label values can be a string, boolean, or number, although some agents only support string values at this time.
Because labels for a given key, regardless of agent used, are stored in the same place in {es},
all label values of a given key must have the same data type.
Multiple data types per key will throw an exception, for example: `{foo: bar}` and `{foo: 42}` is not allowed.

IMPORTANT: Avoid defining too many user-specified labels.
Defining too many unique fields in an index is a condition that can lead to a
{ref}/mapping.html#mapping-limit-settings[mapping explosion].

[float]
=== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-label[`SetLabel`]
* Java: {apm-java-ref-v}/public-api.html#api-transaction-add-tag[`setLabel`]
* .NET: {apm-dotnet-ref-v}/public-api.html#api-transaction-set-label[`SetLabel`]
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-label[`setLabel`] | {apm-node-ref-v}/agent-api.html#apm-add-labels[`addLabels`]
* PHP: {apm-php-ref}/public-api.html#api-transaction-interface-set-label[`Transaction` `setLabel`] | {apm-php-ref}/public-api.html#api-span-interface-set-label[`Span` `setLabel`]
* Python: {apm-py-ref-v}/api.html#api-label[`elasticapm.label()`]
* Ruby:  {apm-ruby-ref-v}/api.html#api-agent-set-label[`set_label`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-add-labels[`addLabels`]

[float]
[[apm-data-model-custom]]
== Custom context

Custom context adds *non-indexed*,
custom contextual information to transactions and errors.
Non-indexed means the data is not searchable or aggregatable in {es},
and you cannot build dashboards on top of the data.
This also means you don't have to worry about {ref}/mapping.html#mapping-limit-settings[mapping explosions],
as these fields are not added to the mapping.

Non-indexed information is useful for providing contextual information to help you
quickly debug performance issues or errors.

* Indexed: No
* {es} type: {ref}/object.html[object]
* {es} fields: `transaction.custom` | `error.custom`
* Applies to: <<apm-data-model-transactions>> | <<apm-data-model-errors>>

IMPORTANT: Setting a circular object, a large object, or a non JSON serializable object can lead to errors.

[float]
=== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-custom[`SetCustom`]
* iOS: _coming soon_
* Java: {apm-java-ref-v}/public-api.html#api-transaction-add-custom-context[`addCustomContext`]
* .NET: _coming soon_
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-custom-context[`setCustomContext`]
* PHP: _coming soon_
* Python: {apm-py-ref-v}/api.html#api-set-custom-context[`set_custom_context`]
* Ruby: {apm-ruby-ref-v}/api.html#api-agent-set-custom-context[`set_custom_context`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-set-custom-context[`setCustomContext`]

[float]
[[apm-data-model-user]]
== User context

User context adds *indexed* user information to transactions and errors.
Indexed means the data is searchable and aggregatable in {es}.

* Indexed: Yes
* {es} type: {ref}/keyword.html[keyword]
* {es} fields: `user.email` | `user.name` | `user.id`
* Applies to: <<apm-data-model-transactions>> | <<apm-data-model-errors>>

[float]
=== Agent API reference

* Go: {apm-go-ref-v}/api.html#context-set-username[`SetUsername`] | {apm-go-ref-v}/api.html#context-set-user-id[`SetUserID`] |
{apm-go-ref-v}/api.html#context-set-user-email[`SetUserEmail`]
* iOS: _coming soon_
* Java: {apm-java-ref-v}/public-api.html#api-transaction-set-user[`setUser`]
* .NET _coming soon_
* Node.js: {apm-node-ref-v}/agent-api.html#apm-set-user-context[`setUserContext`]
* PHP: _coming soon_
* Python: {apm-py-ref-v}/api.html#api-set-user-context[`set_user_context`]
* Ruby: {apm-ruby-ref-v}/api.html#api-agent-set-user[`set_user`]
* Rum: {apm-rum-ref-v}/agent-api.html#apm-set-user-context[`setUserContext`]
