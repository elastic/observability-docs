[[apm-data-model-spans]]
= Spans

*Spans* contain information about the execution of a specific code path.
They measure from the start to the end of an activity,
and they can have a parent/child relationship with other spans.

Agents automatically instrument a variety of libraries to capture these spans from within your application,
but you can also use the Agent API for custom instrumentation of specific code paths.

Among other things, spans can contain:

* A `transaction.id` attribute that refers to its parent <<apm-data-model-transactions,transaction>>.
* A `parent.id` attribute that refers to its parent span or transaction.
* Its start time and duration.
* A `name`, `type`, `subtype`, and `action`â€”see the {span-name-type-sheet}[span name/type alignment]
sheet for span name patterns and examples by {apm-agent}.
In addition, some APM agents test against a public {span-spec}[span type/subtype spec].
* An optional `stack trace`. Stack traces consist of stack frames,
which represent a function call on the call stack.
They include attributes like function name, file name and path, line number, etc.

TIP: Most agents limit keyword fields, like `span.id`, to 1024 characters,
and non-keyword fields, like `span.start.us`, to 10,000 characters.

[float]
[[apm-data-model-dropped-spans]]
== Dropped spans

For performance reasons, APM agents can choose to sample or omit spans purposefully.
This can be useful in preventing edge cases, like long-running transactions with over 100 spans,
that would otherwise overload both the Agent and the APM Server.
When this occurs, the APM UI will display the number of spans dropped.

To configure the number of spans recorded per transaction, see the relevant Agent documentation:

* Android: _Not yet supported_
* Go: {apm-go-ref-v}/configuration.html#config-transaction-max-spans[`ELASTIC_APM_TRANSACTION_MAX_SPANS`]
* iOS: _Not yet supported_
* Java: {apm-java-ref-v}/config-core.html#config-transaction-max-spans[`transaction_max_spans`]
* .NET: {apm-dotnet-ref-v}/config-core.html#config-transaction-max-spans[`TransactionMaxSpans`]
* Node.js: {apm-node-ref-v}/configuration.html#transaction-max-spans[`transactionMaxSpans`]
* PHP: {apm-php-ref-v}/configuration-reference.html#config-transaction-max-spans[`transaction_max_spans`]
* Python: {apm-py-ref-v}/configuration.html#config-transaction-max-spans[`transaction_max_spans`]
* Ruby: {apm-ruby-ref-v}/configuration.html#config-transaction-max-spans[`transaction_max_spans`]

[float]
[[apm-data-model-missing-spans]]
== Missing spans

Agents stream spans to the APM Server separately from their transactions.
Because of this, unforeseen errors may cause spans to go missing.
Agents know how many spans a transaction should have;
if the number of expected spans does not equal the number of spans received by the APM Server,
the APM UI will calculate the difference and display a message.

[float]
== Data streams

Spans are stored with transactions in the following data streams:

include::../data-streams.asciidoc[tag=traces-data-streams]

See <<apm-data-streams>> to learn more.

[float]
== Example span document

This example shows what span documents can look like when indexed in {es}.

[%collapsible]
.Expand {es} document
====
[source,json]
----
include::{apm-server-root}/docs/data/elasticsearch/generated/spans.json[]
----
====
