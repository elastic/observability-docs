[[running-on-docker]]
==== Run APM Server on Docker

Docker images for APM Server are available from the Elastic Docker
registry. The base image is https://hub.docker.com/_/ubuntu[ubuntu:22.04].

A list of all published Docker images and tags is available at
https://www.docker.elastic.co[www.docker.elastic.co].

These images are free to use under the Elastic license. They contain open source
and free commercial features and access to paid commercial features.
{kibana-ref}/managing-licenses.html[Start a 30-day trial] to try out all of the
paid commercial features. See the
https://www.elastic.co/subscriptions[Subscriptions] page for information about
Elastic license levels.

[float]
===== Pull the image

Obtaining APM Server for Docker is as simple as issuing a +docker pull+ command
against the Elastic Docker registry and then, optionally, verifying the image.

ifeval::["{release-state}"=="unreleased"]

However, version {version} of APM Server has not yet been
released, so no Docker image is currently available for this version.

endif::[]

ifeval::["{release-state}"!="unreleased"]

. Pull the Docker image:
+
["source", "sh", subs="attributes"]
------------------------------------------------
docker pull docker.elastic.co/apm/apm-server:{version}
------------------------------------------------

. Verify the Docker image:
+
["source", "sh", subs="attributes"]
----
wget https://artifacts.elastic.co/cosign.pub
cosign verify --key cosign.pub docker.elastic.co/apm/apm-server:{version}
----
+
The `cosign` command prints the check results and the signature payload in JSON format:
+
[source,sh,subs="attributes"]
----
Verification for docker.elastic.co/apm/apm-server:{version} --
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims in the transparency log was verified offline
  - The signatures were verified against the specified public key
----

endif::[]

[float]
===== Configure APM Server on Docker

The Docker image provides several methods for configuring APM Server. The
conventional approach is to provide a configuration file via a volume mount, but
it's also possible to create a custom image with your
configuration included.

[float]
====== Example configuration file

Download this example configuration file as a starting point:

["source","sh",subs="attributes,callouts"]
------------------------------------------------
curl -L -O https://raw.githubusercontent.com/elastic/apm-server/{branch}/apm-server.docker.yml
------------------------------------------------

[float]
====== Volume-mounted configuration

One way to configure APM Server on Docker is to provide +apm-server.docker.yml+ via a volume mount.
With +docker run+, the volume mount can be specified like this.

["source", "sh", subs="attributes"]
--------------------------------------------
docker run -d \
  -p 8200:8200 \
  --name=apm-server \
  --user=apm-server \
  --volume="$(pwd)/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro" \
  docker.elastic.co/apm/apm-server:{version} \
  --strict.perms=false -e \
  -E output.elasticsearch.hosts=["elasticsearch:9200"] <1> <2>
--------------------------------------------

<1> Substitute your {es} hosts and ports.
<2> If you are using the hosted {ess} in {ecloud}, replace
the `-E output.elasticsearch.hosts` line with the Cloud ID and elastic password
using the syntax shown earlier.

[float]
====== Customize your configuration

ifdef::has_docker_label_ex[]
The +apm-server.docker.yml+ file you downloaded earlier is configured to deploy {beats} modules based on the Docker labels applied to your containers.  See <<configuration-autodiscover-hints>> for more details. Add labels to your application Docker containers, and they will be picked up by the {beats} autodiscover feature when they are deployed.  Here is an example command for an Apache HTTP Server container with labels to configure the {filebeat} and {metricbeat} modules for the Apache HTTP Server:

["source", "sh", subs="attributes"]
--------------------------------------------
docker run \
  --label co.elastic.logs/module=apache2 \
  --label co.elastic.logs/fileset.stdout=access \
  --label co.elastic.logs/fileset.stderr=error \
  --label co.elastic.metrics/module=apache \
  --label co.elastic.metrics/metricsets=status \
  --label co.elastic.metrics/hosts='${data.host}:${data.port}' \
  --detach=true \
  --name my-apache-app \
  -p 8080:80 \
  httpd:2.4
--------------------------------------------
endif::[]

ifndef::has_docker_label_ex[]
The +apm-server.docker.yml+ downloaded earlier should be customized for your environment. See <<configuring-howto-apm-server>> for more details. Edit the configuration file and customize it to match your environment then re-deploy your APM Server container.
endif::[]

[float]
====== Custom image configuration

It's possible to embed your APM Server configuration in a custom image.
Here is an example Dockerfile to achieve this:

["source", "dockerfile", subs="attributes"]
--------------------------------------------
FROM docker.elastic.co/apm/apm-server:{version}
COPY --chmod=0644 --chown=1000:1000 apm-server.yml /usr/share/apm-server/apm-server.yml
--------------------------------------------