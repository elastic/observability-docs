[[apm-custom-filter]]
= Custom filters

Custom filters, including <<apm-filters-ingest-pipeline,ingest pipeline filters>> and
<<apm-filters-in-agent,APM agent filters>>, allow you to filter or redact APM data on ingestion.

[discrete]
[[apm-filters-ingest-pipeline]]
== Ingest pipeline filters

Ingest pipelines specify a series of processors that transform data in a specific way.
Transformation happens prior to indexing--inflicting no performance overhead on the monitored application.
Pipelines are a flexible and easy way to filter or obfuscate Elastic APM data.

Features of this approach:

* Filters are applied at ingestion time.
* All Elastic APM agents and fields are supported.
* Data leaves the instrumented service.
* There are no performance overhead implications on the instrumented service.

For a step-by-step example, refer to <<apm-filters-ingest-pipeline-tutorial>>.

[discrete]
[[apm-filters-in-agent]]
== APM agent filters

Some APM agents offer a way to manipulate or drop APM events _before_ they are sent to APM Server.

Features of this approach:

* Data is sanitized before leaving the instrumented service.
* Not supported by all Elastic APM agents.
* Potential overhead implications on the instrumented service.

Refer to the relevant agent's documentation for more information and examples:

* .NET: {apm-dotnet-ref-v}/public-api.html#filter-api[Filter API].
* Node.js: {apm-node-ref-v}/agent-api.html#apm-add-filter[`addFilter()`].
* Python: {apm-py-ref-v}/sanitizing-data.html[custom processors].
* Ruby: {apm-ruby-ref-v}/api.html#api-agent-add-filter[`add_filter()`].

[discrete]
[[apm-filters-ingest-pipeline-tutorial]]
== Tutorial: Use an ingest pipeline to redact sensitive information

Say you decide to <<apm-filters-http-body,capture HTTP request bodies>>
but quickly notice that sensitive information is being collected in the
`http.request.body.original` field:

[source,json]
----
{
  "email": "test@abc.com",
  "password": "hunter2"
}
----

To obfuscate the passwords stored in the request body, you can use a series of {ref}/processors.html[ingest processors].

[discrete]
=== Create a pipeline

TIP: This tutorial uses the {ref}/ingest-apis.html[Ingest APIs], but it's also possible
to create a pipeline using the UI. In Kibana, go to *Stack Management* →
*Ingest Pipelines* → *Create pipeline* → *New pipeline* or use the
{kibana-ref}/introduction.html#kibana-navigation-search[global search field].

To start, create a pipeline with a simple description and an empty array of processors:

[source,json]
----
{
  "pipeline": {
    "description": "redact http.request.body.original.password",
    "processors": [] <1>
  }
}
----
<1> The processors defined below will go in this array

[discrete]
==== Add a JSON processor

Add your first processor to the processors array.
Because the agent captures the request body as a string, use the
{ref}/json-processor.html[JSON processor] to convert the original field value into a structured JSON object.
Save this JSON object in a new field:

[source,json]
----
{
  "json": {
    "field": "http.request.body.original",
    "target_field": "http.request.body.original_json",
    "ignore_failure": true
  }
}
----

[discrete]
==== Add a set processor

If `body.original_json` is not `null`, i.e., it exists, we'll redact the `password` with the {ref}/set-processor.html[set processor],
by setting the value of `body.original_json.password` to `"redacted"`:

[source,json]
----
{
  "set": {
    "field": "http.request.body.original_json.password",
    "value": "redacted",
    "if": "ctx?.http?.request?.body?.original_json != null"
  }
}
----

[discrete]
==== Add a convert processor

Use the {ref}/convert-processor.html[convert processor] to convert the JSON value of `body.original_json` to a string and set it as the `body.original` value:

[source,json]
----
{
  "convert": {
    "field": "http.request.body.original_json",
    "target_field": "http.request.body.original",
    "type": "string",
    "if": "ctx?.http?.request?.body?.original_json != null",
    "ignore_failure": true
  }
}
----

[discrete]
==== Add a remove processor

Finally, use the {ref}/remove-processor.html[remove processor] to remove the `body.original_json` field:

[source,json]
----
{
  "remove": {
    "field": "http.request.body.original_json",
    "if": "ctx?.http?.request?.body?.original_json != null",
    "ignore_failure": true
  }
}
----

[discrete]
==== Register the pipeline

Then put it all together,
and use the {ref}/put-pipeline-api.html[create or update pipeline API] to register the new pipeline in {es}.
Name the pipeline `apm_redacted_body_password`:

[source,console]
----
PUT _ingest/pipeline/apm_redacted_body_password
{
  "description": "redact http.request.body.original.password",
  "processors": [
    {
      "json": {
        "field": "http.request.body.original",
        "target_field": "http.request.body.original_json",
        "ignore_failure": true
      }
    },
    {
      "set": {
        "field": "http.request.body.original_json.password",
        "value": "redacted",
        "if": "ctx?.http?.request?.body?.original_json != null"
      }
    },
    {
      "convert": {
        "field": "http.request.body.original_json",
        "target_field": "http.request.body.original",
        "type": "string",
        "if": "ctx?.http?.request?.body?.original_json != null",
        "ignore_failure": true
      }
    },
    {
      "remove": {
        "field": "http.request.body.original_json",
        "if": "ctx?.http?.request?.body?.original_json != null",
        "ignore_failure": true
      }
    }
  ]
}
----

[discrete]
=== Test the pipeline

Prior to enabling this new pipeline, you can test it with the {ref}/simulate-pipeline-api.html[simulate pipeline API].
This API allows you to run multiple documents through a pipeline to ensure it is working correctly.

The request below simulates running three different documents through the pipeline:

[source,console]
----
POST _ingest/pipeline/apm_redacted_body_password/_simulate
{
  "docs": [
    {
      "_source": { <1>
        "http": {
          "request": {
            "body": {
              "original": """{"email": "test@abc.com", "password": "hunter2"}"""
            }
          }
        }
      }
    },
    {
      "_source": { <2>
        "some-other-field": true
      }
    },
    {
      "_source": { <3>
        "http": {
          "request": {
            "body": {
              "original": """["invalid json" """
            }
          }
        }
      }
    }
  ]
}
----
<1> This document features the same sensitive data from the original example above
<2> This document only contains an unrelated field
<3> This document contains invalid JSON

The API response should be similar to this:

[source,json]
----
{
  "docs" : [
    {
      "doc" : {
        "_source" : {
          "http" : {
            "request" : {
              "body" : {
                "original" : {
                  "password" : "redacted",
                  "email" : "test@abc.com"
                }
              }
            }
          }
        }
      }
    },
    {
      "doc" : {
        "_source" : {
          "nobody" : true
        }
      }
    },
    {
      "doc" : {
        "_source" : {
          "http" : {
            "request" : {
              "body" : {
                "original" : """["invalid json" """
              }
            }
          }
        }
      }
    }
  ]
}
----

As expected, only the first simulated document has a redacted password field.
All other documents are unaffected.

[discrete]
=== Create a `@custom` pipeline

The final step in this process is to call the newly created `apm_redacted_body_password` pipeline
from the `@custom` pipeline of the data stream you wish to edit.

include::{observability-docs-root}/docs/en/observability/apm/manage-storage/ingest-pipelines.asciidoc[tag=ingest-pipeline-naming]

Use the {ref}/put-pipeline-api.html[create or update pipeline API] to register the new pipeline in {es}.
Name the pipeline `traces-apm@custom`:

[source,console]
----
PUT _ingest/pipeline/traces-apm@custom
{
  "processors": [
    {
      "pipeline": {
        "name": "apm_redacted_body_password" <1>
      }
    }
  ]
}
----
<1> The name of the pipeline we previously created

That's it! Passwords will now be redacted from your APM HTTP body data.

[discrete]
=== Next steps

To learn more about ingest pipelines, see <<apm-custom-index-template>>.
