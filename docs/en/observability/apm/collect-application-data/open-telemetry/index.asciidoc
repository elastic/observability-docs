[[apm-open-telemetry]]
= Use OpenTelemetry with APM

++++
<titleabbrev>OpenTelemetry</titleabbrev>
++++

[NOTE]
====
*For a complete overview of using OpenTelemetry with Elastic, explore* https://github.com/elastic/opentelemetry[*Elastic Distributions of OpenTelemetry*].
====

https://opentelemetry.io/docs/concepts/what-is-opentelemetry/[OpenTelemetry] is a set of APIs, SDKs, tooling,
and integrations that enable the capture and management of telemetry data from your services and applications.

Elastic integrates with OpenTelemetry, allowing you to reuse your existing instrumentation
to easily send observability data to the {stack}.
There are several ways to integrate OpenTelemetry with the {stack}:

* <<apm-otel-elastic-distros,Elastic Distributions of OpenTelemetry language SDKs>>
* <<apm-otel-api-sdk-elastic-agent,Upstream OpenTelemetry API/SDK + Elastic APM agent>>
* <<apm-otel-upstream,Upstream OpenTelemetry Collector and language SDKs>>
* <<apm-otel-lambda,Lambda collector exporter>>

[float]
[[apm-otel-elastic-distros]]
== Elastic Distributions of OpenTelemetry language SDKs

preview::["Some Elastic Distributions of OpenTelemetry are not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."]

Elastic offers several distributions of OpenTelemetry language SDKs.
A _distribution_ is a customized version of an upstream OpenTelemetry repository.
Each Elastic Distribution of OpenTelemetry is a customized version of an https://opentelemetry.io/docs/languages/[OpenTelemetry language SDK].

image::images/apm-otel-distro.png[]

With an Elastic Distribution of OpenTelemetry language SDK you have access to all the features of the OpenTelemetry SDK that it customizes, plus:

* You may get access to SDK improvements and bug fixes contributed by the Elastic team _before_
the changes are available upstream in the OpenTelemetry repositories.
* The distro preconfigures the collection of tracing and metrics signals, applying some opinionated defaults,
such as which sources are collected by default.

// Why you wouldn't choose this method
// Just that it's still in tech preview?

// Where to go next
Get started with an Elastic Distribution of OpenTelemetry language SDK:

* https://github.com/elastic/elastic-otel-java[*Elastic Distribution of OpenTelemetry Java →*]
* preview:["The Elastic Distribution of OpenTelemetry .NET is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-dotnet[*Elastic Distribution of OpenTelemetry .NET →*]
* preview:["The Elastic Distribution of OpenTelemetry Node.js is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-node[*Elastic Distribution of OpenTelemetry Node.js →*]
* preview:["The Elastic Distribution of OpenTelemetry Python is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-python[*Elastic Distribution of OpenTelemetry Python →*]
* preview:["The Elastic Distribution of OpenTelemetry PHP is not yet recommended for production use. Functionality may be changed or removed in future releases. Alpha releases are not subject to the support SLA of official GA features."] https://github.com/elastic/elastic-otel-php[*Elastic Distribution of OpenTelemetry PHP →*]

[NOTE]
====
For more details about OpenTelemetry distributions in general,
visit the https://opentelemetry.io/docs/concepts/distributions[OpenTelemetry documentation].
====

[float]
[[apm-otel-api-sdk-elastic-agent]]
== Upstream OpenTelemetry API/SDK + Elastic APM agent

Use the OpenTelemetry API/SDKs with <<_step_3_install_apm_agents,Elastic APM agents>> to translate OpenTelemetry API calls to Elastic APM API calls.

image::images/apm-otel-api-sdk-elastic-agent.png[]

// Why you _would_ choose this method
This allows you to reuse your existing OpenTelemetry instrumentation to create Elastic APM transactions and spans--avoiding
vendor lock-in and having to redo manual instrumentation.

// Why you would _not_ choose this method
However, not all features of the OpenTelemetry API are supported when using this approach, and
not all Elastic APM agents support this approach.

// Where to go next
Find more details about how to use an OpenTelemetry API or SDK with an Elastic APM agent and
which OpenTelemetry API features are supported in the APM agent documentation:

* {apm-java-ref}/opentelemetry-bridge.html[*APM Java agent →*]
* {apm-dotnet-ref}/opentelemetry-bridge.html[*APM .NET agent →*]
* {apm-node-ref}/opentelemetry-bridge.html[*APM Node.js agent →*]
* {apm-py-ref}/opentelemetry-bridge.html[*APM Python agent →*]

[float]
[[apm-otel-upstream]]
== Upstream OpenTelemetry Collector and language SDKs

The {stack} natively supports the OpenTelemetry protocol (OTLP).
This means trace data and metrics collected from your applications and infrastructure by an
OpenTelemetry Collector or OpenTelemetry language SDK can be sent to the {stack}.

You can set up an https://opentelemetry.io/docs/collector/[OpenTelemetry Collector], instrument your
application with an https://opentelemetry.io/docs/languages/[OpenTelemetry language SDK] that sends
data to the collector, and use the collector to process and export the data to APM Server.

image::images/apm-otel-api-sdk-collector.png[]

[NOTE]
====
It's also possible to send data directly to APM Server from an upstream OpenTelemetry SDK.
You might do this during development or if you're monitoring a small-scale application.
Read more about when to use a collector in the https://opentelemetry.io/docs/collector/#when-to-use-a-collector[OpenTelemetry documentation].
====

// Why you _would_ choose this approach
This approach works well when you need to instrument a technology that Elastic doesn't
provide a solution for. For example, if you want to instrument C or C++ you could use the
https://github.com/open-telemetry/opentelemetry-cpp[OpenTelemetry C{plus}{plus} client].
// Other languages include erlang, lua, perl.

// Why you would _not_ choose this approach
However, there are some limitations when using collectors and language SDKs built and maintained
by OpenTelemetry, including:

* Elastic can't provide implementation support on how to use upstream OpenTelemetry tools.
* You won't have access to Elastic enterprise APM features.
* You may experience problems with performance efficiency.

For more on the limitations associated with using upstream OpenTelemetry tools,
refer to <<apm-open-telemetry-known-limitations>>.

// Where to go next
<<apm-open-telemetry-direct,*Get started with upstream OpenTelemetry Collectors and language SDKs →*>>

[float]
[[apm-otel-lambda]]
== AWS Lambda collector exporter

AWS Lambda functions can be instrumented with OpenTelemetry and monitored with Elastic {observability}.

// Do we want to say anything about why you would/wouldn't choose this
// method to send data to Elastic?

// Where to go next
To get started, follow the official AWS Distro for OpenTelemetry Lambda documentation, and configure the OpenTelemetry Collector to output traces and metrics to your Elastic cluster:

https://aws-otel.github.io/docs/getting-started/lambda[*Get started with the AWS Distro for OpenTelemetry Lambda*^] image:images/icons/popout.svg[]

////
Subsections
////

include::./otel-direct.asciidoc[leveloffset=+1]
include::./otel-metrics.asciidoc[leveloffset=+1]
include::./otel-limitations.asciidoc[leveloffset=+1]
include::./otel-attrs.asciidoc[leveloffset=+1]

// ****
// The text below is used in the Quick start guide
// tag::otel-get-started[]
Elastic integrates with OpenTelemetry, allowing you to reuse your existing instrumentation
to easily send observability data to the {stack}.

For more information on how to combine Elastic and OpenTelemetry,
see {observability-guide}/apm-open-telemetry.html[OpenTelemetry integration].
// end::otel-get-started[]
// ****