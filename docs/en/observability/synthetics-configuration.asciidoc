[[synthetics-configuration]]
= Synthetic tests configuration

++++
<titleabbrev>Synthetic tests configuration</titleabbrev>
++++

beta[]

Synthetic tests support the configuration of dynamic parameters that can be
used in projects. In addition, the Synthetics agent, which is built on top
of Playwright, supports configuring browser and context options that are available
in Playwright-specific methods, for example, `ignoreHTTPSErrors`, `extraHTTPHeaders`, and `viewport`.

[[synthetics-config-file]]

Create a `synthetics.config.js` or `synthetics.config.ts` file in the root of the
synthetics project and specify the options:

[source,js]
----
import { SyntheticsConfig } from '@elastic/synthetics'

const config: SyntheticsConfig = {
  params: {
    url: 'https://www.elastic.co'
  },
  playwrightOptions: {
    ignoreHTTPSErrors: true, // ignores all HTTPS errors during navigation
    extraHTTPHeaders: {
      'foo': 'bar' // additional HTTP headers to be sent with every request
    }
  },
  monitor: {
    schedule: 10,
    locations: [ 'us-east4-a' ],
  }
}

export default config;
----

The configuration file can either export an object, or a function that when
called should return the generated configuration. To know more about configuring
the tests based on environments, look at the <<synthetics-dynamic-configs, dynamic configuration>> documentation.

[discrete]
[[synthetics-configuration-params]]
== `params`

An object that defines any variables your tests require.

[discrete]
[[synthetics-configuration-playwright-options]]
== `playwrightOptions`

For available options, see the https://playwright.dev/docs/test-configuration[Playwright documentation].

[discrete]
[[synthetics-config-device-emulation]]
=== Device emulation

Users can emulate a mobile device using the configuration file.
The example configuration below runs tests in "Pixel 5" emulation mode.

[source,js]
----
import { SyntheticsConfig } from "@elastic/synthetics"
import { devices } from "playwright-chromium"

const config: SyntheticsConfig = {
  playwrightOptions: {
    ...devices['Pixel 5']
  }
}

export default config;
----

[discrete]
[[synthetics-configuration-monitor]]
== `monitor`

Default values to be applied to _all_ monitors when using the <<elastic-synthetics-push-command, `@elastic/synthetics` `push` command>>.

// tag::monitor-config-options[]
`id` (`string`)::
A unique identifier for this monitor.
`name` (`string`)::
A human readable name for the monitor.
`tags` (`Array<string>`)::
A list of tags that will be sent with the monitor event. Tags are displayed in the {uptime-app} and allow you to search monitors by tag.
`schedule` (`number`)::
The interval (in seconds) at which the monitor should run.
`enabled` (`boolean`)::
Enable or disable the monitor from running without deleting and recreating it.
`locations` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/locations/public-locations.ts#L28-L37[`Array<SyntheticsLocationsType>`])::
Where to deploy the monitor. Monitors can be deployed in multiple locations so that you can detect differences in availability and response times across those locations.
+
To list available locations you can:
+
* Run the <<elastic-synthetics-locations-command,`elastic-synthetics locations` command>>.
* Go to *{uptime-app}* -> *Monitor Management* and click *Add monitor*.
Locations will be listed in _Monitor locations_.

`privateLocations` (`Array<string>`)::
The <<synthetics-private-location,private locations>> to which the monitors will be deployed. These private locations refer to locations hosted and managed by you, whereas 
`locations` are hosted by Elastic. You can specify a private location using the location's name.
+
To list available private locations you can:
+
* Run the <<elastic-synthetics-locations-command,`elastic-synthetics locations` command>>
with the {kib} URL for the deployment from which to fetch available locations.
* Go to *{uptime-app}* -> *Monitor Management* and click *Add monitor*.
Private locations will be listed in _Monitor locations_ with a "Private" badge next to their names.

`throttling` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/common_types.ts#L194-L198[`ThrottlingOptions`])::
Control the monitor's download speeds, upload speeds, and latency to simulate your application's behavior on slower or laggier networks.
`screenshot` (https://github.com/elastic/synthetics/blob/{synthetics_version}/src/common_types.ts#L192[`ScreenshotOptions`])::
Control whether or not to capture screenshots. Options include `'on'`, `'off'`, or `'only-on-failure'`.
// end::monitor-config-options[]

For information on configuring monitors individually, see <<synthetic-run-tests>>.
