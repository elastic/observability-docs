[chapter, role="xpack"]
[[ingest-uptime]]

:beatname_uc: Heartbeat
:beatname_lc: heartbeat
:beatname_pkg: heartbeat-elastic
:beatname_url: {beats-ref-root}/{beatname_lc}/{branch}

[[ingest-uptime]]
= Ingest uptime data

[NOTE]
=====
If you haven't already, you need to install {es} for storing and searching your data, and {kib} for visualizing and
managing it. For more information, see <<add-observability-data,Send data to {es}>>.
=====

Install and configure {heartbeat} on your servers to periodically check the status of your 
services. {heartbeat} uses probing to monitor the availability of services and helps 
verify that you’re meeting your service level agreements for service uptime.
You typically install {heartbeat} as part of a monitoring service that runs on a separate machine 
and possibly even outside of the network where the services that you want to monitor are running.

[[deployment-considerations]]
== Deployment considerations

There are multiple ways to deploy Uptime and Heartbeat. A guiding principle is that when
an outage takes down the service being monitored, it should not take down {heartbeat}.

{heartbeat} is commonly run as a centralized service within a data center.
While it's possible to run it as a separate "sidecar" process paired with each process/container,
we recommend against it. Running {heartbeat} centrally ensures you will still be able to see
monitoring data in the event of an overloaded, disconnected, or otherwise malfunctioning server.

For further redundancy, you may want to deploy multiple instances of {heartbeat} across geographic and network boundaries
to provide more data.

For example:

* A site served from a content delivery network (CDN) with points of presence (POPs) around the globe.
+
To check if your site is reachable via CDN POPS, deploy multiple {heartbeat} instances at
different data centers around the world.
+
* A service within a single data center that is accessed across multiple VPNs.
+ 
Set up one {heartbeat} instance within the VPN the service operates from, and another within an additional
VPN that users access the service from. In the event of an outage, having both instances helps pinpoint
the network errors.
+
* A single service running primarily in a US east coast data center, with a hot failover located in
a US west coast data center.
+
In each data center, run a {heartbeat} instance that checks both the local
copy of the service and its counterpart across the country. Set up two monitors in each region, one for
the local service, and one for the remote service. In the event of a data center failure, it will be
immediately apparent if the service has a connectivity issue to the outside world, or if the failure is only internal.

[[install-heartbeat]]
== Step 1: Install {beatname_uc}

You typically install {heartbeat} as part of a monitoring service that runs on a separate machine 
and possibly even outside of the network where the services that you want to monitor are running.

To download and install {beatname_uc}, use the commands that work with your system:

include::{beats-repo-dir}/tab-widgets/install-widget.asciidoc[]

[[other-heartbeat-installations]]
=== Other installation options

* {heartbeat-ref}/running-on-docker.html[Docker]
* {heartbeat-ref}/setup-repositories.html[APT or YUM]
* https://www.elastic.co/downloads/beats/heartbeat[Download page]

[[uptime-connect-to-stack]]
== Step 2: Connect to {es} and {kib}

Connections to {es} and {kib} are required to set up {beatname_uc}.

Set the connection information in `heartbeat.yml`. To locate this configuration file,
see {heartbeat-ref}/directory-layout.html[Directory layout].

include::{beats-repo-dir}/tab-widgets/set-connection-widget.asciidoc[]

[NOTE]
=====

You can send data to other {heartbeat-ref}/configuring-output.html[outputs], such as Logstash, 
but that requires additional configuration and setup.

=====

To learn more about required roles and privileges, see {heartbeat-ref}/feature-roles.html[Grant users access to secured resources].

[[heartbeat-configuration]]
== Step 3: Configure {beatname_uc} monitors

{beatname_uc} provides monitors to check the status of hosts at set intervals.
{beatname_uc} currently provides monitors for ICMP, TCP, and HTTP (see
{heartbeat-ref}/heartbeat-overview.html[{beatname_uc} overview] for more about these monitors). 

You configure each monitor individually. In `heartbeat.yml`, specify the
list of monitors that you want to enable. Each item in the list begins with a
dash (-). The following example configures {beatname_uc} to use two monitors, an
`icmp` monitor and a `tcp` monitor:

[source,yaml]
----------------------------------------------------------------------
heartbeat.monitors:
- type: icmp
  schedule: '*/5 * * * * * *' <1>
  hosts: ["myhost"]
- type: tcp
  schedule: '@every 5s' <2>
  hosts: ["myhost:12345"]
  mode: any <3>
----------------------------------------------------------------------
<1> The `icmp` monitor is scheduled to run exactly every 5 seconds (10:00:00,
10:00:05, and so on). The `schedule` option uses a cron-like syntax based on
https://github.com/gorhill/cronexpr#implementation[this `cronexpr` implementation].
<2> The `tcp` monitor is set to run every 5 seconds from the time when {beatname_uc}
was started. {beatname_uc} adds the `@every` keyword to the syntax provided by the
`cronexpr` package.
<3> The `mode` specifies whether to ping one IP (`any`) or all resolvable IPs
(`all`).

[TIP]
=====

To test your configuration file, change to the directory where the {beatname_uc} binary 
is installed, and run {beatname_uc} in the foreground with the following options specified: 
`./heartbeat test config -e`. Make sure your config files are in the path expected by 
{beatname_uc} (see {heartbeat-ref}/directory-layout.html[Directory layout]), or use the 
`-c` flag to specify the path to the config file.
=====

For more information about configuring {beatname_uc}, also see:

* {heartbeat-ref}/configuring-howto-heartbeat.html[Configure {beatname_uc}]
* {beats-ref}/config-file-format.html[Config file format]
* {heartbeat-ref}/heartbeat-reference-yml.html[`heartbeat.reference.yml`]: This 
reference configuration file shows all non-deprecated options. You’ll find it in the same location as `heartbeat.yml`.

[[configure-heartbeat-location]]
== Step 4: Configure {beatname_uc} location

{beatname_uc} can be deployed in multiple locations so that you can detect 
differences in availability and response times across those locations.
Configure the {beatname_uc} location to allow {kib} to display location-specific
information on Uptime maps and perform Uptime anomaly detection based
on location.

To configure the location of a {beatname_uc} instance, modify the 
`add_observer_metadata` processor in +{beatname_lc}.yml+.  The following 
example specifies the `geo.name` of the `add_observer_metadata` processor as
`us-east-1a`:

[source,yaml]
----------------------------------------------------------------------
# ============================ Processors ============================

processors:
  - add_observer_metadata:
      # Optional, but recommended geo settings for the location Heartbeat is running in
      geo: <1>
        # Token describing this location
        name: us-east-1a <2>
        # Lat, Lon "
        #location: "37.926868, -78.024902" <3>
----------------------------------------------------------------------
<1> Uncomment the `geo` setting.
<2> Uncomment `name` and assign the name of the location of the Heartbeat server.
<3> Optionally uncomment `location` and assign the latitude and longitude.

[TIP]
=====

To test your configuration file, change to the directory where the {beatname_uc} binary 
is installed, and run {beatname_uc} in the foreground with the following options specified: 
`./heartbeat test config -e`. Make sure your config files are in the path expected by 
{beatname_uc} (see {heartbeat-ref}/directory-layout.html[Directory layout]), or use the 
`-c` flag to specify the path to the config file.
=====

[[set-heartbeat-assets]]
== Step 5: Set up assets

{beatname_uc} comes with predefined assets for parsing, indexing, and
visualizing your data. To load these assets:

. Make sure the user specified in `heartbeat.yml` is
{heartbeat-ref}/privileges-to-setup-beats.html[authorized to set up {beatname_uc}].

. From the installation directory, run:
+
--
include::{beats-repo-dir}/tab-widgets/setup-widget.asciidoc[]
--
+
`-e` is optional and sends output to standard error instead of the configured log output.

This step loads the recommended {ref}/indices-templates.html[index template] for writing to {es}.
It does not install {beatname_uc} dashboards. {beatname_uc} dashboards and 
installation steps are available in the
https://github.com/elastic/uptime-contrib[uptime-contrib] GitHub repository.

[TIP]
=====
A connection to {es} (or {ess}) is required to set up the initial
environment. If you're using a different output, such as {ls}, see
{heartbeat-ref}/heartbeat-template.html#load-template-manually[Load the index template manually].
=====

[[start-heartbeat]]
== Step 6: Start {beatname_uc}

Before starting {beatname_uc}, modify the user credentials in
`heartbeat.yml` and specify a user who is
{heartbeat-ref}/privileges-to-publish-events.html[authorized to publish events].

To start {beatname_uc}, run:

// tag::start-step[]
:requires-sudo:
include::{beats-repo-dir}/tab-widgets/start-widget.asciidoc[]
:requires-sudo!:
// end::start-step[]

{beatname_uc} is now ready to check the status of your services and send events to your defined output.

[[view-uptime-kibana]]
== Step 7: View your data in {kib}

Let's confirm your data is correctly ingested to your cluster.

. Launch {kib}:
+
--
include::{beats-repo-dir}/tab-widgets/open-kibana-widget.asciidoc[]
--

. In the side navigation, click *Observability > Uptime*.

Now let's have a look at the <<monitor-uptime,Uptime app>>.

// Add Javascript and CSS for tabbed panels
include::{beats-repo-dir}/tab-widgets/code.asciidoc[]

:!beatname_uc:
:!beatname_lc:
:!beatname_pkg:
