[[uptime-set-up-choose-agent]]
= Use the {uptime-app}

beta[]

You can now create monitors directly in the {uptime-app}.
To try this beta functionality, first you need to enable Monitor Management:

. Go to **{observability}** -> **Uptime**.
. Click **Monitor Management**.
. Review the terms and conditions and click **Enable** to start using Monitor Management.

From here, you can either <<global-managed-testing-infrastructure,use Elastic's global managed testing infrastructure>>
or <<private-locations,create a private location>> to run monitors from your own premises.

NOTE: To use the Elastic Synthetics integration, see the https://www.elastic.co/guide/en/observability/8.3/uptime-set-up.html#uptime-set-up-choose-agent[8.3 documentation]. The Elastic Synthetics integration is similar to the {uptime-app} approach described above, but contains fewer configuration options and does not allow you to run monitors against Elastic's global managed testing locations.

[discrete]
[[global-managed-testing-infrastructure]]
== Use global managed testing infrastructure

With Elastic's global managed testing infrastructure, you can create and run monitors in multiple
locations using the {uptime-app} UI without having to manage your own infrastructure.
Elastic takes care of software updates and capacity planning for you.

To add a monitor using Elastic's global managed testing infrastructure:

. Go to the **Monitor Management** page.
. Click **Add monitor**.
. In _Monitor locations_, select one or more locations.
. Choose a _Monitor type_ and configure the monitor as needed.
. Click **Save monitor**.

If you are setting up a **Browser** monitor, see <<synthetics-create-test>>
for more details on writing synthetic tests.

[discrete]
[[private-locations]]
== Run a monitor on private locations

Private locations allow you to run monitors from your own premises.
	
TIP: You can run the same monitor both from Elastic's global managed infrastructure _and_ your private locations to compare results.

Before you create a private location, you need to set up {fleet}, and connect an agent to it.
Then, you can create a private location in the {uptime-app} UI.
Now, whenever you access the monitor creation page, this private location will appear in the list
of locations to which you can deploy monitors.

[discrete]
[[private-locations-fleet-agent]]
=== Set up {fleet-server} and {agent}

To deploy monitors to private locations, you must complete two prerequisites:

* *Set up {fleet-server}*: If you are using {ecloud}, {fleet-server} will already be provided and you can skip this step.
To learn more, see <<set-up-fleet,{fleet}>>.
* **Create an agent policy**:  For more information on agent policies and creating them,
see {fleet-guide}/agent-policy.html#create-a-policy[{agent} policy].

[IMPORTANT]
====
A private location should be set up against an agent policy that runs on a single {agent}.
Do _not_ run the same agent policy on multiple agents being used for private locations, as you may
end up with duplicate or missing tests. Private locations do not currently load balance tests across
multiple {agents}.

If there are multiple monitors that need to run from a private location at the same time, up to two
will run concurrently on that {agent}. The other monitors will wait until a previous test has
finished running and there is capacity, up to a maximum of two at the same time.
====

[discrete]
[[private-location-docker]]
=== Pull the Docker image

Elastic provides Docker images that you can use to run {fleet} and an {agent} more easily.

For monitors running on private locations, you _must_ use the `elastic-agent-complete`
Docker image to create a self-hosted {agent} node. The standard {ecloud} or self-hosted
{agent} will not work.

ifeval::["{release-state}"=="unreleased"]

Version {version} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

To pull the Docker image run:

[source,sh,subs="attributes"]
----
docker pull docker.elastic.co/beats/elastic-agent-complete:{version}
----

endif::[]

[discrete]
[[private-locations-connect]]
=== Connect to the {stack}

Before you can create a private location, you must connect {fleet} to the {stack}.
Then, to enroll an {agent} to {fleet}, you'll need an enrollment token and the URL of the {fleet-server}.

You can use the default enrollment token for your policy or create new policies and enrollment tokens as needed.

ifeval::["{release-state}"=="unreleased"]

Version {version} has not yet been released.

endif::[]

ifeval::["{release-state}"!="unreleased"]

[source,sh,subs="attributes"]
----
docker run \
  --env FLEET_ENROLL=1 \
  --env FLEET_URL={fleet-server-host-url} \
  --env FLEET_ENROLLMENT_TOKEN={enrollment-token} \
  --rm docker.elastic.co/beats/elastic-agent-complete:{version}
----

endif::[]

For more information on running {agent} with Docker, see
{fleet-guide}/elastic-agent-container.html[Run {agent} in a container] and
{fleet-guide}/fleet-enrollment-tokens.html[{fleet} enrollment tokens].

You may need to set other environment variables.
Learn how in {fleet-guide}/agent-environment-variables.html[{agent} environment variables guide].

[discrete]
[[private-locations-add]]
=== Add a private location

To add a new private location:

. Go to **{observability}** -> **Uptime**.
. Click **Monitor Management**.
. Click **Private locations**.
. Click **Add location**.
. Give your new location a unique _Location name_ and select the _Agent policy_ you created above.
. Click **Save**.

[discrete]
[[private-locations-config]]
=== Configure the monitor

After you have successfully added a new private location, close the _Private locations_ flyout to return
to the Monitor Management page. From there:

. Click **Add monitor**.
. Give your monitor a unique _Monitor name_.
. In _Monitor locations_, select your new private location, which will appear using the _Location name_
you provided and will have a "Private" badge next to its name.
+
image::images/private-locations-monitor-locations.png[Screenshot of Monitor locations options including a private location]
. Choose a _Monitor type_ and configure the monitor as needed.
. Click **Save monitor**.

If you are setting up a *Browser* synthetic monitor, see <<synthetics-create-test>>
for more details on writing synthetic tests.

[discrete]
[[uptime-app-view-in-kibana]]
== View in {kib}

{agent} is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the {uptime-app}), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.