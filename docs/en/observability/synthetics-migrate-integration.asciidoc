[[synthetics-migrate-from-integration]]
= Migrate from the Elastic Synthetics integration

The Elastic Synthetics integration is a method for creating
synthetic monitors that is no longer recommended.

You should _not_ use the Elastic Synthetics integration to set up new monitors and
should make a plan to migrate existing monitors to use either *{project-monitors-cap}* or the *{synthetics-app}*:

* With Elastic *{project-monitors-cap}*, you write tests in an external version-controlled project
  and use a CLI tool to push monitors to the {stack}.
* The *{synthetics-app}* is an application in {kib} that you can use to configure and create
  monitors using a user interface.

[discrete]
[[synthetics-migrate-integration-compare]]
= Compare approaches

Below is a comparison of how you used the {agent} integration to create
monitors and how you'll use the {synthetics-app} or projects to create monitors:

|===
| | {agent} integration | Projects or the {synthetics-app}

| *Supported monitors*
| Supported both lightweight and browser monitors
| Supports both lightweight and browser monitors

| *Where monitors run*
(<<synthetics-migrate-integration-location,read{nbsp}more>>)
| You had to run monitors on your infrastructure.
a| You can run monitors on both:

* Your infrastructure using <<synthetics-private-location,{private-location}s>>
* Elastic's global managed infrastructure

| *Where you configure monitors*
a| You could configure monitors using:

* A user interface in {kib} (all monitor types)
* Code in an external, version-controlled project (browser monitors _only_)
a| You can configure monitors using:

* A user interface in {kib} (all lightweight monitors, browser monitors via inline script only)
* Code in an external, version-controlled project (all monitor types)

| *How to use projects*
(<<synthetics-migrate-integration-projects,read{nbsp}more>>)
a| . Created a project that uses `@elastic/synthetics`.
   . Wrote journeys in JavaScript or TypeScript files.
   . Zipped the entire project.
   . Configured and created the monitor in the
     Integrations UI by adding a ZIP URL that pointed to
     the location of the project.
a| . Create a project that uses `@elastic/synthetics`.
   . Configure lightweight monitors in YAML files.
   . Write journeys in JavaScript or TypeScript files and configure
     individual monitors in your journey code using `monitor.use` or
     configure all monitors using the `synthetics.config.ts` file.
   . Use the `elastic/synthetics push` command to create monitors.

Find more details in <<synthetics-get-started-project>>.

| *How to use the UI*
(<<synthetics-migrate-integration-ui,read{nbsp}more>>)
a| . Went to the *Integrations* page in {kib}.
   . Searched for and added the *Elastic Synthetics* integration.
   . Configured the monitor.
   . Created the monitor.
a| . Go to *Synthetics* in {kib}.
   . Go to *Management*.
   . Click *Create monitor*.
   . Configure the monitor.
   . Create the monitor.

Find more details in <<synthetics-get-started-ui>>.
|===

[discrete]
[[synthetics-migrate-integration-location]]
= Where monitors run

If you want to continue hosting on your infrastructure, you will need to create a
{private-location} before creating monitors.
If you have already have an {agent} running using `elastic-agent-complete`,
you can <<synthetics-private-location-add,add it as a new {private-location}>>
in the {synthetics-app}.
To create a new {private-location} from scratch, follow all instructions in
<<synthetics-private-location>>.

Alternatively, you can start hosting on Elastic's global managed infrastructure.
With Elastic's global managed testing infrastructure, you can create and run monitors in multiple
locations without having to manage your own infrastructure.
Elastic takes care of software updates and capacity planning for you.

include::synthetics-reference/global-managed-paid-for.asciidoc[]

[discrete]
[[synthetics-migrate-integration-projects]]
= How to use projects

If you already have an external project you were adding via a ZIP URL
you can use the same project, but you will have to make some changes.

First, upgrade the existing project to use the latest version of 
`@elastic/synthetics`:

. Run `npm install -g @elastic/synthetics@latest` to install
  the latest version of the CLI.
. Upgrade your existing project to use new project settings:
.. Run `npm @elastic/synthetics init <path-to-existing-project>`.
.. Respond to all prompts provided by the CLI.
+
[NOTE]
====
To ensure that your project will work with the latest version of Elastic Synthetics,
the CLI will create a new configuration file on `init`, but you will see a prompt
asking if you would like to continue before overwriting an existing configuration file.
====
. Review updated files and directories, including:
.. `journeys/` will contain sample journey code.
Move existing journey files into this directory.
.. `synthetics.config.ts` will contain updated default settings
needed for the upgraded project.
.. `package.json` will contain updated NPM settings for your project.
+
[NOTE]
====
If there is already a `package.json` file in the directory when you run `init`,
the synthetics agent will _not_ create a new `package.json` file.
Instead it will modify the existing `package.json` file to:

* Add `@elastic/synthetics` library to the dependencies if it's not already present.
* Add a `test` and `push` script if they are not already present.
====
.. `.github/` will contain sample workflow files to use with GitHub Actions.

Then, you can further configure monitors as needed.
In the upgraded project, you'll use code (instead of the Integrations UI)
to define settings like the name of the monitor and the frequency at which it will run.
There are two ways you can configure monitors using code:

* For individual monitors, use `monitor.use` directly in the journey code.
  Read more in <<synthetics-monitor-use>>.
* To configure all monitors at once, use the synthetics configuration file.
  Read more in <<synthetics-configuration>>.

Finally, you'll create monitors using `push` instead of by adding a ZIP URL in
the Integrations UI. This will require an API token.
Read more in <<elastic-synthetics-push-command>>.

Optionally, you can also add lightweight monitors to the project in YAML files.
Read more about adding lightweight monitors to projects in <<synthetics-lightweight>>.

For more information on getting started with projects,
refer to <<synthetics-get-started-project>>.

[discrete]
[[synthetics-migrate-integration-ui]]
= How to use the UI

If you created monitors solely via the Elastic Synthetics integration UI,
you can recreate monitors in the {synthetics-app}.

The configuration options in the {synthetics-app} look very similar to the
Elastic Synthetics integration UI with a few exceptions.
In the {synthetics-app}:

. You will select one or more locations for each monitor.
. You cannot use a ZIP URL for browser monitors.
  Use projects instead.
. You can test the configuration (including the journey for browser monitors)
  using *Run test* before creating the monitor.

For more information on getting started with the {synthetics-app},
refer to <<synthetics-get-started-ui>>.
