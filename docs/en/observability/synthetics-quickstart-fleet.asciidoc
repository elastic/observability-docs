:synthetics-image: docker.elastic.co/beats/elastic-agent-complete:{version}

[[synthetics-quickstart-fleet]]
= Synthetic monitoring using {agent} and {fleet}

++++
<titleabbrev>Monitor using {agent} and {fleet}</titleabbrev>
++++

****
Prefer to use our legacy {beats} for your use case? Refer to <<ingest-uptime>>.
****

[discrete]
[[synthetics-quickstart-fleet-setup]]
== Set up Fleet Server

Synthetic monitoring via {agent} and {fleet} requires {fleet-server} to be set up. If you are using Elastic Cloud fleet server will already be provided and you can skip this step. To learn more, see <<set-up-fleet,{fleet}>>.

[discrete]
[[synthetics-quickstart-fleet-agent-policy]]
== Create an agent policy for Elastic Synthetics

Use a separate fleet policy for Synthetics monitors in most cases. It is generally the case that synthetics monitors should run on nodes dedicated to that purpose. See {fleet-guide}/agent-policy.html#create-a-policy[{agent} policy] for more information on Fleet policies and creating them.

[role="screenshot"]
image::images/synthetics-agent-policy.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-add-container]]
== Add an {agent} to {fleet}, using the special *elastic-agent-complete* container

{agent} is a single, unified agent that you can deploy to hosts or containers to collect data and send it to the {stack}. Behind the scenes, {agent} runs {beats} or {elastic-endpoint} required for your configuration. 

To run synthetics tests, you must use the *elastic-agent-complete* Docker image to create a self-hosted {agent} node. This image contains the dependencies to run synthetic monitors. The standard Elastic Cloud or self-hosted {agent} will not work.

To add an {agent} to {fleet}, you'll need an enrollment token and the URL of your fleet server. You can use the default enrollment token for your policy or create new enrollment tokens as needed. To learn more, see {fleet-guide}/elastic-agent-container.html[Run Elastic {agent} in a container] and {fleet-guide}/fleet-enrollment-tokens.html[{fleet} enrollment tokens] for more information.

You may need to set additional environment variables. See the {fleet-guide}/agent-environment-variables.html[{agent} environment variables guide] for more information. See {fleet-guide}/elastic-agent-container.html[Run {agent} in a container] for more information on running {agent} with Docker.

[discrete]
[[synthetics-quickstart-fleet-configure-policy]]
== Configure an Elastic Synthetics integration policy

beta[] Elastic Synthetics tests can be configured through {fleet} using the Elastic Synthetics integration. To learn more, see <<add-synthetics-integration,Elastic Synthetics>>.

[role="screenshot"]
image::images/synthetics-integration.png[Synthetics integration]

In the example above, our library of synthetic tests is downloaded from the
remote zip endpoint for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. 
The fields should be set as follows:

* *Zip URL*: URL pointing to a zip file containing the test project. 

* *Folder*: The folder within the zip file containing synthetics tests, this will be the working directory in which the synthetics agent will be run. {heartbeat} will invoke the synthetics library in this folder. 

* *Zip URL Username* and *Zip URL Password* HTTP Basic Authentication headers for the remote zip endpoint. 

* *Params* JSON formatted dynamic values that may be required by your specific tests. See <<synthetics-params-secrets>> for more information.

When applying the integration policy to an {agent} policy, make sure to select your dedicated synthetics agent policy.

[role="screenshot"]
image::images/synthetics-agent-policy-select.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-view-in-kib]]
== View in {kib}

That's it! Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the app), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.
