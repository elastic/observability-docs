:synthetics-image: docker.elastic.co/beats/elastic-agent-complete:{version}

[[synthetics-quickstart-fleet]]
= Quickstart: Synthetic monitoring via {agent} and {fleet}

++++
<titleabbrev>Quickstart with Elastic Agent and Fleet</titleabbrev>
++++

[discrete]
[[synthetics-quickstart-fleet-step-one]]
== Step 1: Pull the latest {agent} complete docker image

[source,sh,subs="attributes"]
----
docker pull {synthetics-image}
----

[discrete]
[[synthetics-quickstart-fleet-step-two]]
== Step 2: Set up Fleet Server

Synthetic monitoring via {agent} and {fleet} requires {fleet-server} to be set up. To learn more, see {fleet-guide}/fleet-quick-start.html#set-up-fleet[{fleet}].

[discrete]
[[synthetics-quickstart-fleet-step-three]]
== Step 3: Create an agent policy for Elastic Synthetics

Use policies to manage settings across a group of {agent}s. A policy can contain any number of integrations for collecting observability data from the various services running on your host. {fleet} is automatically configured with a default agent policy, but it is useful to create a separate agent policy to use for synthetics tests. For more information on creating policies, see https://www.elastic.co/guide/en/fleet/current/agent-policy.html#create-a-policy[{agent} policy].

[role="screenshot"]
image::images/synthetics-agent-policy.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-step-four]]
== Step 4: Add an {agent} to {fleet}

{agent} is a single, unified agent that you can deploy to hosts or containers to collect data and send it to the {stack}. Behind the scenes, {agent} runs {beats} or {elastic-endpoint} required for your configuration. 

NOTE: To run synthetics test, you must use the *elastic-agent-complete* Docker container, which contains the dependencies to run synthetic monitors.

To add an {agent} to {fleet}, you'll need an enrollment token. You can use the default enrollment token for your policy or create new enrollment tokens as needed. To learn more, see {fleet-guide}/fleet-enrollment-tokens.html[{fleet} enrollment tokens].

To add the *elastic-agent-complete* to {fleet}, run the following Docker command. Ensure to substitute the correct `FLEET_URL` and `FLEET_ENROLLMENT_TOKEN`.

// NOTE: We do NOT use <1> references in the below example, because they create whitespace after the trailing \
// when copied into a shell, which creates mysterious errors when copy and pasting!
[source,sh,subs="attributes"]
----
docker run \
  --rm \
  --name=synthetics \
  --user=elastic-agent \
  -e FLEET_URL=http://localhost:8220 \
  -e FLEET_ENROLLMENT_TOKEN=enrollment-token \
  -e FLEET_ENROLL=1 \
  {synthetics-image} -e \
----

NOTE: You may need to set additional environment variables. See the {fleet-guide}/agent-environment-variables.html[{agent} environment variables guide] for more information. See {fleet-guide}/elastic-agent-container.html[Run {agent} in a container] for more information on running {agent} with Docker.

[[synthetics-quickstart-fleet-step-five]]
== Step 5: Configure an Elastic Synthetics integration policy beta[]

Elastic Synthetics tests can be configured through {fleet} using the Elastic Synthetics integration. To learn more, see {fleet-guide}/fleet-quick-start.html#add-synthetics-integration[Elastic Synthetics].

[role="screenshot"]
image::images/synthetics-integration.png[Synthetics integration]

In the example above, our library of synthetic tests is downloaded from the
remote zip endpoint for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. The *zip URL* refers to the endpoint where the test project exists. *Folder* refers to the relative path where the synthetic journey files are located. {heartbeat} will invoke the synthetics library on this folder. *zip URL username* and *zip URL password* are blank in this example, but if provided, they will be sent as HTTP Basic Authentication headers to the remote zip endpoint. *Params* refers to dynamic values that always need to be defined for our tests to run. This is often helpful switching between production and development values. 


NOTE: When applying the integration policy to an {agent} policy, make sure to select your dedicated synthetics agent policy.

[role="screenshot"]
image::images/synthetics-agent-policy-select.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-step-six]]
== Step 6: View in {kib}

That's it! Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the app), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.

// WARNING: Elastic synthetics runs Chromium without the extra protection of its process https://chromium.googlesource.com/chromium/src/+/master/docs/linux/sandboxing.md[sandbox] for greater compatibility with Linux server distributions. Add the `sandbox: true` option to a given browser
// monitor in {heartbeat} to enable sandboxing. This may require using a https://github.com/elastic/synthetics/blob/master/examples/docker/seccomp_profile.json[custom seccomp policy] with docker, which brings its own additional risks. This is generally safe when run against sites whose content you trust,
// and with a recent version of Elastic synthetics and chromium.
