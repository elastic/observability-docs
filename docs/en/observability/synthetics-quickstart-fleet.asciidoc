:synthetics-image: docker.elastic.co/beats/elastic-agent-complete:{version}

[[synthetics-quickstart-fleet]]
= Synthetic monitoring using {agent} and {fleet}

++++
<titleabbrev>Monitor using {agent} and {fleet}</titleabbrev>
++++

****
Prefer to use our legacy {beats} for your use case? Refer to <<ingest-uptime>>.
****

[discrete]
[[synthetics-quickstart-fleet-setup]]
== Set up {fleet} Server

Synthetic monitoring via {agent} and {fleet} requires {fleet-server} to be set up. If you are using Elastic Cloud fleet server will already be provided and you can skip this step. To learn more, see <<set-up-fleet,{fleet}>>.

[discrete]
[[synthetics-quickstart-fleet-agent-policy]]
== Create an agent policy for Elastic Synthetics

Use a separate fleet policy for Synthetics monitors in most cases. It is generally the case that synthetics monitors should run on nodes dedicated to that purpose. See {fleet-guide}/agent-policy.html#create-a-policy[{agent} policy] for more information on Fleet policies and creating them.

[role="screenshot"]
image::images/synthetics-agent-policy.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-add-container]]
== Add an {agent} to {fleet}, using the special *elastic-agent-complete* container

{agent} is a single, unified agent that you can deploy to hosts or containers to collect data and send it to the {stack}. Behind the scenes, {agent} runs {beats} or {elastic-endpoint} required for your configuration. 

To run synthetics tests, you must use the *elastic-agent-complete* Docker image to create a self-hosted {agent} node. This image contains the dependencies to run synthetic monitors. The standard Elastic Cloud or self-hosted {agent} will not work.

To add an {agent} to {fleet}, you'll need an enrollment token and the URL of your fleet server. You can use the default enrollment token for your policy or create new enrollment tokens as needed. To learn more, see {fleet-guide}/elastic-agent-container.html[Run {agent} in a container] and {fleet-guide}/fleet-enrollment-tokens.html[{fleet} enrollment tokens] for more information.

You may need to set additional environment variables. See the {fleet-guide}/agent-environment-variables.html[{agent} environment variables guide] for more information. See {fleet-guide}/elastic-agent-container.html[Run {agent} in a container] for more information on running {agent} with Docker.

[discrete]
[[synthetics-quickstart-fleet-configure-policy]]
== Configure an Elastic Synthetics integration policy

beta[] Elastic Synthetics tests can be configured through {fleet} using the Elastic Synthetics integration. To learn more, see <<add-synthetics-integration,Elastic Synthetics>>.

For real browser monitoring, set the _Monitor type_ to "Browser" and define a _Monitor interval_.
You can use the _Enabled_ toggle to turn the monitor on or off in {fleet} without having to delete and recreate the monitor.

[role="screenshot"]
image::images/synthetics-integration.png[Synthetics integration]

Set the _Source Type_ for the browser monitor.
If you're using a <<synthetics-test-suite, synthetic test suite>>, use the _Zip URL_ type.
The fields should be set as follows:

* *Zip URL*: URL pointing to a zip file containing the test project.

* *Folder*: The folder within the zip file containing synthetics tests. This will be the working directory in which the synthetics agent runs. {heartbeat} will invoke the synthetics library in this folder. 

* *Params*: JSON formatted dynamic values that may be required by your specific tests. See <<synthetics-params-secrets>> for more information.

* *Zip URL Username* and *Zip URL Password*: HTTP Basic Authentication headers for the remote zip endpoint. 

[role="screenshot"]
image::images/synthetics-integration-source-type.png[Set source type and related parameters for a synthetic monitor in Elastic {fleet}]

In the example above, our library of synthetic tests is downloaded from the
remote zip endpoint for the git repository for https://github.com/elastic/synthetics-demo/tree/main/todos/synthetics-tests[our todos example]. 

Using a git repository for synthetics journeys allows you to use a GitOps workflow for deploying changes to synthetic monitors,
enabling git features, like pull requests and reverts, for managing tests more effectively.

Click *Advanced Browser options* to see more ways to configure your monitor including _Throttling options_.
Set throttling parameters to more accurately control the network speed that the monitor represents.

[role="screenshot"]
image::images/synthetics-integration-throttling.png[Set throttling parameters for a synthetic monitor in Elastic {fleet}]

When applying the integration policy to an {agent} policy, make sure to select your dedicated synthetics agent policy.

[role="screenshot"]
image::images/synthetics-agent-policy-select.png[Synthetics integration]

[discrete]
[[synthetics-quickstart-fleet-view-in-kib]]
== View in {kib}

That's it! Elastic synthetics is now sending synthetic monitoring data to the {stack}.
Navigate to the {uptime-app} in {kib}, where you can see screenshots of each run,
set up alerts in case of test failures, and more.

If a test does fail (shown as `down` in the app), you'll be able to view the step script that failed,
any errors, and a stack trace.
See <<synthetics-visualize>> for more information.
