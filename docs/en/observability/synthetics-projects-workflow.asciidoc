[[synthetics-project-monitors]]
= Working with project monitors

beta[]

Projects are the most powerful and sophisticated way to configure synthetic monitors in the Elastic Stack. Projects let you define your infrastructure as code, more commonly known as IaaC or git-ops. With project monitors you organize your YAML configuration and Javascript/Typescript defined monitors on the filesystem, use Git for version control, and deploy via a CLI tool, usually executed on a CI/CD platform.


[discrete]
== Getting started

Working with projects requires working with the Elastic Synthetics CLI tool, which
can be invoked via the `npx @elastic/synthetics` command. Before getting started
you'll need to install Node.js; the `npx` command is provided by node, downloading
the `@elastic/synthetics` NPM module if not yet available on your system.

Run `npx @elastic/synthetics -h` to display the help menu and confirm your
system is setup correctly

It is highly recommended to use an https://cloud.elastic.co/[Elastic Cloud] deployment with this tutorial.
To use a self-managed deployment, read the <<synthetics-private-location>> docs and set up a private location with Fleet before proceeding.

Start by creating your first project. Run the command below to create a new 
project named `projects-test` in the current directory.

[source,sh]
----
npx @elastic/synthetics init projects-test
----

Then, follow the prompts on screen to setup the correct default variables for your project.
When complete, set the `SYNTHETICS_API_KEY` environment variable in your terminal, which is used
for authentication with your Elastic Stack. You will most likely want to set this permanently. 
This is done differently for https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.2#saving-changes-to-environment-variables[Powershell] and https://unix.stackexchange.com/a/117470[Bash].

Then, take a look at key files and directories inside your project:

* `journeys` is where you'll add `.yaml`, `.ts`, and `.js` files defining your monitors. When you create a new project, this directory will contain files defining sample monitors.
* `synthetics.config.ts` contains settings for your project. When you create a new project, it will contain some basic configuration options that you can customize later.
* `package.json` contains NPM settings for your project. Learn more in the https://docs.npmjs.com/about-packages-and-modules[Synthetic tests configuration].
* `.github` contains sample Github actions workflow files for use with Github Actions.

While inside the project directory you can do two things with the `npx @elastic/synthetics` command:

* Test browser-based monitors locally. To run all journeys defined in `.ts` and `.js` files:
+
[source,sh]
----
npx @elastic/synthetics journeys
----
* Push all monitor configurations to an Elastic deployment. Run the following command from inside your project:
+
[source,sh]
----
npx @elastic/synthetics push
----

Then, go to the Uptime UI in Kibana. You should see your newly pushed monitors running. You can also go to the *Monitor Management* page to see the monitors' configuration settings.

== Recommended workflow

After your project is set up, there are some best practices you can implement to manage project monitors effectively.

First, it's recommended that you version control all files in git. If your project is not already in a version controlled directory add it now, and push it to your git host.

While it can be convenient to run the `push` command directly from your workstation,
especially when setting up a new project, it is not recommended for production environments.

Instead, we recommended that you:

1. Develop and test changes locally
2. Create a pull request for all config changes
3. Have your CI service automatically verify the PR by running `npx @elastic/synthetics .`
4. Have a human approve the pull request
5. Merge the pull request
6. Have your CI service automatically deploy the change by running `npx @elastic/synthetics push` after changes are merged

The exact implementation details will depend on the CI system and Git host you use. 
You can reference the sample Github configuration file that is included in the `.github`
directory when you create a new project.
