[[monitor-amazon-sqs]]
= Monitor Amazon Simple Queue Service (SQS)

++++
<titleabbrev>Monitor SQS</titleabbrev>
++++

The main parts in a distributed messaging system include the software components
of your system, the queue (distributed on Amazon SQS), and the messages in the
queue.

Amazon Simple Queue Service (SQS) is a message queuing service that makes it
easier to decouple and scale microservices, distributed systems, and serverless
applications. 

AWS SQS and Amazon CloudWatch are integrated and therefore, you can collect,
view, and analyze data. Metrics for Amazon SQS queues are automatically
collected and pushed to CloudWatch at one-minute intervals.

You can view and analyze the queueâ€™s metrics from the Amazon SQS console, the
CloudWatch console, the AWS CLI, or by using the CloudWatch API.

After a message is received, it remains in the queue for consumers to ingest.
Amazon SQS provides a visibility timeout, which is a period of time that
prevents other consumers from receiving and processing the message (default:
30s, min: 0s, max: 12h).

Amazon SQS does not automatically delete the messages in the queue and therefore
the consumer is responsible for the deletion of the message after consumption.

The Elastic {integrations-docs}/aws/sqs[Amazon SQS integration]
collects metrics from Amazon CloudWatch using {agent}.

Amazon SQS is also integrated with AWS CloudTrail, which is a service that can
capture API calls related to Amazon SQS queues as events. For more information
about logging Amazon SQS API calls using AWS CloudTrail, refer to the 
https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-logging-using-cloudtrail.html[Amazon SQS documentation].

[discrete]
[[get-started-sqs]]
== Get started

To collect SQS metrics, you typically need to install the Elastic
{integrations-docs}/aws/sqs[Amazon SQS integration] and deploy an {agent}
locally or on an EC2 instance.

Expand the **quick guide** to learn how, or skip to the next section if your
data is already in {es}.

//Sets the integration name used in the quick guide
:integration-name: Amazon SQS

include::{observability-docs-root}/docs/en/shared/integrations-quick-guide.asciidoc[]

//Clears the integration name
:integration-name!:

{agent} is currently the preferred way to add SQS metrics. For other ways, refer
to {cloud}/ec-cloud-ingest-data.html[Adding data to {es}].

[discrete]
[[dashboard-sqs]]
== Dashboards

{kibana-desc}
For example, to see an overview of your S3 metrics in {kib}, go to
the **Dashboard** app and navigate to the **[Metrics AWS] SQS Overview**
dashboard.

[role="screenshot"]
image::images/sqs-dashboard.png[Screenshot showing the SQS overview dashboard]

[discrete]
== Metrics to watch

// REVIEWERS: Why are these metrics important to watch? Also see comment I made
// in the SQS and Kinesis docs.

Here are the key metrics that you should watch, organized by category. For a
full list of fields exported by the integration, refer to the
{integrations-docs}/aws/sqs[Amazon SQS integration] docs.

.messages
|===
| Field | Description | Unit | Type

| `aws.sqs.messages.delayed`
| The number of messages in the queue that are delayed and not available for reading immediately.
| Count
| long

| `aws.sqs.messages.not_visible`
| The number of messages that are in flight.
| Count
| long

| `aws.sqs.messages.visible`
| The number of messages available for retrieval from the queue.
| Count
| long

| `aws.sqs.messages.deleted`
| The number of messages deleted from the queue.
| Count
| long

| `aws.sqs.messages.received`
| The number of messages returned by calls to the ReceiveMessage action.
| Count
| long

| `aws.sqs.messages.sent`
| The number of messages added to a queue.
| Count
| long

| `aws.sqs.oldest_message_age.sec`
| The approximate age of the oldest non-deleted message in the queue.
| Milliseconds
| long

| `aws.sqs.sent_message_size.bytes`
| The size of messages added to a queue.
| Bytes
| long
|===

// REVIEWERS: Does it really make sense to have separate tables for
// queue info if we only have one row in the table? Do we plan to add other
// fields.

.queue
|===
| Field | Description | Unit | Type

| `aws.sqs.queue.name`
| SQS queue name
| Bytes
| keyword
|===
