Questions and issues:

General (mostly for the development team):

Too many inline links. These are distracting for users. We might want to capture
related links in a single section to avoid rabbit holing users. Also the link
text should make it clear where users are being directed. 
TODO: Add the links after we decide the best approach. 

Is it safe to assume there is no plagiarized text in these documents. Changing
a couple words, but keeping the meaning of a sentence is still considered
plagiarism. All content needs to be in your own words, not copied and lightly
changed from 3rd-party docs.

Where do we expect users to start their journey with this content? What
assumptions are we making? Do we expect users to see these topics in the
observability guide after they've added their data? In this case, I would
expect this content to list some prereqs in case this is the first topic they
land on.

What is the plan for keeping this documentation up-to-date as the integrations
add new fields or field names change? Since the change happens on the integrations
side, how will be make sure these docs get updated when needed?

This content really focuses on metrics. What about logs? 


// REVIEWERS: This topic does a better job at explaining why these metrics are
// important, but it also duplicates existing content. I think including all
// the detailed field descriptions here might be helpful, but it's a lot for
// users to read through. Would this topic work OK without the overview tables?
// We could send users to the integrations docs as the source of truth for what
// these fields mean.

//REVIEWERS: What about logging? Do we want to mention Elastic Serverless
//Forwarder here?

//REVIEWERS: This section needs work. The source gdocs don't really explain
//why these metrics are important to watch.

//Also shouldn't we provide more guidance on how users watch these metrics?
//I feel we need to explain to users how these fields relate to what they see
//in the UI. Might just be a question of mapping the field name to the UI label
//that shows in the UI. WDYT?

//Another problem: we're duplicating the descriptions that already appear in the
//reference docs. This content will get out of sync with the published
//integrations documentation. I can already see that some of these names don't
//match the published (for example, aws.kinesis.metrics.GetRecords_Success.sum).
//It's going to be double the work if/when these fields change. Another possible
//problem is that we won't really know which version of the integration is
//being used, which means that the field names might be different than what we
//list here.

S3: // REVIEWERS: I have removed the detailed steps and screen captures about
// enabling request metrics because it's better to point to the amazon docs to
// "future proof" the content. If you look at the Amazon docs, you'll see that
// AWS has decided that providing screen captures is too costly and
// difficult to maintain. It might make sense to do that in a tutorial where
// users expect detailed steps for everything, but not here.

// REVIEWERS: Why are these metrics important to watch? Seems like
// we should not just list the fields; we should explain why it's important to
// watch particular fields. Otherwise how does this add value beyond the field
// lists in the integrations documentation? Also see the comment I made in the
// Kinesis topic. I think we are setting ourselves up for a lot of extra
// maintenance by repeating these descriptions (mostly) verbatim

Amazon SQS does not automatically delete the messages in the queue and therefore
the consumer is responsible for the deletion of the message after consumption.

//REVIEWERS: Does the user need to do anything to delete messages
//from the queue, or does the integration handle that? Why do users need to know
//this? I wonder if this info about the queue really belongs in the intro?
//Why do Elastic users need to know this?

SQS:

//REVIEWERS: Why do users need to know about this timeout? Do they
//need to change the default?

For the doc team:

File naming conventions: Does including amazon (instead of aws) in the html filename help SEO? In most
cases searching on Amazon xyz instead of AWS xyz yields more hits for me.

Do we have a preference for where we define include statements? Options are:
- index file
- container topic

Wondering if it's OK in the observability guide to nest images under a
sub-folder. I've done this initially because it's easier.
