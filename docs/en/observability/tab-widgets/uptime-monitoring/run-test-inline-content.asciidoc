// tag::heartbeat[]

Copy and paste your test steps into `heartbeat.yml`.
{heartbeat} spawns a separate Node.js process, schedules your tests, and runs them on a Chromium browser.

[source,yml]
----
- type: browser
  id: elastic-website <1>
  name: Elastic website
  schedule: "@every 1m"
  source:
    inline:
      script: |- <2>
      step("load homepage", async () => {
        await page.goto('https://www.elastic.co');
      });
      step("hover over products menu", async () => {
        await page.hover('css=[data-nav-item=products]');
      });
----
<1> Each `monitor` gets its own ID in the {uptime-app} and, therefore its own schedule entry.
This allows tests to be run in parallel and analyzed separately.
<2> In this example, a synthetic journey is defined inline. This is a two-step script that first loads
a homepage and then hovers over a product menu. See <<synthetics-syntax>> for more information.


// end::heartbeat[]

// tag::agent[]

Add an inline monitor when configuring the Elastic Synthetics integration.
In *Monitor settings*, use the *Monitor Type* _Browser_ and switch the *Source Type* to _Inline script_.

Add steps to the code block directly.
Variables like `page` and `params` will be part of your script's scope.

[role="screenshot"]
image::images/synthetics-integration-inline-script.png[Configure a synthetic monitor using an inline script in Elastic {fleet}]

// end::agent[]
