// tag::logs[]

. Follow the {filebeat-ref}/filebeat-installation-configuration.html[Filebeat quick start] to learn how to
install {filebeat} and connect to the {stack}.

ifdef::ecs-logs[]
. Add the following configuration to your `filebeat.yaml` file to start collecting log data.
+
[source,yaml]
.filebeat.yaml
----
filebeat.inputs:
- type: filestream <1>
  paths: /path/to/logs.json
  parsers:
    - ndjson:
        overwrite_keys: true <2>
        add_error_key: true <3>
        expand_keys: true <4>
  fields:
    service.name: your_service_name <5>
    service.version: your_service_version <5>
    service.environment: your_service_environment <5>

processors: <6>
  - add_host_metadata: ~
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~
----
<1> Use the filestream input to read lines from active log files.
<2> Values from the decoded JSON object overwrite the fields that {filebeat} normally adds (type, source, offset, etc.) in case of conflicts.
<3> {filebeat} adds an "error.message" and "error.type: json" key in case of JSON unmarshalling errors.
<4> {filebeat} will recursively de-dot keys in the decoded JSON, and expand them into a hierarchical object structure.
<5> The `service.name` (required), `service.version` (optional) and `service.environment` (optional) of the service you're collecting logs from, used for <<apm-log-correlation>>.
<6> Processors enhance your data. See {filebeat-ref}/filtering-and-enhancing-data.html[processors] to learn more.
endif::ecs-logs[]
ifdef::plaintext[]
. Configure filebeat.yaml file to start collecting log data.
+
. Add the following configuration to your `filebeat.yaml` file to start collecting log data.
+
[source,yaml]
.filebeat.yaml
----
filebeat.inputs:
- type: filestream <1>
  paths: /path/to/logs.log <2>
----
<1> Reads lines from an active log file.
<2> A list of glob-based paths that will be crawled and fetched.
endif::plaintext[]

// end::logs[]


// tag::kubernetes[]
. Make sure your application logs to stdout/stderr.

. Follow the {filebeat-ref}/running-on-kubernetes.html[Run {filebeat} on Kubernetes] guide.

. Enable {filebeat-ref}/configuration-autodiscover-hints.html[hints-based autodiscover] (uncomment the corresponding section in `filebeat-kubernetes.yaml`).

ifdef::ecs-logs[]
. Add these annotations to your pods that log using ECS-compatible JSON. This will make sure the logs are parsed appropriately.
+
[source,yaml]
----
annotations:
  co.elastic.logs/json.overwrite_keys: true <1>
  co.elastic.logs/json.add_error_key: true <2>
  co.elastic.logs/json.expand_keys: true <3>
----
<1> Values from the decoded JSON object overwrite the fields that {filebeat} normally adds (type, source, offset, etc.) in case of conflicts.
<2> {filebeat} adds an "error.message" and "error.type: json" key in case of JSON unmarshalling errors.
<3> {filebeat} will recursively de-dot keys in the decoded JSON, and expand them into a hierarchical object structure.
endif::ecs-logs[]
ifdef::plaintext[]
endif::plaintext[]
// end::kubernetes[]


// tag::docker[]
. Make sure your application logs to stdout/stderr.

. Follow the {filebeat-ref}/running-on-docker.html[Run {filebeat} on Docker] guide.

. Enable {filebeat-ref}/configuration-autodiscover-hints.html[hints-based autodiscover].

ifdef::ecs-logs[]
. Add these labels to your containers that log using ECS-compatible JSON. This will make sure the logs are parsed appropriately.
+
[source,yaml]
.docker-compose.yml
----
labels:
  co.elastic.logs/json.overwrite_keys: true <1>
  co.elastic.logs/json.add_error_key: true <2>
  co.elastic.logs/json.expand_keys: true <3>
----
<1> Values from the decoded JSON object overwrite the fields that {filebeat} normally adds (type, source, offset, etc.) in case of conflicts.
<2> {filebeat} adds an "error.message" and "error.type: json" key in case of JSON unmarshalling errors.
<3> {filebeat} will recursively de-dot keys in the decoded JSON, and expand them into a hierarchical object structure.
endif::ecs-logs[]
ifdef::plaintext[]
endif::plaintext[]
// end::docker[]
