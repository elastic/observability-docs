[[profiling-add-symbols]]
= Add symbols for native frames

beta::[]

To see function names and line numbers in traces of applications written in programming languages that 
compile to native code (C, C++, Rust, Go, etc.), you need to push symbols to the cluster. This is done
with the `symbtool` CLI utility.

Download the `symbtool` binary for x86_64 https://ela.st/symbtool-linux-amd64[here], or the arm64 binary https://ela.st/symbtool-linux-arm64[here].

NOTE: The `symbtool` binary currently requires a Linux machine.

[discrete]
[[profiling-use-symbtool]]
== How to use the `symbtool` binary

Before using the `symbtool` binary, you need to create an Elasticsearch API token. To learn how 
to do this, please refer to {kibana-ref}/api-keys.html#create-api-key[this article]. This token
is what needs to be passed via the `-t` or `--api-key` argument.

Further, you'll need to acquire the URL of the symbolization service by logging into the cloud
panel and copying the "Symbols" endpoint. This is then passed via the `-u` or `--url` argument.

[role="screenshot"]
image::images/profiling-symbolizer-url.png[]

[discrete]
[[profiling-symbols-c]]
== Custom C, C++, Go and Rust applications
C/C++ applications must be built with debug symbols (`-g`) for symbolization to work. Rust applications
must be built with https://doc.rust-lang.org/cargo/reference/profiles.html#debug[`debug = 1`] (or higher). 
Go binaries will not require any special compiler flags and come with debug information by default. The debug 
info doesn't have to be deployed to production, but it does have to be present temporarily to push it to the 
Elastic cluster.

If you don't mind deploying your applications with debug symbols, run:

[source,bash]
----
./symbtool push-symbols executable -e ./my-app -u <symbolizer url> -t <API token>
----

If you don't want debug symbols in production, copy the executable and strip the copy.
You can then use the `-d` argument to instruct the tool to read the symbols from the original
unstripped binary while still calculating the file ID from the final stripped binary. After
the symbols have been pushed, you can remove the unstripped binary:

[source,bash]
----
cp ./my-app ./my-stripped-app
strip ./my-stripped-app
./symbtool push-symbols executable -e ./my-stripped-app -d ./my-app -u <symbolizer url> -t <API token>
rm ./my-app
----

WARNING: Pushing debug information and then stripping the binary later **does not work**.
The executable passed using the `-e` argument is used to calculate the file ID that associates stack 
traces with their symbols and stripping the binary later changes that ID.

[discrete]
[[profiling-symbols-linux]]
== Linux distribution packages

Elastic hosts a public service with symbol information for all packages in the repositories
of various popular linux distributions. Applications installed from these repositories will
be automatically symbolized without any action required on the user's side.

The supported Linux distributions currently include:

- Alpine Linux
- Amazon Linux
- Debian
- Fedora
- Ubuntu
